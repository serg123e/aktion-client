=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'uri'

module AktionClient
  class CustomerApiApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Создает связь между существующим контактным лицом и клиентом
    # @param model 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def customer_api_connect_contact_to_customer(model, opts = {})
      customer_api_connect_contact_to_customer_with_http_info(model, opts)
      nil
    end

    # Создает связь между существующим контактным лицом и клиентом
    # @param model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def customer_api_connect_contact_to_customer_with_http_info(model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_connect_contact_to_customer ...'
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling CustomerApiApi.customer_api_connect_contact_to_customer"
      end
      # resource path
      local_var_path = '/customer/contact/connect'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_connect_contact_to_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Создает организацию
    # @param account_model 
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def customer_api_create_account(account_model, opts = {})
      data, _status_code, _headers = customer_api_create_account_with_http_info(account_model, opts)
      data
    end

    # Создает организацию
    # @param account_model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Fixnum, Hash)>] Account data, response status code and response headers
    def customer_api_create_account_with_http_info(account_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_create_account ...'
      end
      # verify the required parameter 'account_model' is set
      if @api_client.config.client_side_validation && account_model.nil?
        fail ArgumentError, "Missing the required parameter 'account_model' when calling CustomerApiApi.customer_api_create_account"
      end
      # resource path
      local_var_path = '/customer/account'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(account_model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Account')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_create_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Создает физ. лицо
    # @param contact_model 
    # @param [Hash] opts the optional parameters
    # @return [Contact]
    def customer_api_create_contact(contact_model, opts = {})
      data, _status_code, _headers = customer_api_create_contact_with_http_info(contact_model, opts)
      data
    end

    # Создает физ. лицо
    # @param contact_model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contact, Fixnum, Hash)>] Contact data, response status code and response headers
    def customer_api_create_contact_with_http_info(contact_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_create_contact ...'
      end
      # verify the required parameter 'contact_model' is set
      if @api_client.config.client_side_validation && contact_model.nil?
        fail ArgumentError, "Missing the required parameter 'contact_model' when calling CustomerApiApi.customer_api_create_contact"
      end
      # resource path
      local_var_path = '/customer/contact'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(contact_model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Contact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_create_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Разрывает связь между контактным лицом и клиентом
    # @param model 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def customer_api_disconnect_contact_from_customer(model, opts = {})
      customer_api_disconnect_contact_from_customer_with_http_info(model, opts)
      nil
    end

    # Разрывает связь между контактным лицом и клиентом
    # @param model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def customer_api_disconnect_contact_from_customer_with_http_info(model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_disconnect_contact_from_customer ...'
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling CustomerApiApi.customer_api_disconnect_contact_from_customer"
      end
      # resource path
      local_var_path = '/customer/contact/disconnect'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_disconnect_contact_from_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает организации, с которыми связанно контактное лицо, возвращает информацию о стутусе клиента для текущего партнера
    # contactId - email или id контактного лица в CRM Актион
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Customer>]
    def customer_api_get_accounts_by_contact(contact_id, opts = {})
      data, _status_code, _headers = customer_api_get_accounts_by_contact_with_http_info(contact_id, opts)
      data
    end

    # Получает организации, с которыми связанно контактное лицо, возвращает информацию о стутусе клиента для текущего партнера
    # contactId - email или id контактного лица в CRM Актион
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Customer>, Fixnum, Hash)>] Array<Customer> data, response status code and response headers
    def customer_api_get_accounts_by_contact_with_http_info(contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_get_accounts_by_contact ...'
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling CustomerApiApi.customer_api_get_accounts_by_contact"
      end
      # resource path
      local_var_path = '/customer/accounts/contact/{contactId}'.sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Customer>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_get_accounts_by_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Customer>]
    def customer_api_get_accounts_by_contact2(contact_id, opts = {})
      data, _status_code, _headers = customer_api_get_accounts_by_contact2_with_http_info(contact_id, opts)
      data
    end

    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Customer>, Fixnum, Hash)>] Array<Customer> data, response status code and response headers
    def customer_api_get_accounts_by_contact2_with_http_info(contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_get_accounts_by_contact2 ...'
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling CustomerApiApi.customer_api_get_accounts_by_contact2"
      end
      # resource path
      local_var_path = '/customer/accounts/contact'

      # query parameters
      query_params = {}
      query_params[:'contactId'] = contact_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Customer>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_get_accounts_by_contact2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Customer>]
    def customer_api_get_accounts_by_contact3(contact_id, opts = {})
      data, _status_code, _headers = customer_api_get_accounts_by_contact3_with_http_info(contact_id, opts)
      data
    end

    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Customer>, Fixnum, Hash)>] Array<Customer> data, response status code and response headers
    def customer_api_get_accounts_by_contact3_with_http_info(contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_get_accounts_by_contact3 ...'
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling CustomerApiApi.customer_api_get_accounts_by_contact3"
      end
      # resource path
      local_var_path = '/customer/accounts/contact2'

      # query parameters
      query_params = {}
      query_params[:'contactId'] = contact_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Customer>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_get_accounts_by_contact3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param email 
    # @param [Hash] opts the optional parameters
    # @return [Array<Customer>]
    def customer_api_get_accounts_by_contact_by_email(email, opts = {})
      data, _status_code, _headers = customer_api_get_accounts_by_contact_by_email_with_http_info(email, opts)
      data
    end

    # @param email 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Customer>, Fixnum, Hash)>] Array<Customer> data, response status code and response headers
    def customer_api_get_accounts_by_contact_by_email_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_get_accounts_by_contact_by_email ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling CustomerApiApi.customer_api_get_accounts_by_contact_by_email"
      end
      # resource path
      local_var_path = '/customer/accounts/contactByEmail'

      # query parameters
      query_params = {}
      query_params[:'email'] = email

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Customer>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_get_accounts_by_contact_by_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает контактное лицо по email
    # @param email 
    # @param [Hash] opts the optional parameters
    # @return [Contact]
    def customer_api_get_contact_by_email(email, opts = {})
      data, _status_code, _headers = customer_api_get_contact_by_email_with_http_info(email, opts)
      data
    end

    # Получает контактное лицо по email
    # @param email 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contact, Fixnum, Hash)>] Contact data, response status code and response headers
    def customer_api_get_contact_by_email_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_get_contact_by_email ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling CustomerApiApi.customer_api_get_contact_by_email"
      end
      # resource path
      local_var_path = '/customer/contact/{email}'.sub('{' + 'email' + '}', email.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Contact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_get_contact_by_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает контактное лицо по email
    # @param email 
    # @param [Hash] opts the optional parameters
    # @return [Contact]
    def customer_api_get_contact_by_email_v2(email, opts = {})
      data, _status_code, _headers = customer_api_get_contact_by_email_v2_with_http_info(email, opts)
      data
    end

    # Получает контактное лицо по email
    # @param email 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contact, Fixnum, Hash)>] Contact data, response status code and response headers
    def customer_api_get_contact_by_email_v2_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_get_contact_by_email_v2 ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling CustomerApiApi.customer_api_get_contact_by_email_v2"
      end
      # resource path
      local_var_path = '/customer/contact-by-email'

      # query parameters
      query_params = {}
      query_params[:'email'] = email

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Contact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_get_contact_by_email_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает список контактных лиц клиента по его id
    # @param customer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Contact>]
    def customer_api_get_contacts_by_customer_id(customer_id, opts = {})
      data, _status_code, _headers = customer_api_get_contacts_by_customer_id_with_http_info(customer_id, opts)
      data
    end

    # Получает список контактных лиц клиента по его id
    # @param customer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Contact>, Fixnum, Hash)>] Array<Contact> data, response status code and response headers
    def customer_api_get_contacts_by_customer_id_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_get_contacts_by_customer_id ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomerApiApi.customer_api_get_contacts_by_customer_id"
      end
      # resource path
      local_var_path = '/customer/{customerId}/contacts'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Contact>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_get_contacts_by_customer_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает контактные лица по номеру телефона
    # @param phone_number 
    # @param [Hash] opts the optional parameters
    # @return [Array<Contact>]
    def customer_api_get_contacts_by_phone_number(phone_number, opts = {})
      data, _status_code, _headers = customer_api_get_contacts_by_phone_number_with_http_info(phone_number, opts)
      data
    end

    # Получает контактные лица по номеру телефона
    # @param phone_number 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Contact>, Fixnum, Hash)>] Array<Contact> data, response status code and response headers
    def customer_api_get_contacts_by_phone_number_with_http_info(phone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_get_contacts_by_phone_number ...'
      end
      # verify the required parameter 'phone_number' is set
      if @api_client.config.client_side_validation && phone_number.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number' when calling CustomerApiApi.customer_api_get_contacts_by_phone_number"
      end
      # resource path
      local_var_path = '/customer/contacts/phone/{phoneNumber}'.sub('{' + 'phoneNumber' + '}', phone_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Contact>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_get_contacts_by_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает клиентов по списку ключей, возвращает информацию о стутусе клиента для текущего партнера
    # Ключем для организаций является пара ИНН+КПП, для физ.лиц - email или ИНН. Если указан только ИНН, то метод пытается определить физ. лицо, для того чтобы выполнить               поиск организации только по ИНН нужно явно указать тип клиента: Type='account'
    # @param customer_keys 
    # @param [Hash] opts the optional parameters
    # @return [Array<CustomerByKey>]
    def customer_api_get_customers(customer_keys, opts = {})
      data, _status_code, _headers = customer_api_get_customers_with_http_info(customer_keys, opts)
      data
    end

    # Получает клиентов по списку ключей, возвращает информацию о стутусе клиента для текущего партнера
    # Ключем для организаций является пара ИНН+КПП, для физ.лиц - email или ИНН. Если указан только ИНН, то метод пытается определить физ. лицо, для того чтобы выполнить               поиск организации только по ИНН нужно явно указать тип клиента: Type&#x3D;&#39;account&#39;
    # @param customer_keys 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CustomerByKey>, Fixnum, Hash)>] Array<CustomerByKey> data, response status code and response headers
    def customer_api_get_customers_with_http_info(customer_keys, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_get_customers ...'
      end
      # verify the required parameter 'customer_keys' is set
      if @api_client.config.client_side_validation && customer_keys.nil?
        fail ArgumentError, "Missing the required parameter 'customer_keys' when calling CustomerApiApi.customer_api_get_customers"
      end
      # resource path
      local_var_path = '/customer/customers'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(customer_keys)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CustomerByKey>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_get_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает возможные должности контактного лица
    # @param [Hash] opts the optional parameters
    # @return [Array<JobTitle>]
    def customer_api_get_job_titles(opts = {})
      data, _status_code, _headers = customer_api_get_job_titles_with_http_info(opts)
      data
    end

    # Возвращает возможные должности контактного лица
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<JobTitle>, Fixnum, Hash)>] Array<JobTitle> data, response status code and response headers
    def customer_api_get_job_titles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_get_job_titles ...'
      end
      # resource path
      local_var_path = '/customer/jobtitles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<JobTitle>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_get_job_titles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Поиск клиентов по различным параметрам, возвращает информацию о стутусе клиента для текущего партнера
    # Для всех полей поиска символ * заменяет любой набор символов, символ ? заменяет любой один символ
    # @param search 
    # @param [Hash] opts the optional parameters
    # @return [Array<Customer>]
    def customer_api_search_customers(search, opts = {})
      data, _status_code, _headers = customer_api_search_customers_with_http_info(search, opts)
      data
    end

    # Поиск клиентов по различным параметрам, возвращает информацию о стутусе клиента для текущего партнера
    # Для всех полей поиска символ * заменяет любой набор символов, символ ? заменяет любой один символ
    # @param search 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Customer>, Fixnum, Hash)>] Array<Customer> data, response status code and response headers
    def customer_api_search_customers_with_http_info(search, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_search_customers ...'
      end
      # verify the required parameter 'search' is set
      if @api_client.config.client_side_validation && search.nil?
        fail ArgumentError, "Missing the required parameter 'search' when calling CustomerApiApi.customer_api_search_customers"
      end
      # resource path
      local_var_path = '/customer/search'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(search)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Customer>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_search_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 
    # @param system_user_id 
    # @param search 
    # @param [Hash] opts the optional parameters
    # @return [Array<Customer>]
    def customer_api_search_customers_stop_list(system_user_id, search, opts = {})
      data, _status_code, _headers = customer_api_search_customers_stop_list_with_http_info(system_user_id, search, opts)
      data
    end

    # 
    # @param system_user_id 
    # @param search 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Customer>, Fixnum, Hash)>] Array<Customer> data, response status code and response headers
    def customer_api_search_customers_stop_list_with_http_info(system_user_id, search, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_search_customers_stop_list ...'
      end
      # verify the required parameter 'system_user_id' is set
      if @api_client.config.client_side_validation && system_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'system_user_id' when calling CustomerApiApi.customer_api_search_customers_stop_list"
      end
      # verify the required parameter 'search' is set
      if @api_client.config.client_side_validation && search.nil?
        fail ArgumentError, "Missing the required parameter 'search' when calling CustomerApiApi.customer_api_search_customers_stop_list"
      end
      # resource path
      local_var_path = '/customer/searchsl'

      # query parameters
      query_params = {}
      query_params[:'systemUserId'] = system_user_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(search)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Customer>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_search_customers_stop_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Обноляет физ. лицо
    # @param contact_model 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def customer_api_update_contact(contact_model, opts = {})
      customer_api_update_contact_with_http_info(contact_model, opts)
      nil
    end

    # Обноляет физ. лицо
    # @param contact_model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def customer_api_update_contact_with_http_info(contact_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_update_contact ...'
      end
      # verify the required parameter 'contact_model' is set
      if @api_client.config.client_side_validation && contact_model.nil?
        fail ArgumentError, "Missing the required parameter 'contact_model' when calling CustomerApiApi.customer_api_update_contact"
      end
      # resource path
      local_var_path = '/customer/contact/update'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(contact_model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_update_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Обноляет и проверяет телефон
    # @param phone 
    # @param contactid 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def customer_api_update_phone(phone, contactid, opts = {})
      customer_api_update_phone_with_http_info(phone, contactid, opts)
      nil
    end

    # Обноляет и проверяет телефон
    # @param phone 
    # @param contactid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def customer_api_update_phone_with_http_info(phone, contactid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_api_update_phone ...'
      end
      # verify the required parameter 'phone' is set
      if @api_client.config.client_side_validation && phone.nil?
        fail ArgumentError, "Missing the required parameter 'phone' when calling CustomerApiApi.customer_api_update_phone"
      end
      # verify the required parameter 'contactid' is set
      if @api_client.config.client_side_validation && contactid.nil?
        fail ArgumentError, "Missing the required parameter 'contactid' when calling CustomerApiApi.customer_api_update_phone"
      end
      # resource path
      local_var_path = '/customer/contact/phone/{contactid}'.sub('{' + 'contactid' + '}', contactid.to_s)

      # query parameters
      query_params = {}
      query_params[:'phone'] = phone

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_api_update_phone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # проверят свой чужой
    # @param email 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def customer_apiheck_contact_email(email, opts = {})
      data, _status_code, _headers = customer_apiheck_contact_email_with_http_info(email, opts)
      data
    end

    # проверят свой чужой
    # @param email 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def customer_apiheck_contact_email_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_apiheck_contact_email ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling CustomerApiApi.customer_apiheck_contact_email"
      end
      # resource path
      local_var_path = '/customer/checkContactEmail'

      # query parameters
      query_params = {}
      query_params[:'email'] = email

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_apiheck_contact_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # проверят свой чужой
    # @param email 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def customer_apiheck_contact_email_exists(email, opts = {})
      data, _status_code, _headers = customer_apiheck_contact_email_exists_with_http_info(email, opts)
      data
    end

    # проверят свой чужой
    # @param email 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def customer_apiheck_contact_email_exists_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApiApi.customer_apiheck_contact_email_exists ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling CustomerApiApi.customer_apiheck_contact_email_exists"
      end
      # resource path
      local_var_path = '/customer/checkContactEmailExists/{email}'.sub('{' + 'email' + '}', email.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApiApi#customer_apiheck_contact_email_exists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
