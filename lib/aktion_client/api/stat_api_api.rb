=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'uri'

module AktionClient
  class StatApiApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Журнал
    # @param customer_id 
    # @param email 
    # @param pin 
    # @param inn 
    # @param kpp 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def stat_api_get_activity(customer_id, email, pin, inn, kpp, opts = {})
      data, _status_code, _headers = stat_api_get_activity_with_http_info(customer_id, email, pin, inn, kpp, opts)
      data
    end

    # Журнал
    # @param customer_id 
    # @param email 
    # @param pin 
    # @param inn 
    # @param kpp 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def stat_api_get_activity_with_http_info(customer_id, email, pin, inn, kpp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatApiApi.stat_api_get_activity ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling StatApiApi.stat_api_get_activity"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling StatApiApi.stat_api_get_activity"
      end
      # verify the required parameter 'pin' is set
      if @api_client.config.client_side_validation && pin.nil?
        fail ArgumentError, "Missing the required parameter 'pin' when calling StatApiApi.stat_api_get_activity"
      end
      # verify the required parameter 'inn' is set
      if @api_client.config.client_side_validation && inn.nil?
        fail ArgumentError, "Missing the required parameter 'inn' when calling StatApiApi.stat_api_get_activity"
      end
      # verify the required parameter 'kpp' is set
      if @api_client.config.client_side_validation && kpp.nil?
        fail ArgumentError, "Missing the required parameter 'kpp' when calling StatApiApi.stat_api_get_activity"
      end
      # resource path
      local_var_path = '/stat/activity'

      # query parameters
      query_params = {}
      query_params[:'customerId'] = customer_id
      query_params[:'email'] = email
      query_params[:'pin'] = pin
      query_params[:'inn'] = inn
      query_params[:'kpp'] = kpp

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatApiApi#stat_api_get_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Сертификаты
    # @param customer_id 
    # @param email 
    # @param pin 
    # @param inn 
    # @param kpp 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def stat_api_get_certificates(customer_id, email, pin, inn, kpp, opts = {})
      data, _status_code, _headers = stat_api_get_certificates_with_http_info(customer_id, email, pin, inn, kpp, opts)
      data
    end

    # Сертификаты
    # @param customer_id 
    # @param email 
    # @param pin 
    # @param inn 
    # @param kpp 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def stat_api_get_certificates_with_http_info(customer_id, email, pin, inn, kpp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatApiApi.stat_api_get_certificates ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling StatApiApi.stat_api_get_certificates"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling StatApiApi.stat_api_get_certificates"
      end
      # verify the required parameter 'pin' is set
      if @api_client.config.client_side_validation && pin.nil?
        fail ArgumentError, "Missing the required parameter 'pin' when calling StatApiApi.stat_api_get_certificates"
      end
      # verify the required parameter 'inn' is set
      if @api_client.config.client_side_validation && inn.nil?
        fail ArgumentError, "Missing the required parameter 'inn' when calling StatApiApi.stat_api_get_certificates"
      end
      # verify the required parameter 'kpp' is set
      if @api_client.config.client_side_validation && kpp.nil?
        fail ArgumentError, "Missing the required parameter 'kpp' when calling StatApiApi.stat_api_get_certificates"
      end
      # resource path
      local_var_path = '/stat/certificates'

      # query parameters
      query_params = {}
      query_params[:'customerId'] = customer_id
      query_params[:'email'] = email
      query_params[:'pin'] = pin
      query_params[:'inn'] = inn
      query_params[:'kpp'] = kpp

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatApiApi#stat_api_get_certificates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Демодоступы
    # @param customer_id 
    # @param email 
    # @param pin 
    # @param inn 
    # @param kpp 
    # @param date_start 
    # @param date_end 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def stat_api_get_demoaccess(customer_id, email, pin, inn, kpp, date_start, date_end, opts = {})
      data, _status_code, _headers = stat_api_get_demoaccess_with_http_info(customer_id, email, pin, inn, kpp, date_start, date_end, opts)
      data
    end

    # Демодоступы
    # @param customer_id 
    # @param email 
    # @param pin 
    # @param inn 
    # @param kpp 
    # @param date_start 
    # @param date_end 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def stat_api_get_demoaccess_with_http_info(customer_id, email, pin, inn, kpp, date_start, date_end, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatApiApi.stat_api_get_demoaccess ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling StatApiApi.stat_api_get_demoaccess"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling StatApiApi.stat_api_get_demoaccess"
      end
      # verify the required parameter 'pin' is set
      if @api_client.config.client_side_validation && pin.nil?
        fail ArgumentError, "Missing the required parameter 'pin' when calling StatApiApi.stat_api_get_demoaccess"
      end
      # verify the required parameter 'inn' is set
      if @api_client.config.client_side_validation && inn.nil?
        fail ArgumentError, "Missing the required parameter 'inn' when calling StatApiApi.stat_api_get_demoaccess"
      end
      # verify the required parameter 'kpp' is set
      if @api_client.config.client_side_validation && kpp.nil?
        fail ArgumentError, "Missing the required parameter 'kpp' when calling StatApiApi.stat_api_get_demoaccess"
      end
      # verify the required parameter 'date_start' is set
      if @api_client.config.client_side_validation && date_start.nil?
        fail ArgumentError, "Missing the required parameter 'date_start' when calling StatApiApi.stat_api_get_demoaccess"
      end
      # verify the required parameter 'date_end' is set
      if @api_client.config.client_side_validation && date_end.nil?
        fail ArgumentError, "Missing the required parameter 'date_end' when calling StatApiApi.stat_api_get_demoaccess"
      end
      # resource path
      local_var_path = '/stat/demoaccess'

      # query parameters
      query_params = {}
      query_params[:'customerId'] = customer_id
      query_params[:'email'] = email
      query_params[:'pin'] = pin
      query_params[:'inn'] = inn
      query_params[:'kpp'] = kpp
      query_params[:'dateStart'] = date_start
      query_params[:'dateEnd'] = date_end

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatApiApi#stat_api_get_demoaccess\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает статистику по горячей линии
    # @param [Hash] opts the optional parameters
    # @option opts [String] :model_auth_code 
    # @option opts [DateTime] :model_date_start 
    # @option opts [DateTime] :model_date_end 
    # @option opts [String] :model_customer_id 
    # @option opts [String] :model_bitrix_id 
    # @option opts [String] :model_email 
    # @return [Array<HotLine>]
    def stat_api_get_hot_line(opts = {})
      data, _status_code, _headers = stat_api_get_hot_line_with_http_info(opts)
      data
    end

    # Возвращает статистику по горячей линии
    # @param [Hash] opts the optional parameters
    # @option opts [String] :model_auth_code 
    # @option opts [DateTime] :model_date_start 
    # @option opts [DateTime] :model_date_end 
    # @option opts [String] :model_customer_id 
    # @option opts [String] :model_bitrix_id 
    # @option opts [String] :model_email 
    # @return [Array<(Array<HotLine>, Fixnum, Hash)>] Array<HotLine> data, response status code and response headers
    def stat_api_get_hot_line_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatApiApi.stat_api_get_hot_line ...'
      end
      # resource path
      local_var_path = '/stat/hotline'

      # query parameters
      query_params = {}
      query_params[:'model.authCode'] = opts[:'model_auth_code'] if !opts[:'model_auth_code'].nil?
      query_params[:'model.dateStart'] = opts[:'model_date_start'] if !opts[:'model_date_start'].nil?
      query_params[:'model.dateEnd'] = opts[:'model_date_end'] if !opts[:'model_date_end'].nil?
      query_params[:'model.customerId'] = opts[:'model_customer_id'] if !opts[:'model_customer_id'].nil?
      query_params[:'model.bitrixId'] = opts[:'model_bitrix_id'] if !opts[:'model_bitrix_id'].nil?
      query_params[:'model.email'] = opts[:'model_email'] if !opts[:'model_email'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<HotLine>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatApiApi#stat_api_get_hot_line\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # УКД
    # @param customer_id 
    # @param email 
    # @param pin 
    # @param inn 
    # @param kpp 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def stat_api_get_licenses(customer_id, email, pin, inn, kpp, opts = {})
      data, _status_code, _headers = stat_api_get_licenses_with_http_info(customer_id, email, pin, inn, kpp, opts)
      data
    end

    # УКД
    # @param customer_id 
    # @param email 
    # @param pin 
    # @param inn 
    # @param kpp 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def stat_api_get_licenses_with_http_info(customer_id, email, pin, inn, kpp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatApiApi.stat_api_get_licenses ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling StatApiApi.stat_api_get_licenses"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling StatApiApi.stat_api_get_licenses"
      end
      # verify the required parameter 'pin' is set
      if @api_client.config.client_side_validation && pin.nil?
        fail ArgumentError, "Missing the required parameter 'pin' when calling StatApiApi.stat_api_get_licenses"
      end
      # verify the required parameter 'inn' is set
      if @api_client.config.client_side_validation && inn.nil?
        fail ArgumentError, "Missing the required parameter 'inn' when calling StatApiApi.stat_api_get_licenses"
      end
      # verify the required parameter 'kpp' is set
      if @api_client.config.client_side_validation && kpp.nil?
        fail ArgumentError, "Missing the required parameter 'kpp' when calling StatApiApi.stat_api_get_licenses"
      end
      # resource path
      local_var_path = '/stat/licenses'

      # query parameters
      query_params = {}
      query_params[:'customerId'] = customer_id
      query_params[:'email'] = email
      query_params[:'pin'] = pin
      query_params[:'inn'] = inn
      query_params[:'kpp'] = kpp

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatApiApi#stat_api_get_licenses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает данные по чатам конкретного клиента по bitrixId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :model_auth_code 
    # @option opts [DateTime] :model_date_start 
    # @option opts [DateTime] :model_date_end 
    # @option opts [String] :model_customer_id 
    # @option opts [String] :model_bitrix_id 
    # @option opts [String] :model_email 
    # @return [Array<OnlineChat>]
    def stat_api_get_online_chat(opts = {})
      data, _status_code, _headers = stat_api_get_online_chat_with_http_info(opts)
      data
    end

    # Возвращает данные по чатам конкретного клиента по bitrixId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :model_auth_code 
    # @option opts [DateTime] :model_date_start 
    # @option opts [DateTime] :model_date_end 
    # @option opts [String] :model_customer_id 
    # @option opts [String] :model_bitrix_id 
    # @option opts [String] :model_email 
    # @return [Array<(Array<OnlineChat>, Fixnum, Hash)>] Array<OnlineChat> data, response status code and response headers
    def stat_api_get_online_chat_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatApiApi.stat_api_get_online_chat ...'
      end
      # resource path
      local_var_path = '/stat/onlinechat'

      # query parameters
      query_params = {}
      query_params[:'model.authCode'] = opts[:'model_auth_code'] if !opts[:'model_auth_code'].nil?
      query_params[:'model.dateStart'] = opts[:'model_date_start'] if !opts[:'model_date_start'].nil?
      query_params[:'model.dateEnd'] = opts[:'model_date_end'] if !opts[:'model_date_end'].nil?
      query_params[:'model.customerId'] = opts[:'model_customer_id'] if !opts[:'model_customer_id'].nil?
      query_params[:'model.bitrixId'] = opts[:'model_bitrix_id'] if !opts[:'model_bitrix_id'].nil?
      query_params[:'model.email'] = opts[:'model_email'] if !opts[:'model_email'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<OnlineChat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatApiApi#stat_api_get_online_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Статистика
    # @param customer_id 
    # @param email 
    # @param pin 
    # @param inn 
    # @param kpp 
    # @param date_start 
    # @param date_end 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def stat_api_get_statistics(customer_id, email, pin, inn, kpp, date_start, date_end, opts = {})
      data, _status_code, _headers = stat_api_get_statistics_with_http_info(customer_id, email, pin, inn, kpp, date_start, date_end, opts)
      data
    end

    # Статистика
    # @param customer_id 
    # @param email 
    # @param pin 
    # @param inn 
    # @param kpp 
    # @param date_start 
    # @param date_end 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def stat_api_get_statistics_with_http_info(customer_id, email, pin, inn, kpp, date_start, date_end, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatApiApi.stat_api_get_statistics ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling StatApiApi.stat_api_get_statistics"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling StatApiApi.stat_api_get_statistics"
      end
      # verify the required parameter 'pin' is set
      if @api_client.config.client_side_validation && pin.nil?
        fail ArgumentError, "Missing the required parameter 'pin' when calling StatApiApi.stat_api_get_statistics"
      end
      # verify the required parameter 'inn' is set
      if @api_client.config.client_side_validation && inn.nil?
        fail ArgumentError, "Missing the required parameter 'inn' when calling StatApiApi.stat_api_get_statistics"
      end
      # verify the required parameter 'kpp' is set
      if @api_client.config.client_side_validation && kpp.nil?
        fail ArgumentError, "Missing the required parameter 'kpp' when calling StatApiApi.stat_api_get_statistics"
      end
      # verify the required parameter 'date_start' is set
      if @api_client.config.client_side_validation && date_start.nil?
        fail ArgumentError, "Missing the required parameter 'date_start' when calling StatApiApi.stat_api_get_statistics"
      end
      # verify the required parameter 'date_end' is set
      if @api_client.config.client_side_validation && date_end.nil?
        fail ArgumentError, "Missing the required parameter 'date_end' when calling StatApiApi.stat_api_get_statistics"
      end
      # resource path
      local_var_path = '/stat/statistics'

      # query parameters
      query_params = {}
      query_params[:'customerId'] = customer_id
      query_params[:'email'] = email
      query_params[:'pin'] = pin
      query_params[:'inn'] = inn
      query_params[:'kpp'] = kpp
      query_params[:'dateStart'] = date_start
      query_params[:'dateEnd'] = date_end

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatApiApi#stat_api_get_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
