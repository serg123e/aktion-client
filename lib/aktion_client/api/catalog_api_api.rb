=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'uri'

module AktionClient
  class CatalogApiApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Получает файл с новостями по головному продукту.
    # @param main_product_id 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def catalog_api_get_main_product_news_file(main_product_id, opts = {})
      data, _status_code, _headers = catalog_api_get_main_product_news_file_with_http_info(main_product_id, opts)
      data
    end

    # Получает файл с новостями по головному продукту.
    # @param main_product_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def catalog_api_get_main_product_news_file_with_http_info(main_product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogApiApi.catalog_api_get_main_product_news_file ...'
      end
      # verify the required parameter 'main_product_id' is set
      if @api_client.config.client_side_validation && main_product_id.nil?
        fail ArgumentError, "Missing the required parameter 'main_product_id' when calling CatalogApiApi.catalog_api_get_main_product_news_file"
      end
      # resource path
      local_var_path = '/catalog/news/file'

      # query parameters
      query_params = {}
      query_params[:'mainProductId'] = main_product_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApiApi#catalog_api_get_main_product_news_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает список головных продуктов
    # @param [Hash] opts the optional parameters
    # @return [Array<MainProduct>]
    def catalog_api_get_main_products(opts = {})
      data, _status_code, _headers = catalog_api_get_main_products_with_http_info(opts)
      data
    end

    # Возвращает список головных продуктов
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MainProduct>, Fixnum, Hash)>] Array<MainProduct> data, response status code and response headers
    def catalog_api_get_main_products_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogApiApi.catalog_api_get_main_products ...'
      end
      # resource path
      local_var_path = '/catalog/mainproducts'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<MainProduct>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApiApi#catalog_api_get_main_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param product_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<MainProduct>]
    def catalog_api_get_main_products_by_name(product_name, opts = {})
      data, _status_code, _headers = catalog_api_get_main_products_by_name_with_http_info(product_name, opts)
      data
    end

    # @param product_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MainProduct>, Fixnum, Hash)>] Array<MainProduct> data, response status code and response headers
    def catalog_api_get_main_products_by_name_with_http_info(product_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogApiApi.catalog_api_get_main_products_by_name ...'
      end
      # verify the required parameter 'product_name' is set
      if @api_client.config.client_side_validation && product_name.nil?
        fail ArgumentError, "Missing the required parameter 'product_name' when calling CatalogApiApi.catalog_api_get_main_products_by_name"
      end
      # resource path
      local_var_path = '/catalog/GetMainProductsByName'

      # query parameters
      query_params = {}
      query_params[:'productName'] = product_name

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<MainProduct>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApiApi#catalog_api_get_main_products_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [Array<MainProduct>]
    def catalog_api_get_main_products_filtered(opts = {})
      data, _status_code, _headers = catalog_api_get_main_products_filtered_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MainProduct>, Fixnum, Hash)>] Array<MainProduct> data, response status code and response headers
    def catalog_api_get_main_products_filtered_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogApiApi.catalog_api_get_main_products_filtered ...'
      end
      # resource path
      local_var_path = '/catalog/mainproductsfiltered'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<MainProduct>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApiApi#catalog_api_get_main_products_filtered\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param is_external 
    # @param [Hash] opts the optional parameters
    # @return [Array<MainProduct>]
    def catalog_api_get_main_products_is_external_partner(is_external, opts = {})
      data, _status_code, _headers = catalog_api_get_main_products_is_external_partner_with_http_info(is_external, opts)
      data
    end

    # @param is_external 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MainProduct>, Fixnum, Hash)>] Array<MainProduct> data, response status code and response headers
    def catalog_api_get_main_products_is_external_partner_with_http_info(is_external, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogApiApi.catalog_api_get_main_products_is_external_partner ...'
      end
      # verify the required parameter 'is_external' is set
      if @api_client.config.client_side_validation && is_external.nil?
        fail ArgumentError, "Missing the required parameter 'is_external' when calling CatalogApiApi.catalog_api_get_main_products_is_external_partner"
      end
      # resource path
      local_var_path = '/catalog/GetMainProductsIsExternalPartner'

      # query parameters
      query_params = {}
      query_params[:'isExternal'] = is_external

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<MainProduct>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApiApi#catalog_api_get_main_products_is_external_partner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [Array<MainProduct>]
    def catalog_api_get_main_products_school(opts = {})
      data, _status_code, _headers = catalog_api_get_main_products_school_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MainProduct>, Fixnum, Hash)>] Array<MainProduct> data, response status code and response headers
    def catalog_api_get_main_products_school_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogApiApi.catalog_api_get_main_products_school ...'
      end
      # resource path
      local_var_path = '/catalog/GetMainProductsSchool'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<MainProduct>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApiApi#catalog_api_get_main_products_school\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param main_product_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<ProductCore>]
    def catalog_api_get_products_by_main_product(main_product_id, opts = {})
      data, _status_code, _headers = catalog_api_get_products_by_main_product_with_http_info(main_product_id, opts)
      data
    end

    # @param main_product_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ProductCore>, Fixnum, Hash)>] Array<ProductCore> data, response status code and response headers
    def catalog_api_get_products_by_main_product_with_http_info(main_product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogApiApi.catalog_api_get_products_by_main_product ...'
      end
      # verify the required parameter 'main_product_id' is set
      if @api_client.config.client_side_validation && main_product_id.nil?
        fail ArgumentError, "Missing the required parameter 'main_product_id' when calling CatalogApiApi.catalog_api_get_products_by_main_product"
      end
      # resource path
      local_var_path = '/catalog/products'

      # query parameters
      query_params = {}
      query_params[:'mainProductId'] = main_product_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ProductCore>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApiApi#catalog_api_get_products_by_main_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
