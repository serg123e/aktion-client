=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'uri'

module AktionClient
  class SecurityApiApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param domain 
    # @param username 
    # @param password 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def security_api_auth(domain, username, password, opts = {})
      data, _status_code, _headers = security_api_auth_with_http_info(domain, username, password, opts)
      data
    end

    # @param domain 
    # @param username 
    # @param password 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def security_api_auth_with_http_info(domain, username, password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApiApi.security_api_auth ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling SecurityApiApi.security_api_auth"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling SecurityApiApi.security_api_auth"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling SecurityApiApi.security_api_auth"
      end
      # resource path
      local_var_path = '/security/getauthtoken'

      # query parameters
      query_params = {}
      query_params[:'domain'] = domain
      query_params[:'username'] = username
      query_params[:'password'] = password

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApiApi#security_api_auth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param email 
    # @param password 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def security_api_get_bod_token(email, password, opts = {})
      data, _status_code, _headers = security_api_get_bod_token_with_http_info(email, password, opts)
      data
    end

    # @param email 
    # @param password 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def security_api_get_bod_token_with_http_info(email, password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApiApi.security_api_get_bod_token ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling SecurityApiApi.security_api_get_bod_token"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling SecurityApiApi.security_api_get_bod_token"
      end
      # resource path
      local_var_path = '/security/getbodtoken'

      # query parameters
      query_params = {}
      query_params[:'email'] = email
      query_params[:'password'] = password

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApiApi#security_api_get_bod_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param email 
    # @param password 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def security_api_get_token(email, password, opts = {})
      data, _status_code, _headers = security_api_get_token_with_http_info(email, password, opts)
      data
    end

    # @param email 
    # @param password 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def security_api_get_token_with_http_info(email, password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApiApi.security_api_get_token ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling SecurityApiApi.security_api_get_token"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling SecurityApiApi.security_api_get_token"
      end
      # resource path
      local_var_path = '/security/gettoken'

      # query parameters
      query_params = {}
      query_params[:'email'] = email
      query_params[:'password'] = password

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApiApi#security_api_get_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param partner_id 
    # @param date 
    # @param user_id 
    # @param random 
    # @param sign 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def security_api_login_by_url(partner_id, date, user_id, random, sign, opts = {})
      data, _status_code, _headers = security_api_login_by_url_with_http_info(partner_id, date, user_id, random, sign, opts)
      data
    end

    # @param partner_id 
    # @param date 
    # @param user_id 
    # @param random 
    # @param sign 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def security_api_login_by_url_with_http_info(partner_id, date, user_id, random, sign, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApiApi.security_api_login_by_url ...'
      end
      # verify the required parameter 'partner_id' is set
      if @api_client.config.client_side_validation && partner_id.nil?
        fail ArgumentError, "Missing the required parameter 'partner_id' when calling SecurityApiApi.security_api_login_by_url"
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling SecurityApiApi.security_api_login_by_url"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SecurityApiApi.security_api_login_by_url"
      end
      # verify the required parameter 'random' is set
      if @api_client.config.client_side_validation && random.nil?
        fail ArgumentError, "Missing the required parameter 'random' when calling SecurityApiApi.security_api_login_by_url"
      end
      # verify the required parameter 'sign' is set
      if @api_client.config.client_side_validation && sign.nil?
        fail ArgumentError, "Missing the required parameter 'sign' when calling SecurityApiApi.security_api_login_by_url"
      end
      # resource path
      local_var_path = '/security/LoginByUrl'

      # query parameters
      query_params = {}
      query_params[:'partnerId'] = partner_id
      query_params[:'date'] = date
      query_params[:'userId'] = user_id
      query_params[:'random'] = random
      query_params[:'sign'] = sign

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApiApi#security_api_login_by_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
