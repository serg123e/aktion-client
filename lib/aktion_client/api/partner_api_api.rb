=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'uri'

module AktionClient
  class PartnerApiApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Возвращает список менеджеров партнера всей филиальной сети
    # @param [Hash] opts the optional parameters
    # @return [Array<PartnerUser>]
    def partner_api_get_all_managers(opts = {})
      data, _status_code, _headers = partner_api_get_all_managers_with_http_info(opts)
      data
    end

    # Возвращает список менеджеров партнера всей филиальной сети
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PartnerUser>, Fixnum, Hash)>] Array<PartnerUser> data, response status code and response headers
    def partner_api_get_all_managers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_get_all_managers ...'
      end
      # resource path
      local_var_path = '/partner/managers/all'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PartnerUser>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_get_all_managers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает доступных партнеров для \"мульти-партнер\" пользователя
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Partner>]
    def partner_api_get_available_partners(user_id, opts = {})
      data, _status_code, _headers = partner_api_get_available_partners_with_http_info(user_id, opts)
      data
    end

    # Получает доступных партнеров для \&quot;мульти-партнер\&quot; пользователя
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Partner>, Fixnum, Hash)>] Array<Partner> data, response status code and response headers
    def partner_api_get_available_partners_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_get_available_partners ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling PartnerApiApi.partner_api_get_available_partners"
      end
      # resource path
      local_var_path = '/partner/available/{userId}'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Partner>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_get_available_partners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # получаем филиал по партнеру. если партнер null выводится весь список филиалов
    # @param partner_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Filial>]
    def partner_api_get_filial_by_partner_id(partner_id, opts = {})
      data, _status_code, _headers = partner_api_get_filial_by_partner_id_with_http_info(partner_id, opts)
      data
    end

    # получаем филиал по партнеру. если партнер null выводится весь список филиалов
    # @param partner_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Filial>, Fixnum, Hash)>] Array<Filial> data, response status code and response headers
    def partner_api_get_filial_by_partner_id_with_http_info(partner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_get_filial_by_partner_id ...'
      end
      # verify the required parameter 'partner_id' is set
      if @api_client.config.client_side_validation && partner_id.nil?
        fail ArgumentError, "Missing the required parameter 'partner_id' when calling PartnerApiApi.partner_api_get_filial_by_partner_id"
      end
      # resource path
      local_var_path = '/partner/filial'

      # query parameters
      query_params = {}
      query_params[:'partnerId'] = partner_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Filial>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_get_filial_by_partner_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает филиал по ИД подразделения
    # @param unit_id 
    # @param [Hash] opts the optional parameters
    # @return [Filial]
    def partner_api_get_filial_by_unit(unit_id, opts = {})
      data, _status_code, _headers = partner_api_get_filial_by_unit_with_http_info(unit_id, opts)
      data
    end

    # Возвращает филиал по ИД подразделения
    # @param unit_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Filial, Fixnum, Hash)>] Filial data, response status code and response headers
    def partner_api_get_filial_by_unit_with_http_info(unit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_get_filial_by_unit ...'
      end
      # verify the required parameter 'unit_id' is set
      if @api_client.config.client_side_validation && unit_id.nil?
        fail ArgumentError, "Missing the required parameter 'unit_id' when calling PartnerApiApi.partner_api_get_filial_by_unit"
      end
      # resource path
      local_var_path = '/partner/FilialByUnit'

      # query parameters
      query_params = {}
      query_params[:'unitId'] = unit_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Filial')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_get_filial_by_unit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает информацию о менеджере
    # userId - id пользователя в CRM актион или email пользователя
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [PartnerUser]
    def partner_api_get_manager(user_id, opts = {})
      data, _status_code, _headers = partner_api_get_manager_with_http_info(user_id, opts)
      data
    end

    # Получает информацию о менеджере
    # userId - id пользователя в CRM актион или email пользователя
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PartnerUser, Fixnum, Hash)>] PartnerUser data, response status code and response headers
    def partner_api_get_manager_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_get_manager ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling PartnerApiApi.partner_api_get_manager"
      end
      # resource path
      local_var_path = '/partner/manager'

      # query parameters
      query_params = {}
      query_params[:'userId'] = user_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PartnerUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_get_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает список менеджеров партнера по id
    # @param partner_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<PartnerUser>]
    def partner_api_get_managers(partner_id, opts = {})
      data, _status_code, _headers = partner_api_get_managers_with_http_info(partner_id, opts)
      data
    end

    # Возвращает список менеджеров партнера по id
    # @param partner_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PartnerUser>, Fixnum, Hash)>] Array<PartnerUser> data, response status code and response headers
    def partner_api_get_managers_with_http_info(partner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_get_managers ...'
      end
      # verify the required parameter 'partner_id' is set
      if @api_client.config.client_side_validation && partner_id.nil?
        fail ArgumentError, "Missing the required parameter 'partner_id' when calling PartnerApiApi.partner_api_get_managers"
      end
      # resource path
      local_var_path = '/partner/managers/{partnerId}'.sub('{' + 'partnerId' + '}', partner_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PartnerUser>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_get_managers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает список партнеров филиальной сети для текущего партнерского аккаунта
    # @param [Hash] opts the optional parameters
    # @return [Array<Partner>]
    def partner_api_get_my_partners(opts = {})
      data, _status_code, _headers = partner_api_get_my_partners_with_http_info(opts)
      data
    end

    # Возвращает список партнеров филиальной сети для текущего партнерского аккаунта
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Partner>, Fixnum, Hash)>] Array<Partner> data, response status code and response headers
    def partner_api_get_my_partners_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_get_my_partners ...'
      end
      # resource path
      local_var_path = '/partner/mypartners'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Partner>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_get_my_partners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает список менеджеров партнера
    # @param [Hash] opts the optional parameters
    # @return [Array<PartnerUser>]
    def partner_api_get_partner_managers(opts = {})
      data, _status_code, _headers = partner_api_get_partner_managers_with_http_info(opts)
      data
    end

    # Возвращает список менеджеров партнера
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PartnerUser>, Fixnum, Hash)>] Array<PartnerUser> data, response status code and response headers
    def partner_api_get_partner_managers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_get_partner_managers ...'
      end
      # resource path
      local_var_path = '/partner/managers'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PartnerUser>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_get_partner_managers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает справочник Должности-Категории
    # @param [Hash] opts the optional parameters
    # @return [Array<PositionCategory>]
    def partner_api_get_position_categories(opts = {})
      data, _status_code, _headers = partner_api_get_position_categories_with_http_info(opts)
      data
    end

    # Возвращает справочник Должности-Категории
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PositionCategory>, Fixnum, Hash)>] Array<PositionCategory> data, response status code and response headers
    def partner_api_get_position_categories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_get_position_categories ...'
      end
      # resource path
      local_var_path = '/partner/position/categories'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PositionCategory>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_get_position_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает справочник Должности-Направления
    # @param [Hash] opts the optional parameters
    # @return [Array<PositionDirection>]
    def partner_api_get_position_directions(opts = {})
      data, _status_code, _headers = partner_api_get_position_directions_with_http_info(opts)
      data
    end

    # Возвращает справочник Должности-Направления
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PositionDirection>, Fixnum, Hash)>] Array<PositionDirection> data, response status code and response headers
    def partner_api_get_position_directions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_get_position_directions ...'
      end
      # resource path
      local_var_path = '/partner/position/directions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PositionDirection>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_get_position_directions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает все справочники должности менеджера партнера
    # @param [Hash] opts the optional parameters
    # @return [PositionParts]
    def partner_api_get_position_parts(opts = {})
      data, _status_code, _headers = partner_api_get_position_parts_with_http_info(opts)
      data
    end

    # Возвращает все справочники должности менеджера партнера
    # @param [Hash] opts the optional parameters
    # @return [Array<(PositionParts, Fixnum, Hash)>] PositionParts data, response status code and response headers
    def partner_api_get_position_parts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_get_position_parts ...'
      end
      # resource path
      local_var_path = '/partner/position/positionparts'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PositionParts')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_get_position_parts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает справочник Должности-Типы продуктов
    # @param [Hash] opts the optional parameters
    # @return [Array<PositionProductType>]
    def partner_api_get_position_product_types(opts = {})
      data, _status_code, _headers = partner_api_get_position_product_types_with_http_info(opts)
      data
    end

    # Возвращает справочник Должности-Типы продуктов
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PositionProductType>, Fixnum, Hash)>] Array<PositionProductType> data, response status code and response headers
    def partner_api_get_position_product_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_get_position_product_types ...'
      end
      # resource path
      local_var_path = '/partner/position/producttypes'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PositionProductType>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_get_position_product_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает доступные должности менеджеров партнера
    # @param [Hash] opts the optional parameters
    # @return [Array<PositionTitle>]
    def partner_api_get_positions(opts = {})
      data, _status_code, _headers = partner_api_get_positions_with_http_info(opts)
      data
    end

    # Возвращает доступные должности менеджеров партнера
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PositionTitle>, Fixnum, Hash)>] Array<PositionTitle> data, response status code and response headers
    def partner_api_get_positions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_get_positions ...'
      end
      # resource path
      local_var_path = '/partner/positions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PositionTitle>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_get_positions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает доступные роли пользователей партнера
    # @param [Hash] opts the optional parameters
    # @return [Array<PartnerUserRole>]
    def partner_api_get_roles(opts = {})
      data, _status_code, _headers = partner_api_get_roles_with_http_info(opts)
      data
    end

    # Возвращает доступные роли пользователей партнера
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PartnerUserRole>, Fixnum, Hash)>] Array<PartnerUserRole> data, response status code and response headers
    def partner_api_get_roles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_get_roles ...'
      end
      # resource path
      local_var_path = '/partner/roles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PartnerUserRole>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_get_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает список подразделений по filialId
    # @param filial_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<UnitsFilial>]
    def partner_api_get_unit_by_filials(filial_id, opts = {})
      data, _status_code, _headers = partner_api_get_unit_by_filials_with_http_info(filial_id, opts)
      data
    end

    # Возвращает список подразделений по filialId
    # @param filial_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UnitsFilial>, Fixnum, Hash)>] Array<UnitsFilial> data, response status code and response headers
    def partner_api_get_unit_by_filials_with_http_info(filial_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_get_unit_by_filials ...'
      end
      # verify the required parameter 'filial_id' is set
      if @api_client.config.client_side_validation && filial_id.nil?
        fail ArgumentError, "Missing the required parameter 'filial_id' when calling PartnerApiApi.partner_api_get_unit_by_filials"
      end
      # resource path
      local_var_path = '/partner/unitbyfilial'

      # query parameters
      query_params = {}
      query_params[:'filialId'] = filial_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<UnitsFilial>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_get_unit_by_filials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Регистрирует менеджера в бэк-офисе
    # 
    # @param create_user_model 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def partner_api_register_manager(create_user_model, opts = {})
      data, _status_code, _headers = partner_api_register_manager_with_http_info(create_user_model, opts)
      data
    end

    # Регистрирует менеджера в бэк-офисе
    # 
    # @param create_user_model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def partner_api_register_manager_with_http_info(create_user_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_register_manager ...'
      end
      # verify the required parameter 'create_user_model' is set
      if @api_client.config.client_side_validation && create_user_model.nil?
        fail ArgumentError, "Missing the required parameter 'create_user_model' when calling PartnerApiApi.partner_api_register_manager"
      end
      # resource path
      local_var_path = '/partner/manager'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_user_model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_register_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Обновляет данные менеджера
    # @param update_user_model 
    # @param [Hash] opts the optional parameters
    # @return [PartnerUser]
    def partner_api_update_manager(update_user_model, opts = {})
      data, _status_code, _headers = partner_api_update_manager_with_http_info(update_user_model, opts)
      data
    end

    # Обновляет данные менеджера
    # @param update_user_model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PartnerUser, Fixnum, Hash)>] PartnerUser data, response status code and response headers
    def partner_api_update_manager_with_http_info(update_user_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartnerApiApi.partner_api_update_manager ...'
      end
      # verify the required parameter 'update_user_model' is set
      if @api_client.config.client_side_validation && update_user_model.nil?
        fail ArgumentError, "Missing the required parameter 'update_user_model' when calling PartnerApiApi.partner_api_update_manager"
      end
      # resource path
      local_var_path = '/partner/manager/update'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_user_model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PartnerUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartnerApiApi#partner_api_update_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
