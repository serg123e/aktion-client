=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'uri'

module AktionClient
  class ServiceDeskApiApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Добавляет комментарий к обращению
    # @param ticket_comment_model 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def service_desk_api_add_ticket_comment(ticket_comment_model, opts = {})
      data, _status_code, _headers = service_desk_api_add_ticket_comment_with_http_info(ticket_comment_model, opts)
      data
    end

    # Добавляет комментарий к обращению
    # @param ticket_comment_model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def service_desk_api_add_ticket_comment_with_http_info(ticket_comment_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_add_ticket_comment ...'
      end
      # verify the required parameter 'ticket_comment_model' is set
      if @api_client.config.client_side_validation && ticket_comment_model.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_comment_model' when calling ServiceDeskApiApi.service_desk_api_add_ticket_comment"
      end
      # resource path
      local_var_path = '/sd/ticket/comment'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ticket_comment_model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_add_ticket_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Закрывает обращение
    # @param close_ticket_model 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def service_desk_api_close_ticket(close_ticket_model, opts = {})
      service_desk_api_close_ticket_with_http_info(close_ticket_model, opts)
      nil
    end

    # Закрывает обращение
    # @param close_ticket_model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def service_desk_api_close_ticket_with_http_info(close_ticket_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_close_ticket ...'
      end
      # verify the required parameter 'close_ticket_model' is set
      if @api_client.config.client_side_validation && close_ticket_model.nil?
        fail ArgumentError, "Missing the required parameter 'close_ticket_model' when calling ServiceDeskApiApi.service_desk_api_close_ticket"
      end
      # resource path
      local_var_path = '/sd/ticket/close'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(close_ticket_model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_close_ticket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Создает обращение
    # @param ticket_model 
    # @param [Hash] opts the optional parameters
    # @return [Ticket]
    def service_desk_api_create_ticket(ticket_model, opts = {})
      data, _status_code, _headers = service_desk_api_create_ticket_with_http_info(ticket_model, opts)
      data
    end

    # Создает обращение
    # @param ticket_model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Ticket, Fixnum, Hash)>] Ticket data, response status code and response headers
    def service_desk_api_create_ticket_with_http_info(ticket_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_create_ticket ...'
      end
      # verify the required parameter 'ticket_model' is set
      if @api_client.config.client_side_validation && ticket_model.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_model' when calling ServiceDeskApiApi.service_desk_api_create_ticket"
      end
      # resource path
      local_var_path = '/sd/ticket'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ticket_model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ticket')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_create_ticket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def service_desk_api_get_close_incidents_by_partner_id(id, opts = {})
      data, _status_code, _headers = service_desk_api_get_close_incidents_by_partner_id_with_http_info(id, opts)
      data
    end

    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def service_desk_api_get_close_incidents_by_partner_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_close_incidents_by_partner_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ServiceDeskApiApi.service_desk_api_get_close_incidents_by_partner_id"
      end
      # resource path
      local_var_path = '/sd/ticket/GetCloseIncidentsByPartnerId'

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_close_incidents_by_partner_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def service_desk_api_get_file(name, opts = {})
      data, _status_code, _headers = service_desk_api_get_file_with_http_info(name, opts)
      data
    end

    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def service_desk_api_get_file_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_file ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ServiceDeskApiApi.service_desk_api_get_file"
      end
      # resource path
      local_var_path = '/sd/attachment'

      # query parameters
      query_params = {}
      query_params[:'name'] = name

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param name 
    # @param type 
    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def service_desk_api_get_file_incident_async(name, type, path, opts = {})
      data, _status_code, _headers = service_desk_api_get_file_incident_async_with_http_info(name, type, path, opts)
      data
    end

    # @param name 
    # @param type 
    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def service_desk_api_get_file_incident_async_with_http_info(name, type, path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_file_incident_async ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ServiceDeskApiApi.service_desk_api_get_file_incident_async"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ServiceDeskApiApi.service_desk_api_get_file_incident_async"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ServiceDeskApiApi.service_desk_api_get_file_incident_async"
      end
      # resource path
      local_var_path = '/sd/attachment_incident'

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'type'] = type
      query_params[:'path'] = path

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_file_incident_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param service_id 
    # @param type_id 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def service_desk_api_get_reason_by_type(service_id, type_id, opts = {})
      data, _status_code, _headers = service_desk_api_get_reason_by_type_with_http_info(service_id, type_id, opts)
      data
    end

    # @param service_id 
    # @param type_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def service_desk_api_get_reason_by_type_with_http_info(service_id, type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_reason_by_type ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServiceDeskApiApi.service_desk_api_get_reason_by_type"
      end
      # verify the required parameter 'type_id' is set
      if @api_client.config.client_side_validation && type_id.nil?
        fail ArgumentError, "Missing the required parameter 'type_id' when calling ServiceDeskApiApi.service_desk_api_get_reason_by_type"
      end
      # resource path
      local_var_path = '/sd/reason-by-type'

      # query parameters
      query_params = {}
      query_params[:'serviceId'] = service_id
      query_params[:'typeId'] = type_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_reason_by_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :service_id 
    # @return [Array<Reason>]
    def service_desk_api_get_reasons(opts = {})
      data, _status_code, _headers = service_desk_api_get_reasons_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :service_id 
    # @return [Array<(Array<Reason>, Fixnum, Hash)>] Array<Reason> data, response status code and response headers
    def service_desk_api_get_reasons_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_reasons ...'
      end
      # resource path
      local_var_path = '/sd/reasons'

      # query parameters
      query_params = {}
      query_params[:'serviceId'] = opts[:'service_id'] if !opts[:'service_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Reason>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_reasons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает  возможные причины смены статуса по типу обращения
    # @param ticket_type_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<TicketReason>]
    def service_desk_api_get_reasons_by_ticket_type_id(ticket_type_id, opts = {})
      data, _status_code, _headers = service_desk_api_get_reasons_by_ticket_type_id_with_http_info(ticket_type_id, opts)
      data
    end

    # Получает  возможные причины смены статуса по типу обращения
    # @param ticket_type_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TicketReason>, Fixnum, Hash)>] Array<TicketReason> data, response status code and response headers
    def service_desk_api_get_reasons_by_ticket_type_id_with_http_info(ticket_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_reasons_by_ticket_type_id ...'
      end
      # verify the required parameter 'ticket_type_id' is set
      if @api_client.config.client_side_validation && ticket_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_type_id' when calling ServiceDeskApiApi.service_desk_api_get_reasons_by_ticket_type_id"
      end
      # resource path
      local_var_path = '/sd/ticket/reasons/{ticketTypeId}'.sub('{' + 'ticketTypeId' + '}', ticket_type_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TicketReason>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_reasons_by_ticket_type_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает все возможные сервисы обращений
    # @param [Hash] opts the optional parameters
    # @return [Array<TicketService>]
    def service_desk_api_get_services(opts = {})
      data, _status_code, _headers = service_desk_api_get_services_with_http_info(opts)
      data
    end

    # Получает все возможные сервисы обращений
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TicketService>, Fixnum, Hash)>] Array<TicketService> data, response status code and response headers
    def service_desk_api_get_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_services ...'
      end
      # resource path
      local_var_path = '/sd/services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TicketService>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает все возможные источники обращений
    # @param [Hash] opts the optional parameters
    # @return [Array<TicketSource>]
    def service_desk_api_get_sources(opts = {})
      data, _status_code, _headers = service_desk_api_get_sources_with_http_info(opts)
      data
    end

    # Получает все возможные источники обращений
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TicketSource>, Fixnum, Hash)>] Array<TicketSource> data, response status code and response headers
    def service_desk_api_get_sources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_sources ...'
      end
      # resource path
      local_var_path = '/sd/sources'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TicketSource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param service_id 
    # @param reason_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<SubgroupOfProduct>]
    def service_desk_api_get_subgroups_of_products(service_id, reason_id, opts = {})
      data, _status_code, _headers = service_desk_api_get_subgroups_of_products_with_http_info(service_id, reason_id, opts)
      data
    end

    # @param service_id 
    # @param reason_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SubgroupOfProduct>, Fixnum, Hash)>] Array<SubgroupOfProduct> data, response status code and response headers
    def service_desk_api_get_subgroups_of_products_with_http_info(service_id, reason_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_subgroups_of_products ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServiceDeskApiApi.service_desk_api_get_subgroups_of_products"
      end
      # verify the required parameter 'reason_id' is set
      if @api_client.config.client_side_validation && reason_id.nil?
        fail ArgumentError, "Missing the required parameter 'reason_id' when calling ServiceDeskApiApi.service_desk_api_get_subgroups_of_products"
      end
      # resource path
      local_var_path = '/sd/subgroups-of-products'

      # query parameters
      query_params = {}
      query_params[:'serviceId'] = service_id
      query_params[:'reasonId'] = reason_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SubgroupOfProduct>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_subgroups_of_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает обращение по Id
    # @param ticket_id 
    # @param [Hash] opts the optional parameters
    # @return [Ticket]
    def service_desk_api_get_ticket_by_id(ticket_id, opts = {})
      data, _status_code, _headers = service_desk_api_get_ticket_by_id_with_http_info(ticket_id, opts)
      data
    end

    # Получает обращение по Id
    # @param ticket_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Ticket, Fixnum, Hash)>] Ticket data, response status code and response headers
    def service_desk_api_get_ticket_by_id_with_http_info(ticket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_ticket_by_id ...'
      end
      # verify the required parameter 'ticket_id' is set
      if @api_client.config.client_side_validation && ticket_id.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_id' when calling ServiceDeskApiApi.service_desk_api_get_ticket_by_id"
      end
      # resource path
      local_var_path = '/sd/tickets/{ticketId}'.sub('{' + 'ticketId' + '}', ticket_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ticket')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_ticket_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает комментарии по Id обращения
    # @param ticket_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<TicketComment>]
    def service_desk_api_get_ticket_comments(ticket_id, opts = {})
      data, _status_code, _headers = service_desk_api_get_ticket_comments_with_http_info(ticket_id, opts)
      data
    end

    # Получает комментарии по Id обращения
    # @param ticket_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TicketComment>, Fixnum, Hash)>] Array<TicketComment> data, response status code and response headers
    def service_desk_api_get_ticket_comments_with_http_info(ticket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_ticket_comments ...'
      end
      # verify the required parameter 'ticket_id' is set
      if @api_client.config.client_side_validation && ticket_id.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_id' when calling ServiceDeskApiApi.service_desk_api_get_ticket_comments"
      end
      # resource path
      local_var_path = '/sd/ticketComments/{ticketId}'.sub('{' + 'ticketId' + '}', ticket_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TicketComment>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_ticket_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param ticket_id 
    # @param [Hash] opts the optional parameters
    # @return [Ticket]
    def service_desk_api_get_ticket_time_by_id(ticket_id, opts = {})
      data, _status_code, _headers = service_desk_api_get_ticket_time_by_id_with_http_info(ticket_id, opts)
      data
    end

    # @param ticket_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Ticket, Fixnum, Hash)>] Ticket data, response status code and response headers
    def service_desk_api_get_ticket_time_by_id_with_http_info(ticket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_ticket_time_by_id ...'
      end
      # verify the required parameter 'ticket_id' is set
      if @api_client.config.client_side_validation && ticket_id.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_id' when calling ServiceDeskApiApi.service_desk_api_get_ticket_time_by_id"
      end
      # resource path
      local_var_path = '/sd/tickets-time/{ticketId}'.sub('{' + 'ticketId' + '}', ticket_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ticket')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_ticket_time_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает дополнительные поля для типа обращения
    # @param type_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<TicketField>]
    def service_desk_api_get_ticket_type_fields(type_id, opts = {})
      data, _status_code, _headers = service_desk_api_get_ticket_type_fields_with_http_info(type_id, opts)
      data
    end

    # Возвращает дополнительные поля для типа обращения
    # @param type_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TicketField>, Fixnum, Hash)>] Array<TicketField> data, response status code and response headers
    def service_desk_api_get_ticket_type_fields_with_http_info(type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_ticket_type_fields ...'
      end
      # verify the required parameter 'type_id' is set
      if @api_client.config.client_side_validation && type_id.nil?
        fail ArgumentError, "Missing the required parameter 'type_id' when calling ServiceDeskApiApi.service_desk_api_get_ticket_type_fields"
      end
      # resource path
      local_var_path = '/sd/types/{typeId}/fields'.sub('{' + 'typeId' + '}', type_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TicketField>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_ticket_type_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает типы обращений по сервису
    # @param [Hash] opts the optional parameters
    # @option opts [String] :service_id 
    # @return [Array<TicketType>]
    def service_desk_api_get_ticket_types(opts = {})
      data, _status_code, _headers = service_desk_api_get_ticket_types_with_http_info(opts)
      data
    end

    # Получает типы обращений по сервису
    # @param [Hash] opts the optional parameters
    # @option opts [String] :service_id 
    # @return [Array<(Array<TicketType>, Fixnum, Hash)>] Array<TicketType> data, response status code and response headers
    def service_desk_api_get_ticket_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_ticket_types ...'
      end
      # resource path
      local_var_path = '/sd/types'

      # query parameters
      query_params = {}
      query_params[:'serviceId'] = opts[:'service_id'] if !opts[:'service_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TicketType>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_ticket_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает обращения
    # @param partner_ids 
    # @param service_ids 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :crm_user_id 
    # @option opts [String] :user_email 
    # @option opts [DateTime] :from 
    # @option opts [DateTime] :to 
    # @return [Array<Ticket>]
    def service_desk_api_get_tickets(partner_ids, service_ids, opts = {})
      data, _status_code, _headers = service_desk_api_get_tickets_with_http_info(partner_ids, service_ids, opts)
      data
    end

    # Получает обращения
    # @param partner_ids 
    # @param service_ids 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :crm_user_id 
    # @option opts [String] :user_email 
    # @option opts [DateTime] :from 
    # @option opts [DateTime] :to 
    # @return [Array<(Array<Ticket>, Fixnum, Hash)>] Array<Ticket> data, response status code and response headers
    def service_desk_api_get_tickets_with_http_info(partner_ids, service_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_tickets ...'
      end
      # verify the required parameter 'partner_ids' is set
      if @api_client.config.client_side_validation && partner_ids.nil?
        fail ArgumentError, "Missing the required parameter 'partner_ids' when calling ServiceDeskApiApi.service_desk_api_get_tickets"
      end
      # verify the required parameter 'service_ids' is set
      if @api_client.config.client_side_validation && service_ids.nil?
        fail ArgumentError, "Missing the required parameter 'service_ids' when calling ServiceDeskApiApi.service_desk_api_get_tickets"
      end
      # resource path
      local_var_path = '/sd/tickets'

      # query parameters
      query_params = {}
      query_params[:'partnerIds'] = partner_ids
      query_params[:'serviceIds'] = service_ids
      query_params[:'crmUserId'] = opts[:'crm_user_id'] if !opts[:'crm_user_id'].nil?
      query_params[:'userEmail'] = opts[:'user_email'] if !opts[:'user_email'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Ticket>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_tickets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # получаем заявки по наблюдателю
    # @param partner_ids 
    # @param system_user_id 
    # @param service_ids 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_email 
    # @option opts [DateTime] :from_date 
    # @option opts [DateTime] :to_date 
    # @return [Array<GetTicketsByWatcherResult>]
    def service_desk_api_get_tickets_by_watcher(partner_ids, system_user_id, service_ids, opts = {})
      data, _status_code, _headers = service_desk_api_get_tickets_by_watcher_with_http_info(partner_ids, system_user_id, service_ids, opts)
      data
    end

    # получаем заявки по наблюдателю
    # @param partner_ids 
    # @param system_user_id 
    # @param service_ids 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_email 
    # @option opts [DateTime] :from_date 
    # @option opts [DateTime] :to_date 
    # @return [Array<(Array<GetTicketsByWatcherResult>, Fixnum, Hash)>] Array<GetTicketsByWatcherResult> data, response status code and response headers
    def service_desk_api_get_tickets_by_watcher_with_http_info(partner_ids, system_user_id, service_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_tickets_by_watcher ...'
      end
      # verify the required parameter 'partner_ids' is set
      if @api_client.config.client_side_validation && partner_ids.nil?
        fail ArgumentError, "Missing the required parameter 'partner_ids' when calling ServiceDeskApiApi.service_desk_api_get_tickets_by_watcher"
      end
      # verify the required parameter 'system_user_id' is set
      if @api_client.config.client_side_validation && system_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'system_user_id' when calling ServiceDeskApiApi.service_desk_api_get_tickets_by_watcher"
      end
      # verify the required parameter 'service_ids' is set
      if @api_client.config.client_side_validation && service_ids.nil?
        fail ArgumentError, "Missing the required parameter 'service_ids' when calling ServiceDeskApiApi.service_desk_api_get_tickets_by_watcher"
      end
      # resource path
      local_var_path = '/sd/ticketsByWatcher'

      # query parameters
      query_params = {}
      query_params[:'partnerIds'] = partner_ids
      query_params[:'systemUserId'] = system_user_id
      query_params[:'serviceIds'] = service_ids
      query_params[:'userEmail'] = opts[:'user_email'] if !opts[:'user_email'].nil?
      query_params[:'fromDate'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'toDate'] = opts[:'to_date'] if !opts[:'to_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<GetTicketsByWatcherResult>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_tickets_by_watcher\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param service_id 
    # @param reason_id 
    # @param product_id 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def service_desk_api_get_type_by_reason(service_id, reason_id, product_id, opts = {})
      data, _status_code, _headers = service_desk_api_get_type_by_reason_with_http_info(service_id, reason_id, product_id, opts)
      data
    end

    # @param service_id 
    # @param reason_id 
    # @param product_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def service_desk_api_get_type_by_reason_with_http_info(service_id, reason_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_get_type_by_reason ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServiceDeskApiApi.service_desk_api_get_type_by_reason"
      end
      # verify the required parameter 'reason_id' is set
      if @api_client.config.client_side_validation && reason_id.nil?
        fail ArgumentError, "Missing the required parameter 'reason_id' when calling ServiceDeskApiApi.service_desk_api_get_type_by_reason"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ServiceDeskApiApi.service_desk_api_get_type_by_reason"
      end
      # resource path
      local_var_path = '/sd/type-by-reason'

      # query parameters
      query_params = {}
      query_params[:'serviceId'] = service_id
      query_params[:'reasonId'] = reason_id
      query_params[:'productId'] = product_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_get_type_by_reason\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Сохранить оценку решения обращения
    # @param save_rating_model 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def service_desk_api_save_rating(save_rating_model, opts = {})
      service_desk_api_save_rating_with_http_info(save_rating_model, opts)
      nil
    end

    # Сохранить оценку решения обращения
    # @param save_rating_model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def service_desk_api_save_rating_with_http_info(save_rating_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_save_rating ...'
      end
      # verify the required parameter 'save_rating_model' is set
      if @api_client.config.client_side_validation && save_rating_model.nil?
        fail ArgumentError, "Missing the required parameter 'save_rating_model' when calling ServiceDeskApiApi.service_desk_api_save_rating"
      end
      # resource path
      local_var_path = '/sd/ticket/rating'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(save_rating_model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_save_rating\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Сохраняет контактное лицо на обращении
    # @param ticket_id 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :contact_id 
    # @return [nil]
    def service_desk_api_save_ticket_contact(ticket_id, user_id, opts = {})
      service_desk_api_save_ticket_contact_with_http_info(ticket_id, user_id, opts)
      nil
    end

    # Сохраняет контактное лицо на обращении
    # @param ticket_id 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :contact_id 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def service_desk_api_save_ticket_contact_with_http_info(ticket_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_save_ticket_contact ...'
      end
      # verify the required parameter 'ticket_id' is set
      if @api_client.config.client_side_validation && ticket_id.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_id' when calling ServiceDeskApiApi.service_desk_api_save_ticket_contact"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ServiceDeskApiApi.service_desk_api_save_ticket_contact"
      end
      # resource path
      local_var_path = '/sd/ticket/contact'

      # query parameters
      query_params = {}
      query_params[:'ticketId'] = ticket_id
      query_params[:'userId'] = user_id
      query_params[:'contactId'] = opts[:'contact_id'] if !opts[:'contact_id'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_save_ticket_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Сохраняет клиента на обращении
    # @param ticket_id 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_id 
    # @return [nil]
    def service_desk_api_save_ticket_customer(ticket_id, user_id, opts = {})
      service_desk_api_save_ticket_customer_with_http_info(ticket_id, user_id, opts)
      nil
    end

    # Сохраняет клиента на обращении
    # @param ticket_id 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_id 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def service_desk_api_save_ticket_customer_with_http_info(ticket_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_save_ticket_customer ...'
      end
      # verify the required parameter 'ticket_id' is set
      if @api_client.config.client_side_validation && ticket_id.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_id' when calling ServiceDeskApiApi.service_desk_api_save_ticket_customer"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ServiceDeskApiApi.service_desk_api_save_ticket_customer"
      end
      # resource path
      local_var_path = '/sd/ticket/customer'

      # query parameters
      query_params = {}
      query_params[:'ticketId'] = ticket_id
      query_params[:'userId'] = user_id
      query_params[:'customerId'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_save_ticket_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Сохраняет список пользователей-наблюдателей обращения
    # @param watchers_model 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def service_desk_api_save_ticket_watchers(watchers_model, opts = {})
      service_desk_api_save_ticket_watchers_with_http_info(watchers_model, opts)
      nil
    end

    # Сохраняет список пользователей-наблюдателей обращения
    # @param watchers_model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def service_desk_api_save_ticket_watchers_with_http_info(watchers_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_save_ticket_watchers ...'
      end
      # verify the required parameter 'watchers_model' is set
      if @api_client.config.client_side_validation && watchers_model.nil?
        fail ArgumentError, "Missing the required parameter 'watchers_model' when calling ServiceDeskApiApi.service_desk_api_save_ticket_watchers"
      end
      # resource path
      local_var_path = '/sd/ticket/watchers'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(watchers_model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_save_ticket_watchers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param service_id 
    # @param search_term 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def service_desk_api_search_type_by_product(service_id, search_term, opts = {})
      data, _status_code, _headers = service_desk_api_search_type_by_product_with_http_info(service_id, search_term, opts)
      data
    end

    # @param service_id 
    # @param search_term 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def service_desk_api_search_type_by_product_with_http_info(service_id, search_term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDeskApiApi.service_desk_api_search_type_by_product ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServiceDeskApiApi.service_desk_api_search_type_by_product"
      end
      # verify the required parameter 'search_term' is set
      if @api_client.config.client_side_validation && search_term.nil?
        fail ArgumentError, "Missing the required parameter 'search_term' when calling ServiceDeskApiApi.service_desk_api_search_type_by_product"
      end
      # resource path
      local_var_path = '/sd/search-type-by-product'

      # query parameters
      query_params = {}
      query_params[:'serviceId'] = service_id
      query_params[:'searchTerm'] = search_term

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDeskApiApi#service_desk_api_search_type_by_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
