=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'uri'

module AktionClient
  class PhoneCallsApiApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param target 
    # @param user 
    # @param serverurl 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def phone_calls_api_call_mango(target, user, serverurl, opts = {})
      phone_calls_api_call_mango_with_http_info(target, user, serverurl, opts)
      nil
    end

    # @param target 
    # @param user 
    # @param serverurl 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def phone_calls_api_call_mango_with_http_info(target, user, serverurl, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_call_mango ...'
      end
      # verify the required parameter 'target' is set
      if @api_client.config.client_side_validation && target.nil?
        fail ArgumentError, "Missing the required parameter 'target' when calling PhoneCallsApiApi.phone_calls_api_call_mango"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling PhoneCallsApiApi.phone_calls_api_call_mango"
      end
      # verify the required parameter 'serverurl' is set
      if @api_client.config.client_side_validation && serverurl.nil?
        fail ArgumentError, "Missing the required parameter 'serverurl' when calling PhoneCallsApiApi.phone_calls_api_call_mango"
      end
      # resource path
      local_var_path = '/phonecalls/mango'

      # query parameters
      query_params = {}
      query_params[:'target'] = target
      query_params[:'user'] = user
      query_params[:'serverurl'] = serverurl

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_call_mango\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Смена ответственного на звонке
    # @param model 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def phone_calls_api_change_phone_call_owner(model, opts = {})
      phone_calls_api_change_phone_call_owner_with_http_info(model, opts)
      nil
    end

    # Смена ответственного на звонке
    # @param model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def phone_calls_api_change_phone_call_owner_with_http_info(model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_change_phone_call_owner ...'
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling PhoneCallsApiApi.phone_calls_api_change_phone_call_owner"
      end
      # resource path
      local_var_path = '/phonecalls/changeowner'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_change_phone_call_owner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Завершить звонок
    # @param model 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def phone_calls_api_complete_phone_call(model, opts = {})
      phone_calls_api_complete_phone_call_with_http_info(model, opts)
      nil
    end

    # Завершить звонок
    # @param model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def phone_calls_api_complete_phone_call_with_http_info(model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_complete_phone_call ...'
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling PhoneCallsApiApi.phone_calls_api_complete_phone_call"
      end
      # resource path
      local_var_path = '/phonecalls/completecall'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_complete_phone_call\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Назначение свободных клиентов менеджерам
    # Internal api method
    # @param model 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def phone_calls_api_create_phone_call_request_new(model, opts = {})
      data, _status_code, _headers = phone_calls_api_create_phone_call_request_new_with_http_info(model, opts)
      data
    end

    # Назначение свободных клиентов менеджерам
    # Internal api method
    # @param model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def phone_calls_api_create_phone_call_request_new_with_http_info(model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_create_phone_call_request_new ...'
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling PhoneCallsApiApi.phone_calls_api_create_phone_call_request_new"
      end
      # resource path
      local_var_path = '/phonecalls/freecustomers/createPhoneCallRequestNew'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_create_phone_call_request_new\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_id 
    # @param system_user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<DemoAccessLogResult>]
    def phone_calls_api_demo_access_log(customer_id, system_user_id, opts = {})
      data, _status_code, _headers = phone_calls_api_demo_access_log_with_http_info(customer_id, system_user_id, opts)
      data
    end

    # @param customer_id 
    # @param system_user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DemoAccessLogResult>, Fixnum, Hash)>] Array<DemoAccessLogResult> data, response status code and response headers
    def phone_calls_api_demo_access_log_with_http_info(customer_id, system_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_demo_access_log ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling PhoneCallsApiApi.phone_calls_api_demo_access_log"
      end
      # verify the required parameter 'system_user_id' is set
      if @api_client.config.client_side_validation && system_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'system_user_id' when calling PhoneCallsApiApi.phone_calls_api_demo_access_log"
      end
      # resource path
      local_var_path = '/phonecalls/outbox/activity/demoaccess'

      # query parameters
      query_params = {}
      query_params[:'customerId'] = customer_id
      query_params[:'systemUserId'] = system_user_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DemoAccessLogResult>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_demo_access_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param pc 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def phone_calls_api_end_phone_call(pc, opts = {})
      data, _status_code, _headers = phone_calls_api_end_phone_call_with_http_info(pc, opts)
      data
    end

    # @param pc 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def phone_calls_api_end_phone_call_with_http_info(pc, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_end_phone_call ...'
      end
      # verify the required parameter 'pc' is set
      if @api_client.config.client_side_validation && pc.nil?
        fail ArgumentError, "Missing the required parameter 'pc' when calling PhoneCallsApiApi.phone_calls_api_end_phone_call"
      end
      # resource path
      local_var_path = '/phonecalls/outbox/phonecall/end'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pc)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_end_phone_call\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает xlsx файл экспорта свободных клиентов.  Кол-во экспортированных клиентов фиксируется для проверки лимитов на экспорт.
    # @param customer_ids 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def phone_calls_api_export_free_customers(customer_ids, opts = {})
      data, _status_code, _headers = phone_calls_api_export_free_customers_with_http_info(customer_ids, opts)
      data
    end

    # Получает xlsx файл экспорта свободных клиентов.  Кол-во экспортированных клиентов фиксируется для проверки лимитов на экспорт.
    # @param customer_ids 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def phone_calls_api_export_free_customers_with_http_info(customer_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_export_free_customers ...'
      end
      # verify the required parameter 'customer_ids' is set
      if @api_client.config.client_side_validation && customer_ids.nil?
        fail ArgumentError, "Missing the required parameter 'customer_ids' when calling PhoneCallsApiApi.phone_calls_api_export_free_customers"
      end
      # resource path
      local_var_path = '/phonecalls/freecustomers/export'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(customer_ids)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_export_free_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param pin 
    # @param campaignid 
    # @param filter_nr 
    # @param main_product_id 
    # @param [Hash] opts the optional parameters
    # @return [MainProductInformation]
    def phone_calls_api_get_about_block(pin, campaignid, filter_nr, main_product_id, opts = {})
      data, _status_code, _headers = phone_calls_api_get_about_block_with_http_info(pin, campaignid, filter_nr, main_product_id, opts)
      data
    end

    # @param pin 
    # @param campaignid 
    # @param filter_nr 
    # @param main_product_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MainProductInformation, Fixnum, Hash)>] MainProductInformation data, response status code and response headers
    def phone_calls_api_get_about_block_with_http_info(pin, campaignid, filter_nr, main_product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_about_block ...'
      end
      # verify the required parameter 'pin' is set
      if @api_client.config.client_side_validation && pin.nil?
        fail ArgumentError, "Missing the required parameter 'pin' when calling PhoneCallsApiApi.phone_calls_api_get_about_block"
      end
      # verify the required parameter 'campaignid' is set
      if @api_client.config.client_side_validation && campaignid.nil?
        fail ArgumentError, "Missing the required parameter 'campaignid' when calling PhoneCallsApiApi.phone_calls_api_get_about_block"
      end
      # verify the required parameter 'filter_nr' is set
      if @api_client.config.client_side_validation && filter_nr.nil?
        fail ArgumentError, "Missing the required parameter 'filter_nr' when calling PhoneCallsApiApi.phone_calls_api_get_about_block"
      end
      # verify the required parameter 'main_product_id' is set
      if @api_client.config.client_side_validation && main_product_id.nil?
        fail ArgumentError, "Missing the required parameter 'main_product_id' when calling PhoneCallsApiApi.phone_calls_api_get_about_block"
      end
      # resource path
      local_var_path = '/phonecalls/outbox/about'

      # query parameters
      query_params = {}
      query_params[:'pin'] = pin
      query_params[:'campaignid'] = campaignid
      query_params[:'filterNr'] = filter_nr
      query_params[:'mainProductId'] = main_product_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MainProductInformation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_about_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получить результаты действий для кампании обзвона.
    # @param campaign_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<ActionStatus>]
    def phone_calls_api_get_action_statuses_by_campaign_id(campaign_id, opts = {})
      data, _status_code, _headers = phone_calls_api_get_action_statuses_by_campaign_id_with_http_info(campaign_id, opts)
      data
    end

    # Получить результаты действий для кампании обзвона.
    # @param campaign_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ActionStatus>, Fixnum, Hash)>] Array<ActionStatus> data, response status code and response headers
    def phone_calls_api_get_action_statuses_by_campaign_id_with_http_info(campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_action_statuses_by_campaign_id ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling PhoneCallsApiApi.phone_calls_api_get_action_statuses_by_campaign_id"
      end
      # resource path
      local_var_path = '/phonecalls/actionstatuses/{campaignId}'.sub('{' + 'campaignId' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ActionStatus>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_action_statuses_by_campaign_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_id 
    # @param campaignid 
    # @param system_user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<ActivityLogItemCore>]
    def phone_calls_api_get_activity(customer_id, campaignid, system_user_id, opts = {})
      data, _status_code, _headers = phone_calls_api_get_activity_with_http_info(customer_id, campaignid, system_user_id, opts)
      data
    end

    # @param customer_id 
    # @param campaignid 
    # @param system_user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ActivityLogItemCore>, Fixnum, Hash)>] Array<ActivityLogItemCore> data, response status code and response headers
    def phone_calls_api_get_activity_with_http_info(customer_id, campaignid, system_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_activity ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling PhoneCallsApiApi.phone_calls_api_get_activity"
      end
      # verify the required parameter 'campaignid' is set
      if @api_client.config.client_side_validation && campaignid.nil?
        fail ArgumentError, "Missing the required parameter 'campaignid' when calling PhoneCallsApiApi.phone_calls_api_get_activity"
      end
      # verify the required parameter 'system_user_id' is set
      if @api_client.config.client_side_validation && system_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'system_user_id' when calling PhoneCallsApiApi.phone_calls_api_get_activity"
      end
      # resource path
      local_var_path = '/phonecalls/outbox/activity'

      # query parameters
      query_params = {}
      query_params[:'customerId'] = customer_id
      query_params[:'campaignid'] = campaignid
      query_params[:'systemUserId'] = system_user_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ActivityLogItemCore>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_id 
    # @param customer_type 
    # @param campaignid 
    # @param [Hash] opts the optional parameters
    # @return [Array<ActivityLogItem>]
    def phone_calls_api_get_activity_logs(customer_id, customer_type, campaignid, opts = {})
      data, _status_code, _headers = phone_calls_api_get_activity_logs_with_http_info(customer_id, customer_type, campaignid, opts)
      data
    end

    # @param customer_id 
    # @param customer_type 
    # @param campaignid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ActivityLogItem>, Fixnum, Hash)>] Array<ActivityLogItem> data, response status code and response headers
    def phone_calls_api_get_activity_logs_with_http_info(customer_id, customer_type, campaignid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_activity_logs ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling PhoneCallsApiApi.phone_calls_api_get_activity_logs"
      end
      # verify the required parameter 'customer_type' is set
      if @api_client.config.client_side_validation && customer_type.nil?
        fail ArgumentError, "Missing the required parameter 'customer_type' when calling PhoneCallsApiApi.phone_calls_api_get_activity_logs"
      end
      # verify the required parameter 'campaignid' is set
      if @api_client.config.client_side_validation && campaignid.nil?
        fail ArgumentError, "Missing the required parameter 'campaignid' when calling PhoneCallsApiApi.phone_calls_api_get_activity_logs"
      end
      # resource path
      local_var_path = '/phonecalls/outbox/activity/logs'

      # query parameters
      query_params = {}
      query_params[:'customerId'] = customer_id
      query_params[:'customerType'] = customer_type
      query_params[:'campaignid'] = campaignid

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ActivityLogItem>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_activity_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [Array<PhoneCall>]
    def phone_calls_api_get_all_okp(opts = {})
      data, _status_code, _headers = phone_calls_api_get_all_okp_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PhoneCall>, Fixnum, Hash)>] Array<PhoneCall> data, response status code and response headers
    def phone_calls_api_get_all_okp_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_all_okp ...'
      end
      # resource path
      local_var_path = '/phonecalls/okp/all'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PhoneCall>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_all_okp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получить кампанию обзвона по Id.
    # @param campaign_id 
    # @param [Hash] opts the optional parameters
    # @return [Campaign]
    def phone_calls_api_get_campaign_by_id(campaign_id, opts = {})
      data, _status_code, _headers = phone_calls_api_get_campaign_by_id_with_http_info(campaign_id, opts)
      data
    end

    # Получить кампанию обзвона по Id.
    # @param campaign_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Campaign, Fixnum, Hash)>] Campaign data, response status code and response headers
    def phone_calls_api_get_campaign_by_id_with_http_info(campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_campaign_by_id ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling PhoneCallsApiApi.phone_calls_api_get_campaign_by_id"
      end
      # resource path
      local_var_path = '/phonecalls/campaign/{campaignId}'.sub('{' + 'campaignId' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Campaign')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_campaign_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получить кампании обзвона по подразделению текущего пользователя.
    # @param [Hash] opts the optional parameters
    # @return [Array<Campaign>]
    def phone_calls_api_get_campaigns(opts = {})
      data, _status_code, _headers = phone_calls_api_get_campaigns_with_http_info(opts)
      data
    end

    # Получить кампании обзвона по подразделению текущего пользователя.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Campaign>, Fixnum, Hash)>] Array<Campaign> data, response status code and response headers
    def phone_calls_api_get_campaigns_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_campaigns ...'
      end
      # resource path
      local_var_path = '/phonecalls/campaigns'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Campaign>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получить кампании обзвона по всей филиальной сети партнера
    # @param [Hash] opts the optional parameters
    # @return [Array<Campaign>]
    def phone_calls_api_get_campaigns_by_partners(opts = {})
      data, _status_code, _headers = phone_calls_api_get_campaigns_by_partners_with_http_info(opts)
      data
    end

    # Получить кампании обзвона по всей филиальной сети партнера
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Campaign>, Fixnum, Hash)>] Array<Campaign> data, response status code and response headers
    def phone_calls_api_get_campaigns_by_partners_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_campaigns_by_partners ...'
      end
      # resource path
      local_var_path = '/phonecalls/campaigns/all'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Campaign>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_campaigns_by_partners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_id 
    # @param customer_type 
    # @param parent_account_name 
    # @param job_title 
    # @param [Hash] opts the optional parameters
    # @return [Array<OutBoxPhoneCall>]
    def phone_calls_api_get_contact_block(customer_id, customer_type, parent_account_name, job_title, opts = {})
      data, _status_code, _headers = phone_calls_api_get_contact_block_with_http_info(customer_id, customer_type, parent_account_name, job_title, opts)
      data
    end

    # @param customer_id 
    # @param customer_type 
    # @param parent_account_name 
    # @param job_title 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OutBoxPhoneCall>, Fixnum, Hash)>] Array<OutBoxPhoneCall> data, response status code and response headers
    def phone_calls_api_get_contact_block_with_http_info(customer_id, customer_type, parent_account_name, job_title, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_contact_block ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling PhoneCallsApiApi.phone_calls_api_get_contact_block"
      end
      # verify the required parameter 'customer_type' is set
      if @api_client.config.client_side_validation && customer_type.nil?
        fail ArgumentError, "Missing the required parameter 'customer_type' when calling PhoneCallsApiApi.phone_calls_api_get_contact_block"
      end
      # verify the required parameter 'parent_account_name' is set
      if @api_client.config.client_side_validation && parent_account_name.nil?
        fail ArgumentError, "Missing the required parameter 'parent_account_name' when calling PhoneCallsApiApi.phone_calls_api_get_contact_block"
      end
      # verify the required parameter 'job_title' is set
      if @api_client.config.client_side_validation && job_title.nil?
        fail ArgumentError, "Missing the required parameter 'job_title' when calling PhoneCallsApiApi.phone_calls_api_get_contact_block"
      end
      # resource path
      local_var_path = '/phonecalls/outbox/contact'

      # query parameters
      query_params = {}
      query_params[:'customerId'] = customer_id
      query_params[:'customerType'] = customer_type
      query_params[:'parentAccountName'] = parent_account_name
      query_params[:'jobTitle'] = job_title

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<OutBoxPhoneCall>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_contact_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [FreeCustomersSearchFilters]
    def phone_calls_api_get_free_customers_search_filters(opts = {})
      data, _status_code, _headers = phone_calls_api_get_free_customers_search_filters_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(FreeCustomersSearchFilters, Fixnum, Hash)>] FreeCustomersSearchFilters data, response status code and response headers
    def phone_calls_api_get_free_customers_search_filters_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_free_customers_search_filters ...'
      end
      # resource path
      local_var_path = '/phonecalls/freecustomers/search/filters'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FreeCustomersSearchFilters')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_free_customers_search_filters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [Array<ItmCampaigns>]
    def phone_calls_api_get_itm_campaigns(opts = {})
      data, _status_code, _headers = phone_calls_api_get_itm_campaigns_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ItmCampaigns>, Fixnum, Hash)>] Array<ItmCampaigns> data, response status code and response headers
    def phone_calls_api_get_itm_campaigns_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_itm_campaigns ...'
      end
      # resource path
      local_var_path = '/phonecalls/outbox/campaign'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ItmCampaigns>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_itm_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param date 
    # @param sort_on 
    # @param sort_order 
    # @param page_num 
    # @param page_len 
    # @param search_text 
    # @param [Hash] opts the optional parameters
    # @return [PhoneCallPartial]
    def phone_calls_api_get_my_phone_calls(date, sort_on, sort_order, page_num, page_len, search_text, opts = {})
      data, _status_code, _headers = phone_calls_api_get_my_phone_calls_with_http_info(date, sort_on, sort_order, page_num, page_len, search_text, opts)
      data
    end

    # @param date 
    # @param sort_on 
    # @param sort_order 
    # @param page_num 
    # @param page_len 
    # @param search_text 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PhoneCallPartial, Fixnum, Hash)>] PhoneCallPartial data, response status code and response headers
    def phone_calls_api_get_my_phone_calls_with_http_info(date, sort_on, sort_order, page_num, page_len, search_text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_my_phone_calls ...'
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling PhoneCallsApiApi.phone_calls_api_get_my_phone_calls"
      end
      # verify the required parameter 'sort_on' is set
      if @api_client.config.client_side_validation && sort_on.nil?
        fail ArgumentError, "Missing the required parameter 'sort_on' when calling PhoneCallsApiApi.phone_calls_api_get_my_phone_calls"
      end
      # verify the required parameter 'sort_order' is set
      if @api_client.config.client_side_validation && sort_order.nil?
        fail ArgumentError, "Missing the required parameter 'sort_order' when calling PhoneCallsApiApi.phone_calls_api_get_my_phone_calls"
      end
      # verify the required parameter 'page_num' is set
      if @api_client.config.client_side_validation && page_num.nil?
        fail ArgumentError, "Missing the required parameter 'page_num' when calling PhoneCallsApiApi.phone_calls_api_get_my_phone_calls"
      end
      # verify the required parameter 'page_len' is set
      if @api_client.config.client_side_validation && page_len.nil?
        fail ArgumentError, "Missing the required parameter 'page_len' when calling PhoneCallsApiApi.phone_calls_api_get_my_phone_calls"
      end
      # verify the required parameter 'search_text' is set
      if @api_client.config.client_side_validation && search_text.nil?
        fail ArgumentError, "Missing the required parameter 'search_text' when calling PhoneCallsApiApi.phone_calls_api_get_my_phone_calls"
      end
      # resource path
      local_var_path = '/phonecalls/outbox/list'

      # query parameters
      query_params = {}
      query_params[:'date'] = date
      query_params[:'sortOn'] = sort_on
      query_params[:'sortOrder'] = sort_order
      query_params[:'pageNum'] = page_num
      query_params[:'pageLen'] = page_len
      query_params[:'searchText'] = search_text

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PhoneCallPartial')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_my_phone_calls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param date 
    # @param date_end 
    # @param sort_on 
    # @param sort_order 
    # @param page_num 
    # @param page_len 
    # @param search_text 
    # @param [Hash] opts the optional parameters
    # @return [PhoneCallPartial]
    def phone_calls_api_get_my_phone_calls_by_date(date, date_end, sort_on, sort_order, page_num, page_len, search_text, opts = {})
      data, _status_code, _headers = phone_calls_api_get_my_phone_calls_by_date_with_http_info(date, date_end, sort_on, sort_order, page_num, page_len, search_text, opts)
      data
    end

    # @param date 
    # @param date_end 
    # @param sort_on 
    # @param sort_order 
    # @param page_num 
    # @param page_len 
    # @param search_text 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PhoneCallPartial, Fixnum, Hash)>] PhoneCallPartial data, response status code and response headers
    def phone_calls_api_get_my_phone_calls_by_date_with_http_info(date, date_end, sort_on, sort_order, page_num, page_len, search_text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_my_phone_calls_by_date ...'
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling PhoneCallsApiApi.phone_calls_api_get_my_phone_calls_by_date"
      end
      # verify the required parameter 'date_end' is set
      if @api_client.config.client_side_validation && date_end.nil?
        fail ArgumentError, "Missing the required parameter 'date_end' when calling PhoneCallsApiApi.phone_calls_api_get_my_phone_calls_by_date"
      end
      # verify the required parameter 'sort_on' is set
      if @api_client.config.client_side_validation && sort_on.nil?
        fail ArgumentError, "Missing the required parameter 'sort_on' when calling PhoneCallsApiApi.phone_calls_api_get_my_phone_calls_by_date"
      end
      # verify the required parameter 'sort_order' is set
      if @api_client.config.client_side_validation && sort_order.nil?
        fail ArgumentError, "Missing the required parameter 'sort_order' when calling PhoneCallsApiApi.phone_calls_api_get_my_phone_calls_by_date"
      end
      # verify the required parameter 'page_num' is set
      if @api_client.config.client_side_validation && page_num.nil?
        fail ArgumentError, "Missing the required parameter 'page_num' when calling PhoneCallsApiApi.phone_calls_api_get_my_phone_calls_by_date"
      end
      # verify the required parameter 'page_len' is set
      if @api_client.config.client_side_validation && page_len.nil?
        fail ArgumentError, "Missing the required parameter 'page_len' when calling PhoneCallsApiApi.phone_calls_api_get_my_phone_calls_by_date"
      end
      # verify the required parameter 'search_text' is set
      if @api_client.config.client_side_validation && search_text.nil?
        fail ArgumentError, "Missing the required parameter 'search_text' when calling PhoneCallsApiApi.phone_calls_api_get_my_phone_calls_by_date"
      end
      # resource path
      local_var_path = '/phonecalls/outbox/list/bydate'

      # query parameters
      query_params = {}
      query_params[:'date'] = date
      query_params[:'dateEnd'] = date_end
      query_params[:'sortOn'] = sort_on
      query_params[:'sortOrder'] = sort_order
      query_params[:'pageNum'] = page_num
      query_params[:'pageLen'] = page_len
      query_params[:'searchText'] = search_text

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PhoneCallPartial')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_my_phone_calls_by_date\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param campaign_id 
    # @param activity_id 
    # @param [Hash] opts the optional parameters
    # @return [BOOLEAN]
    def phone_calls_api_get_not_dialed_calls_count(campaign_id, activity_id, opts = {})
      data, _status_code, _headers = phone_calls_api_get_not_dialed_calls_count_with_http_info(campaign_id, activity_id, opts)
      data
    end

    # @param campaign_id 
    # @param activity_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BOOLEAN, Fixnum, Hash)>] BOOLEAN data, response status code and response headers
    def phone_calls_api_get_not_dialed_calls_count_with_http_info(campaign_id, activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_not_dialed_calls_count ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling PhoneCallsApiApi.phone_calls_api_get_not_dialed_calls_count"
      end
      # verify the required parameter 'activity_id' is set
      if @api_client.config.client_side_validation && activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'activity_id' when calling PhoneCallsApiApi.phone_calls_api_get_not_dialed_calls_count"
      end
      # resource path
      local_var_path = '/phonecalls/outbox/notdialedcallscount'

      # query parameters
      query_params = {}
      query_params[:'campaignId'] = campaign_id
      query_params[:'activityId'] = activity_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BOOLEAN')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_not_dialed_calls_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [Array<OkpCampaign>]
    def phone_calls_api_get_okp_campaigns(opts = {})
      data, _status_code, _headers = phone_calls_api_get_okp_campaigns_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OkpCampaign>, Fixnum, Hash)>] Array<OkpCampaign> data, response status code and response headers
    def phone_calls_api_get_okp_campaigns_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_okp_campaigns ...'
      end
      # resource path
      local_var_path = '/phonecalls/okp/campaigns'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<OkpCampaign>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_okp_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [OperatorStat]
    def phone_calls_api_get_operator_stat(opts = {})
      data, _status_code, _headers = phone_calls_api_get_operator_stat_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(OperatorStat, Fixnum, Hash)>] OperatorStat data, response status code and response headers
    def phone_calls_api_get_operator_stat_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_operator_stat ...'
      end
      # resource path
      local_var_path = '/phonecalls/outbox/operatorstat'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OperatorStat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_operator_stat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param date 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order 
    # @option opts [String] :desc 
    # @option opts [String] :category 
    # @return [OutBox]
    def phone_calls_api_get_out_box(date, opts = {})
      data, _status_code, _headers = phone_calls_api_get_out_box_with_http_info(date, opts)
      data
    end

    # @param date 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order 
    # @option opts [String] :desc 
    # @option opts [String] :category 
    # @return [Array<(OutBox, Fixnum, Hash)>] OutBox data, response status code and response headers
    def phone_calls_api_get_out_box_with_http_info(date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_out_box ...'
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling PhoneCallsApiApi.phone_calls_api_get_out_box"
      end
      # resource path
      local_var_path = '/phonecalls/outbox'

      # query parameters
      query_params = {}
      query_params[:'date'] = date
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'desc'] = opts[:'desc'] if !opts[:'desc'].nil?
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OutBox')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_out_box\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получить звонок  по Id
    # @param call_id 
    # @param [Hash] opts the optional parameters
    # @return [PhoneCall]
    def phone_calls_api_get_phone_call_by_id(call_id, opts = {})
      data, _status_code, _headers = phone_calls_api_get_phone_call_by_id_with_http_info(call_id, opts)
      data
    end

    # Получить звонок  по Id
    # @param call_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PhoneCall, Fixnum, Hash)>] PhoneCall data, response status code and response headers
    def phone_calls_api_get_phone_call_by_id_with_http_info(call_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_phone_call_by_id ...'
      end
      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling PhoneCallsApiApi.phone_calls_api_get_phone_call_by_id"
      end
      # resource path
      local_var_path = '/phonecalls/byid/{callId}'.sub('{' + 'callId' + '}', call_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PhoneCall')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_phone_call_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Карточка звонка. Есть activityId null - берется из очереди  если activityId !null - берется звонок по id
    # @param campaign_id 
    # @param pin 
    # @param account_id 
    # @param activity_id id звонка
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :is_multi_campaign мультикампании
    # @return [OutBox]
    def phone_calls_api_get_phone_call_queue_by_pin(campaign_id, pin, account_id, activity_id, opts = {})
      data, _status_code, _headers = phone_calls_api_get_phone_call_queue_by_pin_with_http_info(campaign_id, pin, account_id, activity_id, opts)
      data
    end

    # Карточка звонка. Есть activityId null - берется из очереди  если activityId !null - берется звонок по id
    # @param campaign_id 
    # @param pin 
    # @param account_id 
    # @param activity_id id звонка
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :is_multi_campaign мультикампании
    # @return [Array<(OutBox, Fixnum, Hash)>] OutBox data, response status code and response headers
    def phone_calls_api_get_phone_call_queue_by_pin_with_http_info(campaign_id, pin, account_id, activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_phone_call_queue_by_pin ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling PhoneCallsApiApi.phone_calls_api_get_phone_call_queue_by_pin"
      end
      # verify the required parameter 'pin' is set
      if @api_client.config.client_side_validation && pin.nil?
        fail ArgumentError, "Missing the required parameter 'pin' when calling PhoneCallsApiApi.phone_calls_api_get_phone_call_queue_by_pin"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PhoneCallsApiApi.phone_calls_api_get_phone_call_queue_by_pin"
      end
      # verify the required parameter 'activity_id' is set
      if @api_client.config.client_side_validation && activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'activity_id' when calling PhoneCallsApiApi.phone_calls_api_get_phone_call_queue_by_pin"
      end
      # resource path
      local_var_path = '/phonecalls/outbox/card'

      # query parameters
      query_params = {}
      query_params[:'campaignId'] = campaign_id
      query_params[:'pin'] = pin
      query_params[:'accountId'] = account_id
      query_params[:'activityId'] = activity_id
      query_params[:'isMultiCampaign'] = opts[:'is_multi_campaign'] if !opts[:'is_multi_campaign'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OutBox')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_phone_call_queue_by_pin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получить звонки  по кампании.
    # @param campaign_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<PhoneCall>]
    def phone_calls_api_get_phone_calls_by_campaign_id(campaign_id, opts = {})
      data, _status_code, _headers = phone_calls_api_get_phone_calls_by_campaign_id_with_http_info(campaign_id, opts)
      data
    end

    # Получить звонки  по кампании.
    # @param campaign_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PhoneCall>, Fixnum, Hash)>] Array<PhoneCall> data, response status code and response headers
    def phone_calls_api_get_phone_calls_by_campaign_id_with_http_info(campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_phone_calls_by_campaign_id ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling PhoneCallsApiApi.phone_calls_api_get_phone_calls_by_campaign_id"
      end
      # resource path
      local_var_path = '/phonecalls/bycampaign/{campaignId}'.sub('{' + 'campaignId' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PhoneCall>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_phone_calls_by_campaign_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получить звонки  по кампании.
    # @param campaign_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<PhoneCall>]
    def phone_calls_api_get_phone_calls_by_campaign_id_today(campaign_id, opts = {})
      data, _status_code, _headers = phone_calls_api_get_phone_calls_by_campaign_id_today_with_http_info(campaign_id, opts)
      data
    end

    # Получить звонки  по кампании.
    # @param campaign_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PhoneCall>, Fixnum, Hash)>] Array<PhoneCall> data, response status code and response headers
    def phone_calls_api_get_phone_calls_by_campaign_id_today_with_http_info(campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_phone_calls_by_campaign_id_today ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling PhoneCallsApiApi.phone_calls_api_get_phone_calls_by_campaign_id_today"
      end
      # resource path
      local_var_path = '/phonecalls/bycampaign/today/{campaignId}'.sub('{' + 'campaignId' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PhoneCall>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_phone_calls_by_campaign_id_today\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param campaign_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<PhoneCall>]
    def phone_calls_api_get_phone_calls_by_campaing(campaign_id, opts = {})
      data, _status_code, _headers = phone_calls_api_get_phone_calls_by_campaing_with_http_info(campaign_id, opts)
      data
    end

    # @param campaign_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PhoneCall>, Fixnum, Hash)>] Array<PhoneCall> data, response status code and response headers
    def phone_calls_api_get_phone_calls_by_campaing_with_http_info(campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_phone_calls_by_campaing ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling PhoneCallsApiApi.phone_calls_api_get_phone_calls_by_campaing"
      end
      # resource path
      local_var_path = '/phonecalls/okp/phonecalls_by-campaign'

      # query parameters
      query_params = {}
      query_params[:'campaignId'] = campaign_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PhoneCall>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_phone_calls_by_campaing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<PhoneCall>]
    def phone_calls_api_get_phone_calls_by_customer(customer_id, opts = {})
      data, _status_code, _headers = phone_calls_api_get_phone_calls_by_customer_with_http_info(customer_id, opts)
      data
    end

    # @param customer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PhoneCall>, Fixnum, Hash)>] Array<PhoneCall> data, response status code and response headers
    def phone_calls_api_get_phone_calls_by_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_phone_calls_by_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling PhoneCallsApiApi.phone_calls_api_get_phone_calls_by_customer"
      end
      # resource path
      local_var_path = '/phonecalls/okp/phonecalls_by-customer'

      # query parameters
      query_params = {}
      query_params[:'customerId'] = customer_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PhoneCall>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_phone_calls_by_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param primary_phone_call_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<PhoneCall>]
    def phone_calls_api_get_phone_calls_by_primary(primary_phone_call_id, opts = {})
      data, _status_code, _headers = phone_calls_api_get_phone_calls_by_primary_with_http_info(primary_phone_call_id, opts)
      data
    end

    # @param primary_phone_call_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PhoneCall>, Fixnum, Hash)>] Array<PhoneCall> data, response status code and response headers
    def phone_calls_api_get_phone_calls_by_primary_with_http_info(primary_phone_call_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_phone_calls_by_primary ...'
      end
      # verify the required parameter 'primary_phone_call_id' is set
      if @api_client.config.client_side_validation && primary_phone_call_id.nil?
        fail ArgumentError, "Missing the required parameter 'primary_phone_call_id' when calling PhoneCallsApiApi.phone_calls_api_get_phone_calls_by_primary"
      end
      # resource path
      local_var_path = '/phonecalls/okp/phonecalls_by-primary'

      # query parameters
      query_params = {}
      query_params[:'primaryPhoneCallId'] = primary_phone_call_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PhoneCall>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_phone_calls_by_primary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получить звонки  по головному партнеру.
    # @param date 
    # @param [Hash] opts the optional parameters
    # @return [Array<PhoneCall>]
    def phone_calls_api_get_phone_calls_by_top_partner(date, opts = {})
      data, _status_code, _headers = phone_calls_api_get_phone_calls_by_top_partner_with_http_info(date, opts)
      data
    end

    # Получить звонки  по головному партнеру.
    # @param date 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PhoneCall>, Fixnum, Hash)>] Array<PhoneCall> data, response status code and response headers
    def phone_calls_api_get_phone_calls_by_top_partner_with_http_info(date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_phone_calls_by_top_partner ...'
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling PhoneCallsApiApi.phone_calls_api_get_phone_calls_by_top_partner"
      end
      # resource path
      local_var_path = '/phonecalls/bytoppartner'

      # query parameters
      query_params = {}
      query_params[:'date'] = date

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PhoneCall>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_phone_calls_by_top_partner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получить список звонков  по пользователю
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<PhoneCall>]
    def phone_calls_api_get_phone_calls_by_user_id(user_id, opts = {})
      data, _status_code, _headers = phone_calls_api_get_phone_calls_by_user_id_with_http_info(user_id, opts)
      data
    end

    # Получить список звонков  по пользователю
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PhoneCall>, Fixnum, Hash)>] Array<PhoneCall> data, response status code and response headers
    def phone_calls_api_get_phone_calls_by_user_id_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_phone_calls_by_user_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling PhoneCallsApiApi.phone_calls_api_get_phone_calls_by_user_id"
      end
      # resource path
      local_var_path = '/phonecalls/byuser/{userId}'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PhoneCall>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_phone_calls_by_user_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param main_product_id 
    # @param [Hash] opts the optional parameters
    # @return [MainProductInformation]
    def phone_calls_api_get_previews(main_product_id, opts = {})
      data, _status_code, _headers = phone_calls_api_get_previews_with_http_info(main_product_id, opts)
      data
    end

    # @param main_product_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MainProductInformation, Fixnum, Hash)>] MainProductInformation data, response status code and response headers
    def phone_calls_api_get_previews_with_http_info(main_product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_previews ...'
      end
      # verify the required parameter 'main_product_id' is set
      if @api_client.config.client_side_validation && main_product_id.nil?
        fail ArgumentError, "Missing the required parameter 'main_product_id' when calling PhoneCallsApiApi.phone_calls_api_get_previews"
      end
      # resource path
      local_var_path = '/phonecalls/previews'

      # query parameters
      query_params = {}
      query_params[:'mainProductId'] = main_product_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MainProductInformation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_previews\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param activity_id 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def phone_calls_api_get_redial_count_by_activity_id(activity_id, opts = {})
      data, _status_code, _headers = phone_calls_api_get_redial_count_by_activity_id_with_http_info(activity_id, opts)
      data
    end

    # @param activity_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def phone_calls_api_get_redial_count_by_activity_id_with_http_info(activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_redial_count_by_activity_id ...'
      end
      # verify the required parameter 'activity_id' is set
      if @api_client.config.client_side_validation && activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'activity_id' when calling PhoneCallsApiApi.phone_calls_api_get_redial_count_by_activity_id"
      end
      # resource path
      local_var_path = '/phonecalls/outbox/redialcount'

      # query parameters
      query_params = {}
      query_params[:'activityId'] = activity_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_redial_count_by_activity_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param company_id 
    # @param [Hash] opts the optional parameters
    # @return [ScriptType]
    def phone_calls_api_get_script_type(company_id, opts = {})
      data, _status_code, _headers = phone_calls_api_get_script_type_with_http_info(company_id, opts)
      data
    end

    # @param company_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScriptType, Fixnum, Hash)>] ScriptType data, response status code and response headers
    def phone_calls_api_get_script_type_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_get_script_type ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling PhoneCallsApiApi.phone_calls_api_get_script_type"
      end
      # resource path
      local_var_path = '/phonecalls/companycategorytype'

      # query parameters
      query_params = {}
      query_params[:'companyId'] = company_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScriptType')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_get_script_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param from 
    # @param to 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def phone_calls_api_help_call_async(from, to, opts = {})
      data, _status_code, _headers = phone_calls_api_help_call_async_with_http_info(from, to, opts)
      data
    end

    # @param from 
    # @param to 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def phone_calls_api_help_call_async_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_help_call_async ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling PhoneCallsApiApi.phone_calls_api_help_call_async"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling PhoneCallsApiApi.phone_calls_api_help_call_async"
      end
      # resource path
      local_var_path = '/phonecalls/help'

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_help_call_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def phone_calls_api_import_mp3_files(opts = {})
      phone_calls_api_import_mp3_files_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def phone_calls_api_import_mp3_files_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_import_mp3_files ...'
      end
      # resource path
      local_var_path = '/phonecalls/import/mp3'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_import_mp3_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param base64 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def phone_calls_api_import_mp3_filesabase64(base64, name, opts = {})
      phone_calls_api_import_mp3_filesabase64_with_http_info(base64, name, opts)
      nil
    end

    # @param base64 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def phone_calls_api_import_mp3_filesabase64_with_http_info(base64, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_import_mp3_filesabase64 ...'
      end
      # verify the required parameter 'base64' is set
      if @api_client.config.client_side_validation && base64.nil?
        fail ArgumentError, "Missing the required parameter 'base64' when calling PhoneCallsApiApi.phone_calls_api_import_mp3_filesabase64"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling PhoneCallsApiApi.phone_calls_api_import_mp3_filesabase64"
      end
      # resource path
      local_var_path = '/phonecalls/import/mp3/base64'

      # query parameters
      query_params = {}
      query_params[:'name'] = name

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(base64)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_import_mp3_filesabase64\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param model 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def phone_calls_api_import_phone_calls(model, opts = {})
      data, _status_code, _headers = phone_calls_api_import_phone_calls_with_http_info(model, opts)
      data
    end

    # @param model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def phone_calls_api_import_phone_calls_with_http_info(model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_import_phone_calls ...'
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling PhoneCallsApiApi.phone_calls_api_import_phone_calls"
      end
      # resource path
      local_var_path = '/phonecalls/import'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_import_phone_calls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Поиск свободных клиентов
    # Internal api method
    # @param search 
    # @param [Hash] opts the optional parameters
    # @return [Array<Customer>]
    def phone_calls_api_search_free_customers(search, opts = {})
      data, _status_code, _headers = phone_calls_api_search_free_customers_with_http_info(search, opts)
      data
    end

    # Поиск свободных клиентов
    # Internal api method
    # @param search 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Customer>, Fixnum, Hash)>] Array<Customer> data, response status code and response headers
    def phone_calls_api_search_free_customers_with_http_info(search, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_search_free_customers ...'
      end
      # verify the required parameter 'search' is set
      if @api_client.config.client_side_validation && search.nil?
        fail ArgumentError, "Missing the required parameter 'search' when calling PhoneCallsApiApi.phone_calls_api_search_free_customers"
      end
      # resource path
      local_var_path = '/phonecalls/freecustomers/search'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(search)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Customer>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_search_free_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Поиск свободных клиентов  Метод, предназначенный для вызова напрямую из клиента
    # Internal api method
    # @param customer_type_id 
    # @param job_type_ids_str 
    # @param industry_ids_str 
    # @param region_ids_str 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :sale_forecast_id 
    # @option opts [String] :accounting_type_id 
    # @option opts [String] :revenue_id 
    # @option opts [String] :name_filter 
    # @option opts [BOOLEAN] :only_with_phone 
    # @option opts [BOOLEAN] :without_calls 
    # @option opts [String] :sort_on 
    # @option opts [String] :sort_order 
    # @option opts [Integer] :page_num 
    # @option opts [Integer] :page_len 
    # @option opts [String] :search_text 
    # @return [CustomerSimplePaged]
    def phone_calls_api_search_free_customers_paged(customer_type_id, job_type_ids_str, industry_ids_str, region_ids_str, opts = {})
      data, _status_code, _headers = phone_calls_api_search_free_customers_paged_with_http_info(customer_type_id, job_type_ids_str, industry_ids_str, region_ids_str, opts)
      data
    end

    # Поиск свободных клиентов  Метод, предназначенный для вызова напрямую из клиента
    # Internal api method
    # @param customer_type_id 
    # @param job_type_ids_str 
    # @param industry_ids_str 
    # @param region_ids_str 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :sale_forecast_id 
    # @option opts [String] :accounting_type_id 
    # @option opts [String] :revenue_id 
    # @option opts [String] :name_filter 
    # @option opts [BOOLEAN] :only_with_phone 
    # @option opts [BOOLEAN] :without_calls 
    # @option opts [String] :sort_on 
    # @option opts [String] :sort_order 
    # @option opts [Integer] :page_num 
    # @option opts [Integer] :page_len 
    # @option opts [String] :search_text 
    # @return [Array<(CustomerSimplePaged, Fixnum, Hash)>] CustomerSimplePaged data, response status code and response headers
    def phone_calls_api_search_free_customers_paged_with_http_info(customer_type_id, job_type_ids_str, industry_ids_str, region_ids_str, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_search_free_customers_paged ...'
      end
      # verify the required parameter 'customer_type_id' is set
      if @api_client.config.client_side_validation && customer_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_type_id' when calling PhoneCallsApiApi.phone_calls_api_search_free_customers_paged"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['account', 'contact', 'lead', 'unknown'].include?(customer_type_id)
        fail ArgumentError, 'invalid value for "customer_type_id", must be one of account, contact, lead, unknown'
      end
      # verify the required parameter 'job_type_ids_str' is set
      if @api_client.config.client_side_validation && job_type_ids_str.nil?
        fail ArgumentError, "Missing the required parameter 'job_type_ids_str' when calling PhoneCallsApiApi.phone_calls_api_search_free_customers_paged"
      end
      # verify the required parameter 'industry_ids_str' is set
      if @api_client.config.client_side_validation && industry_ids_str.nil?
        fail ArgumentError, "Missing the required parameter 'industry_ids_str' when calling PhoneCallsApiApi.phone_calls_api_search_free_customers_paged"
      end
      # verify the required parameter 'region_ids_str' is set
      if @api_client.config.client_side_validation && region_ids_str.nil?
        fail ArgumentError, "Missing the required parameter 'region_ids_str' when calling PhoneCallsApiApi.phone_calls_api_search_free_customers_paged"
      end
      # resource path
      local_var_path = '/phonecalls/freecustomers/searchPaged'

      # query parameters
      query_params = {}
      query_params[:'CustomerTypeId'] = customer_type_id
      query_params[:'JobTypeIdsStr'] = job_type_ids_str
      query_params[:'IndustryIdsStr'] = industry_ids_str
      query_params[:'RegionIdsStr'] = region_ids_str
      query_params[:'SaleForecastId'] = opts[:'sale_forecast_id'] if !opts[:'sale_forecast_id'].nil?
      query_params[:'AccountingTypeId'] = opts[:'accounting_type_id'] if !opts[:'accounting_type_id'].nil?
      query_params[:'RevenueId'] = opts[:'revenue_id'] if !opts[:'revenue_id'].nil?
      query_params[:'NameFilter'] = opts[:'name_filter'] if !opts[:'name_filter'].nil?
      query_params[:'OnlyWithPhone'] = opts[:'only_with_phone'] if !opts[:'only_with_phone'].nil?
      query_params[:'WithoutCalls'] = opts[:'without_calls'] if !opts[:'without_calls'].nil?
      query_params[:'sortOn'] = opts[:'sort_on'] if !opts[:'sort_on'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'pageNum'] = opts[:'page_num'] if !opts[:'page_num'].nil?
      query_params[:'pageLen'] = opts[:'page_len'] if !opts[:'page_len'].nil?
      query_params[:'searchText'] = opts[:'search_text'] if !opts[:'search_text'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomerSimplePaged')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_search_free_customers_paged\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Установить ответственного на звонке
    # @param model 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def phone_calls_api_set_phone_call_owner(model, opts = {})
      phone_calls_api_set_phone_call_owner_with_http_info(model, opts)
      nil
    end

    # Установить ответственного на звонке
    # @param model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def phone_calls_api_set_phone_call_owner_with_http_info(model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_set_phone_call_owner ...'
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling PhoneCallsApiApi.phone_calls_api_set_phone_call_owner"
      end
      # resource path
      local_var_path = '/phonecalls/owner'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_set_phone_call_owner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param from 
    # @param to 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def phone_calls_api_spy_call_async(from, to, opts = {})
      data, _status_code, _headers = phone_calls_api_spy_call_async_with_http_info(from, to, opts)
      data
    end

    # @param from 
    # @param to 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def phone_calls_api_spy_call_async_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_spy_call_async ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling PhoneCallsApiApi.phone_calls_api_spy_call_async"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling PhoneCallsApiApi.phone_calls_api_spy_call_async"
      end
      # resource path
      local_var_path = '/phonecalls/spy'

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_spy_call_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param from 
    # @param to 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def phone_calls_api_war_call_async(from, to, opts = {})
      data, _status_code, _headers = phone_calls_api_war_call_async_with_http_info(from, to, opts)
      data
    end

    # @param from 
    # @param to 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def phone_calls_api_war_call_async_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneCallsApiApi.phone_calls_api_war_call_async ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling PhoneCallsApiApi.phone_calls_api_war_call_async"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling PhoneCallsApiApi.phone_calls_api_war_call_async"
      end
      # resource path
      local_var_path = '/phonecalls/war'

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneCallsApiApi#phone_calls_api_war_call_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
