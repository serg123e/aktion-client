=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'uri'

module AktionClient
  class DemoApiApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Создает демодоступ
    # Если контактное лицо существует в CRM Актион, то можно указать только email контакта, иначе необходимо заполнить все поля
    # @param demo_model 
    # @param [Hash] opts the optional parameters
    # @return [DemoAccess]
    def demo_api_create(demo_model, opts = {})
      data, _status_code, _headers = demo_api_create_with_http_info(demo_model, opts)
      data
    end

    # Создает демодоступ
    # Если контактное лицо существует в CRM Актион, то можно указать только email контакта, иначе необходимо заполнить все поля
    # @param demo_model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DemoAccess, Fixnum, Hash)>] DemoAccess data, response status code and response headers
    def demo_api_create_with_http_info(demo_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DemoApiApi.demo_api_create ...'
      end
      # verify the required parameter 'demo_model' is set
      if @api_client.config.client_side_validation && demo_model.nil?
        fail ArgumentError, "Missing the required parameter 'demo_model' when calling DemoApiApi.demo_api_create"
      end
      # resource path
      local_var_path = '/demo'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(demo_model)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DemoAccess')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DemoApiApi#demo_api_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает демодоступ по коду доступа
    # @param code 
    # @param [Hash] opts the optional parameters
    # @return [DemoAccess]
    def demo_api_get_demo_access_by_code(code, opts = {})
      data, _status_code, _headers = demo_api_get_demo_access_by_code_with_http_info(code, opts)
      data
    end

    # Получает демодоступ по коду доступа
    # @param code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DemoAccess, Fixnum, Hash)>] DemoAccess data, response status code and response headers
    def demo_api_get_demo_access_by_code_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DemoApiApi.demo_api_get_demo_access_by_code ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling DemoApiApi.demo_api_get_demo_access_by_code"
      end
      # resource path
      local_var_path = '/demo/code/{code}'.sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DemoAccess')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DemoApiApi#demo_api_get_demo_access_by_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает список продуктов для демодоступа
    # @param email 
    # @param [Hash] opts the optional parameters
    # @return [Array<DemoAccessHistory>]
    def demo_api_get_demo_access_history(email, opts = {})
      data, _status_code, _headers = demo_api_get_demo_access_history_with_http_info(email, opts)
      data
    end

    # Получает список продуктов для демодоступа
    # @param email 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DemoAccessHistory>, Fixnum, Hash)>] Array<DemoAccessHistory> data, response status code and response headers
    def demo_api_get_demo_access_history_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DemoApiApi.demo_api_get_demo_access_history ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling DemoApiApi.demo_api_get_demo_access_history"
      end
      # resource path
      local_var_path = '/demo/history'

      # query parameters
      query_params = {}
      query_params[:'email'] = email

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DemoAccessHistory>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DemoApiApi#demo_api_get_demo_access_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает список демодоступов по партнеру
    # @param partner_id 
    # @param from 
    # @param to 
    # @param [Hash] opts the optional parameters
    # @return [Array<DemoAccess>]
    def demo_api_get_demo_accesses_by_partner_id(partner_id, from, to, opts = {})
      data, _status_code, _headers = demo_api_get_demo_accesses_by_partner_id_with_http_info(partner_id, from, to, opts)
      data
    end

    # Получает список демодоступов по партнеру
    # @param partner_id 
    # @param from 
    # @param to 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DemoAccess>, Fixnum, Hash)>] Array<DemoAccess> data, response status code and response headers
    def demo_api_get_demo_accesses_by_partner_id_with_http_info(partner_id, from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DemoApiApi.demo_api_get_demo_accesses_by_partner_id ...'
      end
      # verify the required parameter 'partner_id' is set
      if @api_client.config.client_side_validation && partner_id.nil?
        fail ArgumentError, "Missing the required parameter 'partner_id' when calling DemoApiApi.demo_api_get_demo_accesses_by_partner_id"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DemoApiApi.demo_api_get_demo_accesses_by_partner_id"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DemoApiApi.demo_api_get_demo_accesses_by_partner_id"
      end
      # resource path
      local_var_path = '/demo/list/bypartner'

      # query parameters
      query_params = {}
      query_params[:'partnerId'] = partner_id
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DemoAccess>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DemoApiApi#demo_api_get_demo_accesses_by_partner_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает список демодоступов по пользователю
    # @param user_id 
    # @param from 
    # @param to 
    # @param [Hash] opts the optional parameters
    # @return [Array<DemoAccess>]
    def demo_api_get_demo_accesses_by_user_id(user_id, from, to, opts = {})
      data, _status_code, _headers = demo_api_get_demo_accesses_by_user_id_with_http_info(user_id, from, to, opts)
      data
    end

    # Получает список демодоступов по пользователю
    # @param user_id 
    # @param from 
    # @param to 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DemoAccess>, Fixnum, Hash)>] Array<DemoAccess> data, response status code and response headers
    def demo_api_get_demo_accesses_by_user_id_with_http_info(user_id, from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DemoApiApi.demo_api_get_demo_accesses_by_user_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DemoApiApi.demo_api_get_demo_accesses_by_user_id"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DemoApiApi.demo_api_get_demo_accesses_by_user_id"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DemoApiApi.demo_api_get_demo_accesses_by_user_id"
      end
      # resource path
      local_var_path = '/demo/list/byuser'

      # query parameters
      query_params = {}
      query_params[:'userId'] = user_id
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DemoAccess>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DemoApiApi#demo_api_get_demo_accesses_by_user_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Получает список продуктов для демодоступа
    # @param [Hash] opts the optional parameters
    # @return [Array<MainProduct>]
    def demo_api_get_demo_products(opts = {})
      data, _status_code, _headers = demo_api_get_demo_products_with_http_info(opts)
      data
    end

    # Получает список продуктов для демодоступа
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MainProduct>, Fixnum, Hash)>] Array<MainProduct> data, response status code and response headers
    def demo_api_get_demo_products_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DemoApiApi.demo_api_get_demo_products ...'
      end
      # resource path
      local_var_path = '/demo/products'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<MainProduct>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DemoApiApi#demo_api_get_demo_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
