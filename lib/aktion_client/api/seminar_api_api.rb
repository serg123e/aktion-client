=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'uri'

module AktionClient
  class SeminarApiApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Получает информацию о семинаре по id семинара. Содержит список участников семинара
    # @param seminar_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Seminar>]
    def seminar_api_get_seminar_by_id(seminar_id, opts = {})
      data, _status_code, _headers = seminar_api_get_seminar_by_id_with_http_info(seminar_id, opts)
      data
    end

    # Получает информацию о семинаре по id семинара. Содержит список участников семинара
    # @param seminar_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Seminar>, Fixnum, Hash)>] Array<Seminar> data, response status code and response headers
    def seminar_api_get_seminar_by_id_with_http_info(seminar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeminarApiApi.seminar_api_get_seminar_by_id ...'
      end
      # verify the required parameter 'seminar_id' is set
      if @api_client.config.client_side_validation && seminar_id.nil?
        fail ArgumentError, "Missing the required parameter 'seminar_id' when calling SeminarApiApi.seminar_api_get_seminar_by_id"
      end
      # resource path
      local_var_path = '/seminar/{seminarId}'.sub('{' + 'seminarId' + '}', seminar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Seminar>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeminarApiApi#seminar_api_get_seminar_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Возвращает семинары партнера. Запланированные и прошедшие не более полугода назад.
    # @param [Hash] opts the optional parameters
    # @return [Array<Seminar>]
    def seminar_api_get_seminars(opts = {})
      data, _status_code, _headers = seminar_api_get_seminars_with_http_info(opts)
      data
    end

    # Возвращает семинары партнера. Запланированные и прошедшие не более полугода назад.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Seminar>, Fixnum, Hash)>] Array<Seminar> data, response status code and response headers
    def seminar_api_get_seminars_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeminarApiApi.seminar_api_get_seminars ...'
      end
      # resource path
      local_var_path = '/seminar/list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Seminar>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeminarApiApi#seminar_api_get_seminars\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
