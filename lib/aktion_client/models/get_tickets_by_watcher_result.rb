=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'date'

module AktionClient
  class GetTicketsByWatcherResult
    attr_accessor :id

    attr_accessor :ticket_number

    attr_accessor :contact_person

    attr_accessor :type_id

    attr_accessor :type_name

    attr_accessor :parent_type_id

    attr_accessor :parent_type_name

    attr_accessor :status_code

    attr_accessor :source_id

    attr_accessor :source_name

    attr_accessor :solution_date

    attr_accessor :solution_user_id

    attr_accessor :solution_user_name

    attr_accessor :owner_name

    attr_accessor :owner_id

    attr_accessor :created_by

    attr_accessor :created_by_name

    attr_accessor :created_on

    attr_accessor :performer_id

    attr_accessor :performer_name

    attr_accessor :description

    attr_accessor :state_id

    attr_accessor :state_name

    attr_accessor :is_solution_state

    attr_accessor :last_comment

    attr_accessor :last_comment_author_id

    attr_accessor :last_comment_author_name

    attr_accessor :last_comment_created_on

    attr_accessor :last_comment_email

    attr_accessor :last_comment_created_by_partner_user

    attr_accessor :partner_id

    attr_accessor :partner_name

    attr_accessor :rating

    attr_accessor :rating_author_id

    attr_accessor :rating_author_name

    attr_accessor :rating_source

    attr_accessor :rating_comment

    attr_accessor :watcher_user_id

    attr_accessor :watcher_e_mail_address

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'ticket_number' => :'ticketNumber',
        :'contact_person' => :'contactPerson',
        :'type_id' => :'typeId',
        :'type_name' => :'typeName',
        :'parent_type_id' => :'parentTypeId',
        :'parent_type_name' => :'parentTypeName',
        :'status_code' => :'statusCode',
        :'source_id' => :'sourceId',
        :'source_name' => :'sourceName',
        :'solution_date' => :'solutionDate',
        :'solution_user_id' => :'solutionUserId',
        :'solution_user_name' => :'solutionUserName',
        :'owner_name' => :'ownerName',
        :'owner_id' => :'ownerId',
        :'created_by' => :'createdBy',
        :'created_by_name' => :'createdByName',
        :'created_on' => :'createdOn',
        :'performer_id' => :'performerId',
        :'performer_name' => :'performerName',
        :'description' => :'description',
        :'state_id' => :'stateId',
        :'state_name' => :'stateName',
        :'is_solution_state' => :'isSolutionState',
        :'last_comment' => :'lastComment',
        :'last_comment_author_id' => :'lastCommentAuthorId',
        :'last_comment_author_name' => :'lastCommentAuthorName',
        :'last_comment_created_on' => :'lastCommentCreatedOn',
        :'last_comment_email' => :'lastCommentEmail',
        :'last_comment_created_by_partner_user' => :'lastCommentCreatedByPartnerUser',
        :'partner_id' => :'partnerId',
        :'partner_name' => :'partnerName',
        :'rating' => :'rating',
        :'rating_author_id' => :'ratingAuthorId',
        :'rating_author_name' => :'ratingAuthorName',
        :'rating_source' => :'ratingSource',
        :'rating_comment' => :'ratingComment',
        :'watcher_user_id' => :'watcherUserId',
        :'watcher_e_mail_address' => :'watcherEMailAddress'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'ticket_number' => :'Integer',
        :'contact_person' => :'String',
        :'type_id' => :'String',
        :'type_name' => :'String',
        :'parent_type_id' => :'String',
        :'parent_type_name' => :'String',
        :'status_code' => :'Integer',
        :'source_id' => :'Integer',
        :'source_name' => :'String',
        :'solution_date' => :'DateTime',
        :'solution_user_id' => :'String',
        :'solution_user_name' => :'String',
        :'owner_name' => :'String',
        :'owner_id' => :'String',
        :'created_by' => :'String',
        :'created_by_name' => :'String',
        :'created_on' => :'DateTime',
        :'performer_id' => :'String',
        :'performer_name' => :'String',
        :'description' => :'String',
        :'state_id' => :'String',
        :'state_name' => :'String',
        :'is_solution_state' => :'BOOLEAN',
        :'last_comment' => :'String',
        :'last_comment_author_id' => :'String',
        :'last_comment_author_name' => :'String',
        :'last_comment_created_on' => :'DateTime',
        :'last_comment_email' => :'String',
        :'last_comment_created_by_partner_user' => :'BOOLEAN',
        :'partner_id' => :'String',
        :'partner_name' => :'String',
        :'rating' => :'Integer',
        :'rating_author_id' => :'String',
        :'rating_author_name' => :'String',
        :'rating_source' => :'Integer',
        :'rating_comment' => :'String',
        :'watcher_user_id' => :'String',
        :'watcher_e_mail_address' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'ticketNumber')
        self.ticket_number = attributes[:'ticketNumber']
      end

      if attributes.has_key?(:'contactPerson')
        self.contact_person = attributes[:'contactPerson']
      end

      if attributes.has_key?(:'typeId')
        self.type_id = attributes[:'typeId']
      end

      if attributes.has_key?(:'typeName')
        self.type_name = attributes[:'typeName']
      end

      if attributes.has_key?(:'parentTypeId')
        self.parent_type_id = attributes[:'parentTypeId']
      end

      if attributes.has_key?(:'parentTypeName')
        self.parent_type_name = attributes[:'parentTypeName']
      end

      if attributes.has_key?(:'statusCode')
        self.status_code = attributes[:'statusCode']
      end

      if attributes.has_key?(:'sourceId')
        self.source_id = attributes[:'sourceId']
      end

      if attributes.has_key?(:'sourceName')
        self.source_name = attributes[:'sourceName']
      end

      if attributes.has_key?(:'solutionDate')
        self.solution_date = attributes[:'solutionDate']
      end

      if attributes.has_key?(:'solutionUserId')
        self.solution_user_id = attributes[:'solutionUserId']
      end

      if attributes.has_key?(:'solutionUserName')
        self.solution_user_name = attributes[:'solutionUserName']
      end

      if attributes.has_key?(:'ownerName')
        self.owner_name = attributes[:'ownerName']
      end

      if attributes.has_key?(:'ownerId')
        self.owner_id = attributes[:'ownerId']
      end

      if attributes.has_key?(:'createdBy')
        self.created_by = attributes[:'createdBy']
      end

      if attributes.has_key?(:'createdByName')
        self.created_by_name = attributes[:'createdByName']
      end

      if attributes.has_key?(:'createdOn')
        self.created_on = attributes[:'createdOn']
      end

      if attributes.has_key?(:'performerId')
        self.performer_id = attributes[:'performerId']
      end

      if attributes.has_key?(:'performerName')
        self.performer_name = attributes[:'performerName']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'stateId')
        self.state_id = attributes[:'stateId']
      end

      if attributes.has_key?(:'stateName')
        self.state_name = attributes[:'stateName']
      end

      if attributes.has_key?(:'isSolutionState')
        self.is_solution_state = attributes[:'isSolutionState']
      end

      if attributes.has_key?(:'lastComment')
        self.last_comment = attributes[:'lastComment']
      end

      if attributes.has_key?(:'lastCommentAuthorId')
        self.last_comment_author_id = attributes[:'lastCommentAuthorId']
      end

      if attributes.has_key?(:'lastCommentAuthorName')
        self.last_comment_author_name = attributes[:'lastCommentAuthorName']
      end

      if attributes.has_key?(:'lastCommentCreatedOn')
        self.last_comment_created_on = attributes[:'lastCommentCreatedOn']
      end

      if attributes.has_key?(:'lastCommentEmail')
        self.last_comment_email = attributes[:'lastCommentEmail']
      end

      if attributes.has_key?(:'lastCommentCreatedByPartnerUser')
        self.last_comment_created_by_partner_user = attributes[:'lastCommentCreatedByPartnerUser']
      end

      if attributes.has_key?(:'partnerId')
        self.partner_id = attributes[:'partnerId']
      end

      if attributes.has_key?(:'partnerName')
        self.partner_name = attributes[:'partnerName']
      end

      if attributes.has_key?(:'rating')
        self.rating = attributes[:'rating']
      end

      if attributes.has_key?(:'ratingAuthorId')
        self.rating_author_id = attributes[:'ratingAuthorId']
      end

      if attributes.has_key?(:'ratingAuthorName')
        self.rating_author_name = attributes[:'ratingAuthorName']
      end

      if attributes.has_key?(:'ratingSource')
        self.rating_source = attributes[:'ratingSource']
      end

      if attributes.has_key?(:'ratingComment')
        self.rating_comment = attributes[:'ratingComment']
      end

      if attributes.has_key?(:'watcherUserId')
        self.watcher_user_id = attributes[:'watcherUserId']
      end

      if attributes.has_key?(:'watcherEMailAddress')
        self.watcher_e_mail_address = attributes[:'watcherEMailAddress']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          ticket_number == o.ticket_number &&
          contact_person == o.contact_person &&
          type_id == o.type_id &&
          type_name == o.type_name &&
          parent_type_id == o.parent_type_id &&
          parent_type_name == o.parent_type_name &&
          status_code == o.status_code &&
          source_id == o.source_id &&
          source_name == o.source_name &&
          solution_date == o.solution_date &&
          solution_user_id == o.solution_user_id &&
          solution_user_name == o.solution_user_name &&
          owner_name == o.owner_name &&
          owner_id == o.owner_id &&
          created_by == o.created_by &&
          created_by_name == o.created_by_name &&
          created_on == o.created_on &&
          performer_id == o.performer_id &&
          performer_name == o.performer_name &&
          description == o.description &&
          state_id == o.state_id &&
          state_name == o.state_name &&
          is_solution_state == o.is_solution_state &&
          last_comment == o.last_comment &&
          last_comment_author_id == o.last_comment_author_id &&
          last_comment_author_name == o.last_comment_author_name &&
          last_comment_created_on == o.last_comment_created_on &&
          last_comment_email == o.last_comment_email &&
          last_comment_created_by_partner_user == o.last_comment_created_by_partner_user &&
          partner_id == o.partner_id &&
          partner_name == o.partner_name &&
          rating == o.rating &&
          rating_author_id == o.rating_author_id &&
          rating_author_name == o.rating_author_name &&
          rating_source == o.rating_source &&
          rating_comment == o.rating_comment &&
          watcher_user_id == o.watcher_user_id &&
          watcher_e_mail_address == o.watcher_e_mail_address
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, ticket_number, contact_person, type_id, type_name, parent_type_id, parent_type_name, status_code, source_id, source_name, solution_date, solution_user_id, solution_user_name, owner_name, owner_id, created_by, created_by_name, created_on, performer_id, performer_name, description, state_id, state_name, is_solution_state, last_comment, last_comment_author_id, last_comment_author_name, last_comment_created_on, last_comment_email, last_comment_created_by_partner_user, partner_id, partner_name, rating, rating_author_id, rating_author_name, rating_source, rating_comment, watcher_user_id, watcher_e_mail_address].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AktionClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
