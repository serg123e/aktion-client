=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'date'

module AktionClient
  class PhoneCall
    attr_accessor :campaign

    attr_accessor :number

    attr_accessor :customer

    attr_accessor :scheduled_start

    attr_accessor :child

    attr_accessor :description

    attr_accessor :category_type

    attr_accessor :overview

    attr_accessor :priority

    attr_accessor :date_event

    attr_accessor :product_event

    attr_accessor :phone

    attr_accessor :event_name

    attr_accessor :event_number

    attr_accessor :time_difference

    attr_accessor :type_event

    attr_accessor :primary_phone_call_id

    attr_accessor :parent_phone_call_id

    attr_accessor :product_name

    attr_accessor :product_name_g

    attr_accessor :scheduled_start_parent

    attr_accessor :description_parent

    attr_accessor :act_status_name_parent

    attr_accessor :organisation_name

    attr_accessor :organisation_id

    attr_accessor :action_status

    attr_accessor :actual_start

    attr_accessor :actual_end

    attr_accessor :owner

    attr_accessor :partner

    attr_accessor :time_shift

    attr_accessor :regarding_object_id

    attr_accessor :phone_call_subject

    attr_accessor :summary_table_event_id

    attr_accessor :lead_id

    attr_accessor :lead_name

    attr_accessor :contact_id

    attr_accessor :contact_full_name

    attr_accessor :account_id

    attr_accessor :account_name

    attr_accessor :parent_account_id

    attr_accessor :parent_account_name

    attr_accessor :customer_created_on

    attr_accessor :contact_taxid_number

    attr_accessor :contact_pin

    attr_accessor :account_registration_code

    attr_accessor :account_taxid_number

    attr_accessor :account_pin

    attr_accessor :lead_pin

    attr_accessor :parent_account_registration_code

    attr_accessor :parent_account_taxid_number

    attr_accessor :parent_account_pin

    attr_accessor :address_name

    attr_accessor :actionnr

    attr_accessor :campaign_rank

    attr_accessor :setting_id

    attr_accessor :ignor_nedozvon

    attr_accessor :primary_activity_id

    attr_accessor :activity_serial_number

    attr_accessor :contact_person_id

    attr_accessor :contact_person_id_name

    attr_accessor :phone_call_type

    attr_accessor :party_id

    attr_accessor :color

    attr_accessor :time

    attr_accessor :created_by

    attr_accessor :created_on

    attr_accessor :modified_by

    attr_accessor :modified_on

    attr_accessor :id

    attr_accessor :name

    attr_accessor :state_code

    attr_accessor :status_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'campaign' => :'campaign',
        :'number' => :'number',
        :'customer' => :'customer',
        :'scheduled_start' => :'scheduledStart',
        :'child' => :'child',
        :'description' => :'description',
        :'category_type' => :'categoryType',
        :'overview' => :'overview',
        :'priority' => :'priority',
        :'date_event' => :'dateEvent',
        :'product_event' => :'productEvent',
        :'phone' => :'phone',
        :'event_name' => :'eventName',
        :'event_number' => :'eventNumber',
        :'time_difference' => :'timeDifference',
        :'type_event' => :'typeEvent',
        :'primary_phone_call_id' => :'primaryPhoneCallId',
        :'parent_phone_call_id' => :'parentPhoneCallId',
        :'product_name' => :'productName',
        :'product_name_g' => :'productNameG',
        :'scheduled_start_parent' => :'scheduledStartParent',
        :'description_parent' => :'descriptionParent',
        :'act_status_name_parent' => :'actStatusNameParent',
        :'organisation_name' => :'organisationName',
        :'organisation_id' => :'organisationId',
        :'action_status' => :'actionStatus',
        :'actual_start' => :'actualStart',
        :'actual_end' => :'actualEnd',
        :'owner' => :'owner',
        :'partner' => :'partner',
        :'time_shift' => :'timeShift',
        :'regarding_object_id' => :'regardingObjectId',
        :'phone_call_subject' => :'phoneCallSubject',
        :'summary_table_event_id' => :'summaryTableEventId',
        :'lead_id' => :'leadId',
        :'lead_name' => :'leadName',
        :'contact_id' => :'contactId',
        :'contact_full_name' => :'contactFullName',
        :'account_id' => :'accountId',
        :'account_name' => :'accountName',
        :'parent_account_id' => :'parentAccountId',
        :'parent_account_name' => :'parentAccountName',
        :'customer_created_on' => :'customerCreatedOn',
        :'contact_taxid_number' => :'contactTaxidNumber',
        :'contact_pin' => :'contactPin',
        :'account_registration_code' => :'accountRegistrationCode',
        :'account_taxid_number' => :'accountTaxidNumber',
        :'account_pin' => :'accountPin',
        :'lead_pin' => :'leadPin',
        :'parent_account_registration_code' => :'parentAccountRegistrationCode',
        :'parent_account_taxid_number' => :'parentAccountTaxidNumber',
        :'parent_account_pin' => :'parentAccountPin',
        :'address_name' => :'addressName',
        :'actionnr' => :'actionnr',
        :'campaign_rank' => :'campaignRank',
        :'setting_id' => :'settingId',
        :'ignor_nedozvon' => :'ignorNedozvon',
        :'primary_activity_id' => :'primaryActivityId',
        :'activity_serial_number' => :'activitySerialNumber',
        :'contact_person_id' => :'contactPersonId',
        :'contact_person_id_name' => :'contactPersonIdName',
        :'phone_call_type' => :'phoneCallType',
        :'party_id' => :'partyId',
        :'color' => :'color',
        :'time' => :'time',
        :'created_by' => :'createdBy',
        :'created_on' => :'createdOn',
        :'modified_by' => :'modifiedBy',
        :'modified_on' => :'modifiedOn',
        :'id' => :'id',
        :'name' => :'name',
        :'state_code' => :'stateCode',
        :'status_code' => :'statusCode'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'campaign' => :'Campaign',
        :'number' => :'String',
        :'customer' => :'Customer',
        :'scheduled_start' => :'DateTime',
        :'child' => :'DateTime',
        :'description' => :'String',
        :'category_type' => :'CategoryType',
        :'overview' => :'String',
        :'priority' => :'Integer',
        :'date_event' => :'DateTime',
        :'product_event' => :'String',
        :'phone' => :'String',
        :'event_name' => :'String',
        :'event_number' => :'Integer',
        :'time_difference' => :'Integer',
        :'type_event' => :'Integer',
        :'primary_phone_call_id' => :'String',
        :'parent_phone_call_id' => :'String',
        :'product_name' => :'String',
        :'product_name_g' => :'String',
        :'scheduled_start_parent' => :'DateTime',
        :'description_parent' => :'String',
        :'act_status_name_parent' => :'String',
        :'organisation_name' => :'String',
        :'organisation_id' => :'String',
        :'action_status' => :'ActionStatus',
        :'actual_start' => :'DateTime',
        :'actual_end' => :'DateTime',
        :'owner' => :'CrmUser',
        :'partner' => :'Partner',
        :'time_shift' => :'Integer',
        :'regarding_object_id' => :'String',
        :'phone_call_subject' => :'String',
        :'summary_table_event_id' => :'Integer',
        :'lead_id' => :'String',
        :'lead_name' => :'String',
        :'contact_id' => :'String',
        :'contact_full_name' => :'String',
        :'account_id' => :'String',
        :'account_name' => :'String',
        :'parent_account_id' => :'String',
        :'parent_account_name' => :'String',
        :'customer_created_on' => :'DateTime',
        :'contact_taxid_number' => :'String',
        :'contact_pin' => :'String',
        :'account_registration_code' => :'String',
        :'account_taxid_number' => :'String',
        :'account_pin' => :'String',
        :'lead_pin' => :'String',
        :'parent_account_registration_code' => :'String',
        :'parent_account_taxid_number' => :'String',
        :'parent_account_pin' => :'String',
        :'address_name' => :'String',
        :'actionnr' => :'String',
        :'campaign_rank' => :'String',
        :'setting_id' => :'String',
        :'ignor_nedozvon' => :'Integer',
        :'primary_activity_id' => :'String',
        :'activity_serial_number' => :'String',
        :'contact_person_id' => :'String',
        :'contact_person_id_name' => :'String',
        :'phone_call_type' => :'String',
        :'party_id' => :'String',
        :'color' => :'String',
        :'time' => :'DateTime',
        :'created_by' => :'CrmUser',
        :'created_on' => :'DateTime',
        :'modified_by' => :'CrmUser',
        :'modified_on' => :'DateTime',
        :'id' => :'String',
        :'name' => :'String',
        :'state_code' => :'Integer',
        :'status_code' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'campaign')
        self.campaign = attributes[:'campaign']
      end

      if attributes.has_key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.has_key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.has_key?(:'scheduledStart')
        self.scheduled_start = attributes[:'scheduledStart']
      end

      if attributes.has_key?(:'child')
        self.child = attributes[:'child']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'categoryType')
        self.category_type = attributes[:'categoryType']
      end

      if attributes.has_key?(:'overview')
        self.overview = attributes[:'overview']
      end

      if attributes.has_key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.has_key?(:'dateEvent')
        self.date_event = attributes[:'dateEvent']
      end

      if attributes.has_key?(:'productEvent')
        self.product_event = attributes[:'productEvent']
      end

      if attributes.has_key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.has_key?(:'eventName')
        self.event_name = attributes[:'eventName']
      end

      if attributes.has_key?(:'eventNumber')
        self.event_number = attributes[:'eventNumber']
      end

      if attributes.has_key?(:'timeDifference')
        self.time_difference = attributes[:'timeDifference']
      end

      if attributes.has_key?(:'typeEvent')
        self.type_event = attributes[:'typeEvent']
      end

      if attributes.has_key?(:'primaryPhoneCallId')
        self.primary_phone_call_id = attributes[:'primaryPhoneCallId']
      end

      if attributes.has_key?(:'parentPhoneCallId')
        self.parent_phone_call_id = attributes[:'parentPhoneCallId']
      end

      if attributes.has_key?(:'productName')
        self.product_name = attributes[:'productName']
      end

      if attributes.has_key?(:'productNameG')
        self.product_name_g = attributes[:'productNameG']
      end

      if attributes.has_key?(:'scheduledStartParent')
        self.scheduled_start_parent = attributes[:'scheduledStartParent']
      end

      if attributes.has_key?(:'descriptionParent')
        self.description_parent = attributes[:'descriptionParent']
      end

      if attributes.has_key?(:'actStatusNameParent')
        self.act_status_name_parent = attributes[:'actStatusNameParent']
      end

      if attributes.has_key?(:'organisationName')
        self.organisation_name = attributes[:'organisationName']
      end

      if attributes.has_key?(:'organisationId')
        self.organisation_id = attributes[:'organisationId']
      end

      if attributes.has_key?(:'actionStatus')
        self.action_status = attributes[:'actionStatus']
      end

      if attributes.has_key?(:'actualStart')
        self.actual_start = attributes[:'actualStart']
      end

      if attributes.has_key?(:'actualEnd')
        self.actual_end = attributes[:'actualEnd']
      end

      if attributes.has_key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.has_key?(:'partner')
        self.partner = attributes[:'partner']
      end

      if attributes.has_key?(:'timeShift')
        self.time_shift = attributes[:'timeShift']
      end

      if attributes.has_key?(:'regardingObjectId')
        self.regarding_object_id = attributes[:'regardingObjectId']
      end

      if attributes.has_key?(:'phoneCallSubject')
        self.phone_call_subject = attributes[:'phoneCallSubject']
      end

      if attributes.has_key?(:'summaryTableEventId')
        self.summary_table_event_id = attributes[:'summaryTableEventId']
      end

      if attributes.has_key?(:'leadId')
        self.lead_id = attributes[:'leadId']
      end

      if attributes.has_key?(:'leadName')
        self.lead_name = attributes[:'leadName']
      end

      if attributes.has_key?(:'contactId')
        self.contact_id = attributes[:'contactId']
      end

      if attributes.has_key?(:'contactFullName')
        self.contact_full_name = attributes[:'contactFullName']
      end

      if attributes.has_key?(:'accountId')
        self.account_id = attributes[:'accountId']
      end

      if attributes.has_key?(:'accountName')
        self.account_name = attributes[:'accountName']
      end

      if attributes.has_key?(:'parentAccountId')
        self.parent_account_id = attributes[:'parentAccountId']
      end

      if attributes.has_key?(:'parentAccountName')
        self.parent_account_name = attributes[:'parentAccountName']
      end

      if attributes.has_key?(:'customerCreatedOn')
        self.customer_created_on = attributes[:'customerCreatedOn']
      end

      if attributes.has_key?(:'contactTaxidNumber')
        self.contact_taxid_number = attributes[:'contactTaxidNumber']
      end

      if attributes.has_key?(:'contactPin')
        self.contact_pin = attributes[:'contactPin']
      end

      if attributes.has_key?(:'accountRegistrationCode')
        self.account_registration_code = attributes[:'accountRegistrationCode']
      end

      if attributes.has_key?(:'accountTaxidNumber')
        self.account_taxid_number = attributes[:'accountTaxidNumber']
      end

      if attributes.has_key?(:'accountPin')
        self.account_pin = attributes[:'accountPin']
      end

      if attributes.has_key?(:'leadPin')
        self.lead_pin = attributes[:'leadPin']
      end

      if attributes.has_key?(:'parentAccountRegistrationCode')
        self.parent_account_registration_code = attributes[:'parentAccountRegistrationCode']
      end

      if attributes.has_key?(:'parentAccountTaxidNumber')
        self.parent_account_taxid_number = attributes[:'parentAccountTaxidNumber']
      end

      if attributes.has_key?(:'parentAccountPin')
        self.parent_account_pin = attributes[:'parentAccountPin']
      end

      if attributes.has_key?(:'addressName')
        self.address_name = attributes[:'addressName']
      end

      if attributes.has_key?(:'actionnr')
        self.actionnr = attributes[:'actionnr']
      end

      if attributes.has_key?(:'campaignRank')
        self.campaign_rank = attributes[:'campaignRank']
      end

      if attributes.has_key?(:'settingId')
        self.setting_id = attributes[:'settingId']
      end

      if attributes.has_key?(:'ignorNedozvon')
        self.ignor_nedozvon = attributes[:'ignorNedozvon']
      end

      if attributes.has_key?(:'primaryActivityId')
        self.primary_activity_id = attributes[:'primaryActivityId']
      end

      if attributes.has_key?(:'activitySerialNumber')
        self.activity_serial_number = attributes[:'activitySerialNumber']
      end

      if attributes.has_key?(:'contactPersonId')
        self.contact_person_id = attributes[:'contactPersonId']
      end

      if attributes.has_key?(:'contactPersonIdName')
        self.contact_person_id_name = attributes[:'contactPersonIdName']
      end

      if attributes.has_key?(:'phoneCallType')
        self.phone_call_type = attributes[:'phoneCallType']
      end

      if attributes.has_key?(:'partyId')
        self.party_id = attributes[:'partyId']
      end

      if attributes.has_key?(:'color')
        self.color = attributes[:'color']
      end

      if attributes.has_key?(:'time')
        self.time = attributes[:'time']
      end

      if attributes.has_key?(:'createdBy')
        self.created_by = attributes[:'createdBy']
      end

      if attributes.has_key?(:'createdOn')
        self.created_on = attributes[:'createdOn']
      end

      if attributes.has_key?(:'modifiedBy')
        self.modified_by = attributes[:'modifiedBy']
      end

      if attributes.has_key?(:'modifiedOn')
        self.modified_on = attributes[:'modifiedOn']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'stateCode')
        self.state_code = attributes[:'stateCode']
      end

      if attributes.has_key?(:'statusCode')
        self.status_code = attributes[:'statusCode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          campaign == o.campaign &&
          number == o.number &&
          customer == o.customer &&
          scheduled_start == o.scheduled_start &&
          child == o.child &&
          description == o.description &&
          category_type == o.category_type &&
          overview == o.overview &&
          priority == o.priority &&
          date_event == o.date_event &&
          product_event == o.product_event &&
          phone == o.phone &&
          event_name == o.event_name &&
          event_number == o.event_number &&
          time_difference == o.time_difference &&
          type_event == o.type_event &&
          primary_phone_call_id == o.primary_phone_call_id &&
          parent_phone_call_id == o.parent_phone_call_id &&
          product_name == o.product_name &&
          product_name_g == o.product_name_g &&
          scheduled_start_parent == o.scheduled_start_parent &&
          description_parent == o.description_parent &&
          act_status_name_parent == o.act_status_name_parent &&
          organisation_name == o.organisation_name &&
          organisation_id == o.organisation_id &&
          action_status == o.action_status &&
          actual_start == o.actual_start &&
          actual_end == o.actual_end &&
          owner == o.owner &&
          partner == o.partner &&
          time_shift == o.time_shift &&
          regarding_object_id == o.regarding_object_id &&
          phone_call_subject == o.phone_call_subject &&
          summary_table_event_id == o.summary_table_event_id &&
          lead_id == o.lead_id &&
          lead_name == o.lead_name &&
          contact_id == o.contact_id &&
          contact_full_name == o.contact_full_name &&
          account_id == o.account_id &&
          account_name == o.account_name &&
          parent_account_id == o.parent_account_id &&
          parent_account_name == o.parent_account_name &&
          customer_created_on == o.customer_created_on &&
          contact_taxid_number == o.contact_taxid_number &&
          contact_pin == o.contact_pin &&
          account_registration_code == o.account_registration_code &&
          account_taxid_number == o.account_taxid_number &&
          account_pin == o.account_pin &&
          lead_pin == o.lead_pin &&
          parent_account_registration_code == o.parent_account_registration_code &&
          parent_account_taxid_number == o.parent_account_taxid_number &&
          parent_account_pin == o.parent_account_pin &&
          address_name == o.address_name &&
          actionnr == o.actionnr &&
          campaign_rank == o.campaign_rank &&
          setting_id == o.setting_id &&
          ignor_nedozvon == o.ignor_nedozvon &&
          primary_activity_id == o.primary_activity_id &&
          activity_serial_number == o.activity_serial_number &&
          contact_person_id == o.contact_person_id &&
          contact_person_id_name == o.contact_person_id_name &&
          phone_call_type == o.phone_call_type &&
          party_id == o.party_id &&
          color == o.color &&
          time == o.time &&
          created_by == o.created_by &&
          created_on == o.created_on &&
          modified_by == o.modified_by &&
          modified_on == o.modified_on &&
          id == o.id &&
          name == o.name &&
          state_code == o.state_code &&
          status_code == o.status_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [campaign, number, customer, scheduled_start, child, description, category_type, overview, priority, date_event, product_event, phone, event_name, event_number, time_difference, type_event, primary_phone_call_id, parent_phone_call_id, product_name, product_name_g, scheduled_start_parent, description_parent, act_status_name_parent, organisation_name, organisation_id, action_status, actual_start, actual_end, owner, partner, time_shift, regarding_object_id, phone_call_subject, summary_table_event_id, lead_id, lead_name, contact_id, contact_full_name, account_id, account_name, parent_account_id, parent_account_name, customer_created_on, contact_taxid_number, contact_pin, account_registration_code, account_taxid_number, account_pin, lead_pin, parent_account_registration_code, parent_account_taxid_number, parent_account_pin, address_name, actionnr, campaign_rank, setting_id, ignor_nedozvon, primary_activity_id, activity_serial_number, contact_person_id, contact_person_id_name, phone_call_type, party_id, color, time, created_by, created_on, modified_by, modified_on, id, name, state_code, status_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AktionClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
