=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'date'

module AktionClient
  class LibMainProduct
    attr_accessor :id

    attr_accessor :name

    attr_accessor :new_type_mainproduct_id

    attr_accessor :owning_business_unit

    attr_accessor :new_type_mainproduct

    attr_accessor :new_nr

    attr_accessor :new_abbr

    attr_accessor :new_actionday

    attr_accessor :new_act_count

    attr_accessor :new_over

    attr_accessor :new_react

    attr_accessor :new_action

    attr_accessor :new_stid

    attr_accessor :new_ap_refusal

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'new_type_mainproduct_id' => :'new_type_mainproductId',
        :'owning_business_unit' => :'owningBusinessUnit',
        :'new_type_mainproduct' => :'new_type_mainproduct',
        :'new_nr' => :'new_nr',
        :'new_abbr' => :'new_Abbr',
        :'new_actionday' => :'new_actionday',
        :'new_act_count' => :'new_act_count',
        :'new_over' => :'new_over',
        :'new_react' => :'new_react',
        :'new_action' => :'new_action',
        :'new_stid' => :'new_stid',
        :'new_ap_refusal' => :'new_ap_refusal'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'new_type_mainproduct_id' => :'String',
        :'owning_business_unit' => :'String',
        :'new_type_mainproduct' => :'String',
        :'new_nr' => :'Integer',
        :'new_abbr' => :'String',
        :'new_actionday' => :'Integer',
        :'new_act_count' => :'Integer',
        :'new_over' => :'Integer',
        :'new_react' => :'Integer',
        :'new_action' => :'Integer',
        :'new_stid' => :'Integer',
        :'new_ap_refusal' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'new_type_mainproductId')
        self.new_type_mainproduct_id = attributes[:'new_type_mainproductId']
      end

      if attributes.has_key?(:'owningBusinessUnit')
        self.owning_business_unit = attributes[:'owningBusinessUnit']
      end

      if attributes.has_key?(:'new_type_mainproduct')
        self.new_type_mainproduct = attributes[:'new_type_mainproduct']
      end

      if attributes.has_key?(:'new_nr')
        self.new_nr = attributes[:'new_nr']
      end

      if attributes.has_key?(:'new_Abbr')
        self.new_abbr = attributes[:'new_Abbr']
      end

      if attributes.has_key?(:'new_actionday')
        self.new_actionday = attributes[:'new_actionday']
      end

      if attributes.has_key?(:'new_act_count')
        self.new_act_count = attributes[:'new_act_count']
      end

      if attributes.has_key?(:'new_over')
        self.new_over = attributes[:'new_over']
      end

      if attributes.has_key?(:'new_react')
        self.new_react = attributes[:'new_react']
      end

      if attributes.has_key?(:'new_action')
        self.new_action = attributes[:'new_action']
      end

      if attributes.has_key?(:'new_stid')
        self.new_stid = attributes[:'new_stid']
      end

      if attributes.has_key?(:'new_ap_refusal')
        self.new_ap_refusal = attributes[:'new_ap_refusal']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          new_type_mainproduct_id == o.new_type_mainproduct_id &&
          owning_business_unit == o.owning_business_unit &&
          new_type_mainproduct == o.new_type_mainproduct &&
          new_nr == o.new_nr &&
          new_abbr == o.new_abbr &&
          new_actionday == o.new_actionday &&
          new_act_count == o.new_act_count &&
          new_over == o.new_over &&
          new_react == o.new_react &&
          new_action == o.new_action &&
          new_stid == o.new_stid &&
          new_ap_refusal == o.new_ap_refusal
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, new_type_mainproduct_id, owning_business_unit, new_type_mainproduct, new_nr, new_abbr, new_actionday, new_act_count, new_over, new_react, new_action, new_stid, new_ap_refusal].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AktionClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
