=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'date'

module AktionClient
  class Customer
    attr_accessor :id

    attr_accessor :customer_type

    attr_accessor :name

    attr_accessor :tax_id_number

    attr_accessor :pin

    attr_accessor :city

    attr_accessor :email

    attr_accessor :bonus_level

    attr_accessor :bonus_level_name

    attr_accessor :phones

    attr_accessor :legal_form

    attr_accessor :taxation

    attr_accessor :registration_code

    attr_accessor :okp_status

    attr_accessor :okp_status_name

    attr_accessor :firstname

    attr_accessor :lastname

    attr_accessor :middlename

    attr_accessor :bitrix_id

    attr_accessor :contacts

    attr_accessor :addresses

    attr_accessor :status_for_partner

    attr_accessor :support_info

    attr_accessor :analytic

    attr_accessor :resubscription_group

    attr_accessor :revenue

    attr_accessor :industry

    attr_accessor :region

    attr_accessor :accounting_type

    attr_accessor :last_contact_date

    attr_accessor :scope_account_id

    attr_accessor :scope_account_name

    attr_accessor :fact_address

    attr_accessor :legal_address

    attr_accessor :estimated_nmtsk

    attr_accessor :income

    attr_accessor :is_corporate

    attr_accessor :nalog_status

    attr_accessor :has_contact_with_phone

    attr_accessor :job_type

    attr_accessor :bonus_balance

    attr_accessor :count_sl

    attr_accessor :is_account

    attr_accessor :is_contact

    attr_accessor :owner_name

    attr_accessor :customer_size_code

    attr_accessor :parent_account_name

    attr_accessor :parent_account_id

    attr_accessor :job_title

    attr_accessor :bool_nalog_status

    attr_accessor :support_partner_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'customer_type' => :'customerType',
        :'name' => :'name',
        :'tax_id_number' => :'taxIdNumber',
        :'pin' => :'pin',
        :'city' => :'city',
        :'email' => :'email',
        :'bonus_level' => :'bonusLevel',
        :'bonus_level_name' => :'bonusLevelName',
        :'phones' => :'phones',
        :'legal_form' => :'legalForm',
        :'taxation' => :'taxation',
        :'registration_code' => :'registrationCode',
        :'okp_status' => :'okpStatus',
        :'okp_status_name' => :'okpStatusName',
        :'firstname' => :'firstname',
        :'lastname' => :'lastname',
        :'middlename' => :'middlename',
        :'bitrix_id' => :'bitrixId',
        :'contacts' => :'contacts',
        :'addresses' => :'addresses',
        :'status_for_partner' => :'statusForPartner',
        :'support_info' => :'supportInfo',
        :'analytic' => :'analytic',
        :'resubscription_group' => :'resubscriptionGroup',
        :'revenue' => :'revenue',
        :'industry' => :'industry',
        :'region' => :'region',
        :'accounting_type' => :'accountingType',
        :'last_contact_date' => :'lastContactDate',
        :'scope_account_id' => :'scopeAccountId',
        :'scope_account_name' => :'scopeAccountName',
        :'fact_address' => :'factAddress',
        :'legal_address' => :'legalAddress',
        :'estimated_nmtsk' => :'estimatedNmtsk',
        :'income' => :'income',
        :'is_corporate' => :'isCorporate',
        :'nalog_status' => :'nalogStatus',
        :'has_contact_with_phone' => :'hasContactWithPhone',
        :'job_type' => :'jobType',
        :'bonus_balance' => :'bonusBalance',
        :'count_sl' => :'countSL',
        :'is_account' => :'isAccount',
        :'is_contact' => :'isContact',
        :'owner_name' => :'ownerName',
        :'customer_size_code' => :'customerSizeCode',
        :'parent_account_name' => :'parentAccountName',
        :'parent_account_id' => :'parentAccountId',
        :'job_title' => :'jobTitle',
        :'bool_nalog_status' => :'boolNalogStatus',
        :'support_partner_id' => :'supportPartnerId'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'customer_type' => :'String',
        :'name' => :'String',
        :'tax_id_number' => :'String',
        :'pin' => :'String',
        :'city' => :'String',
        :'email' => :'String',
        :'bonus_level' => :'String',
        :'bonus_level_name' => :'String',
        :'phones' => :'Array<String>',
        :'legal_form' => :'String',
        :'taxation' => :'Taxation',
        :'registration_code' => :'String',
        :'okp_status' => :'Integer',
        :'okp_status_name' => :'String',
        :'firstname' => :'String',
        :'lastname' => :'String',
        :'middlename' => :'String',
        :'bitrix_id' => :'String',
        :'contacts' => :'Array<Contact>',
        :'addresses' => :'Array<Address>',
        :'status_for_partner' => :'String',
        :'support_info' => :'SupportInfo',
        :'analytic' => :'CustomerAnalytic',
        :'resubscription_group' => :'String',
        :'revenue' => :'Float',
        :'industry' => :'Industry',
        :'region' => :'Region',
        :'accounting_type' => :'String',
        :'last_contact_date' => :'DateTime',
        :'scope_account_id' => :'String',
        :'scope_account_name' => :'String',
        :'fact_address' => :'String',
        :'legal_address' => :'String',
        :'estimated_nmtsk' => :'Float',
        :'income' => :'Float',
        :'is_corporate' => :'BOOLEAN',
        :'nalog_status' => :'Integer',
        :'has_contact_with_phone' => :'BOOLEAN',
        :'job_type' => :'JobType',
        :'bonus_balance' => :'Integer',
        :'count_sl' => :'Integer',
        :'is_account' => :'BOOLEAN',
        :'is_contact' => :'BOOLEAN',
        :'owner_name' => :'String',
        :'customer_size_code' => :'Integer',
        :'parent_account_name' => :'String',
        :'parent_account_id' => :'String',
        :'job_title' => :'String',
        :'bool_nalog_status' => :'BOOLEAN',
        :'support_partner_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'customerType')
        self.customer_type = attributes[:'customerType']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'taxIdNumber')
        self.tax_id_number = attributes[:'taxIdNumber']
      end

      if attributes.has_key?(:'pin')
        self.pin = attributes[:'pin']
      end

      if attributes.has_key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'bonusLevel')
        self.bonus_level = attributes[:'bonusLevel']
      end

      if attributes.has_key?(:'bonusLevelName')
        self.bonus_level_name = attributes[:'bonusLevelName']
      end

      if attributes.has_key?(:'phones')
        if (value = attributes[:'phones']).is_a?(Array)
          self.phones = value
        end
      end

      if attributes.has_key?(:'legalForm')
        self.legal_form = attributes[:'legalForm']
      end

      if attributes.has_key?(:'taxation')
        self.taxation = attributes[:'taxation']
      end

      if attributes.has_key?(:'registrationCode')
        self.registration_code = attributes[:'registrationCode']
      end

      if attributes.has_key?(:'okpStatus')
        self.okp_status = attributes[:'okpStatus']
      end

      if attributes.has_key?(:'okpStatusName')
        self.okp_status_name = attributes[:'okpStatusName']
      end

      if attributes.has_key?(:'firstname')
        self.firstname = attributes[:'firstname']
      end

      if attributes.has_key?(:'lastname')
        self.lastname = attributes[:'lastname']
      end

      if attributes.has_key?(:'middlename')
        self.middlename = attributes[:'middlename']
      end

      if attributes.has_key?(:'bitrixId')
        self.bitrix_id = attributes[:'bitrixId']
      end

      if attributes.has_key?(:'contacts')
        if (value = attributes[:'contacts']).is_a?(Array)
          self.contacts = value
        end
      end

      if attributes.has_key?(:'addresses')
        if (value = attributes[:'addresses']).is_a?(Array)
          self.addresses = value
        end
      end

      if attributes.has_key?(:'statusForPartner')
        self.status_for_partner = attributes[:'statusForPartner']
      end

      if attributes.has_key?(:'supportInfo')
        self.support_info = attributes[:'supportInfo']
      end

      if attributes.has_key?(:'analytic')
        self.analytic = attributes[:'analytic']
      end

      if attributes.has_key?(:'resubscriptionGroup')
        self.resubscription_group = attributes[:'resubscriptionGroup']
      end

      if attributes.has_key?(:'revenue')
        self.revenue = attributes[:'revenue']
      end

      if attributes.has_key?(:'industry')
        self.industry = attributes[:'industry']
      end

      if attributes.has_key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.has_key?(:'accountingType')
        self.accounting_type = attributes[:'accountingType']
      end

      if attributes.has_key?(:'lastContactDate')
        self.last_contact_date = attributes[:'lastContactDate']
      end

      if attributes.has_key?(:'scopeAccountId')
        self.scope_account_id = attributes[:'scopeAccountId']
      end

      if attributes.has_key?(:'scopeAccountName')
        self.scope_account_name = attributes[:'scopeAccountName']
      end

      if attributes.has_key?(:'factAddress')
        self.fact_address = attributes[:'factAddress']
      end

      if attributes.has_key?(:'legalAddress')
        self.legal_address = attributes[:'legalAddress']
      end

      if attributes.has_key?(:'estimatedNmtsk')
        self.estimated_nmtsk = attributes[:'estimatedNmtsk']
      end

      if attributes.has_key?(:'income')
        self.income = attributes[:'income']
      end

      if attributes.has_key?(:'isCorporate')
        self.is_corporate = attributes[:'isCorporate']
      end

      if attributes.has_key?(:'nalogStatus')
        self.nalog_status = attributes[:'nalogStatus']
      end

      if attributes.has_key?(:'hasContactWithPhone')
        self.has_contact_with_phone = attributes[:'hasContactWithPhone']
      end

      if attributes.has_key?(:'jobType')
        self.job_type = attributes[:'jobType']
      end

      if attributes.has_key?(:'bonusBalance')
        self.bonus_balance = attributes[:'bonusBalance']
      end

      if attributes.has_key?(:'countSL')
        self.count_sl = attributes[:'countSL']
      end

      if attributes.has_key?(:'isAccount')
        self.is_account = attributes[:'isAccount']
      end

      if attributes.has_key?(:'isContact')
        self.is_contact = attributes[:'isContact']
      end

      if attributes.has_key?(:'ownerName')
        self.owner_name = attributes[:'ownerName']
      end

      if attributes.has_key?(:'customerSizeCode')
        self.customer_size_code = attributes[:'customerSizeCode']
      end

      if attributes.has_key?(:'parentAccountName')
        self.parent_account_name = attributes[:'parentAccountName']
      end

      if attributes.has_key?(:'parentAccountId')
        self.parent_account_id = attributes[:'parentAccountId']
      end

      if attributes.has_key?(:'jobTitle')
        self.job_title = attributes[:'jobTitle']
      end

      if attributes.has_key?(:'boolNalogStatus')
        self.bool_nalog_status = attributes[:'boolNalogStatus']
      end

      if attributes.has_key?(:'supportPartnerId')
        self.support_partner_id = attributes[:'supportPartnerId']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      customer_type_validator = EnumAttributeValidator.new('String', ['account', 'contact', 'lead', 'unknown'])
      return false unless customer_type_validator.valid?(@customer_type)
      bonus_level_validator = EnumAttributeValidator.new('String', ['unknown', 'бронзовый', 'серебряный', 'золотой'])
      return false unless bonus_level_validator.valid?(@bonus_level)
      status_for_partner_validator = EnumAttributeValidator.new('String', ['сК', 'свой_ПК', 'свой_РК', 'чужой_ПК', 'чужой_РК'])
      return false unless status_for_partner_validator.valid?(@status_for_partner)
      accounting_type_validator = EnumAttributeValidator.new('String', ['unknown', 'commercial', 'budget'])
      return false unless accounting_type_validator.valid?(@accounting_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_type Object to be assigned
    def customer_type=(customer_type)
      validator = EnumAttributeValidator.new('String', ['account', 'contact', 'lead', 'unknown'])
      unless validator.valid?(customer_type)
        fail ArgumentError, %Q'invalid value for "customer_type", must be one of #{validator.allowable_values}.'
      end
      @customer_type = customer_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bonus_level Object to be assigned
    def bonus_level=(bonus_level)
      validator = EnumAttributeValidator.new('String', ['unknown', 'бронзовый', 'серебряный', 'золотой'])
      unless validator.valid?(bonus_level)
        fail ArgumentError, %Q'invalid value for "bonus_level", must be one of #{validator.allowable_values}.'
      end
      @bonus_level = bonus_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status_for_partner Object to be assigned
    def status_for_partner=(status_for_partner)
      validator = EnumAttributeValidator.new('String', ['ск', 'свой_ПК', 'свой_РК', 'чужой_ПК', 'чужой_РК'])
      unless validator.valid?(status_for_partner)
        fail ArgumentError, %Q'invalid value for "status_for_partner"=#{status_for_partner}, must be one of #{validator.allowable_values}.'
      end
      @status_for_partner = status_for_partner
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] accounting_type Object to be assigned
    def accounting_type=(accounting_type)
      validator = EnumAttributeValidator.new('String', ['unknown', 'commercial', 'budget'])
      unless validator.valid?(accounting_type)
        fail ArgumentError, %Q'invalid value for "accounting_type", must be one of #{validator.allowable_values}.'
      end
      @accounting_type = accounting_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          customer_type == o.customer_type &&
          name == o.name &&
          tax_id_number == o.tax_id_number &&
          pin == o.pin &&
          city == o.city &&
          email == o.email &&
          bonus_level == o.bonus_level &&
          bonus_level_name == o.bonus_level_name &&
          phones == o.phones &&
          legal_form == o.legal_form &&
          taxation == o.taxation &&
          registration_code == o.registration_code &&
          okp_status == o.okp_status &&
          okp_status_name == o.okp_status_name &&
          firstname == o.firstname &&
          lastname == o.lastname &&
          middlename == o.middlename &&
          bitrix_id == o.bitrix_id &&
          contacts == o.contacts &&
          addresses == o.addresses &&
          status_for_partner == o.status_for_partner &&
          support_info == o.support_info &&
          analytic == o.analytic &&
          resubscription_group == o.resubscription_group &&
          revenue == o.revenue &&
          industry == o.industry &&
          region == o.region &&
          accounting_type == o.accounting_type &&
          last_contact_date == o.last_contact_date &&
          scope_account_id == o.scope_account_id &&
          scope_account_name == o.scope_account_name &&
          fact_address == o.fact_address &&
          legal_address == o.legal_address &&
          estimated_nmtsk == o.estimated_nmtsk &&
          income == o.income &&
          is_corporate == o.is_corporate &&
          nalog_status == o.nalog_status &&
          has_contact_with_phone == o.has_contact_with_phone &&
          job_type == o.job_type &&
          bonus_balance == o.bonus_balance &&
          count_sl == o.count_sl &&
          is_account == o.is_account &&
          is_contact == o.is_contact &&
          owner_name == o.owner_name &&
          customer_size_code == o.customer_size_code &&
          parent_account_name == o.parent_account_name &&
          parent_account_id == o.parent_account_id &&
          job_title == o.job_title &&
          bool_nalog_status == o.bool_nalog_status &&
          support_partner_id == o.support_partner_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, customer_type, name, tax_id_number, pin, city, email, bonus_level, bonus_level_name, phones, legal_form, taxation, registration_code, okp_status, okp_status_name, firstname, lastname, middlename, bitrix_id, contacts, addresses, status_for_partner, support_info, analytic, resubscription_group, revenue, industry, region, accounting_type, last_contact_date, scope_account_id, scope_account_name, fact_address, legal_address, estimated_nmtsk, income, is_corporate, nalog_status, has_contact_with_phone, job_type, bonus_balance, count_sl, is_account, is_contact, owner_name, customer_size_code, parent_account_name, parent_account_id, job_title, bool_nalog_status, support_partner_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AktionClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
