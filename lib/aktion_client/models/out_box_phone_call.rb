=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'date'

module AktionClient
  class OutBoxPhoneCall
    attr_accessor :new_actionnr

    attr_accessor :campaign_name

    attr_accessor :account_id

    attr_accessor :new_pin

    attr_accessor :scheduled_start

    attr_accessor :activity_id

    attr_accessor :child

    attr_accessor :description

    attr_accessor :type

    attr_accessor :product_name

    attr_accessor :new_company_id

    attr_accessor :parent

    attr_accessor :scheduled_start_parent

    attr_accessor :description_parent

    attr_accessor :organisation_id

    attr_accessor :organisation_name

    attr_accessor :act_status_name_parent

    attr_accessor :product_name_g

    attr_accessor :category_type

    attr_accessor :new_taxation

    attr_accessor :created_on

    attr_accessor :job_type

    attr_accessor :category_name

    attr_accessor :name

    attr_accessor :created_by

    attr_accessor :modified_by

    attr_accessor :modified_on

    attr_accessor :id

    attr_accessor :state_code

    attr_accessor :status_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'new_actionnr' => :'new_actionnr',
        :'campaign_name' => :'campaignName',
        :'account_id' => :'accountId',
        :'new_pin' => :'new_pin',
        :'scheduled_start' => :'scheduledStart',
        :'activity_id' => :'activityId',
        :'child' => :'child',
        :'description' => :'description',
        :'type' => :'type',
        :'product_name' => :'productName',
        :'new_company_id' => :'new_CompanyId',
        :'parent' => :'parent',
        :'scheduled_start_parent' => :'scheduledStartParent',
        :'description_parent' => :'descriptionParent',
        :'organisation_id' => :'organisationId',
        :'organisation_name' => :'organisationName',
        :'act_status_name_parent' => :'actStatusNameParent',
        :'product_name_g' => :'productNameG',
        :'category_type' => :'categoryType',
        :'new_taxation' => :'new_taxation',
        :'created_on' => :'createdOn',
        :'job_type' => :'jobType',
        :'category_name' => :'categoryName',
        :'name' => :'name',
        :'created_by' => :'createdBy',
        :'modified_by' => :'modifiedBy',
        :'modified_on' => :'modifiedOn',
        :'id' => :'id',
        :'state_code' => :'stateCode',
        :'status_code' => :'statusCode'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'new_actionnr' => :'String',
        :'campaign_name' => :'String',
        :'account_id' => :'String',
        :'new_pin' => :'String',
        :'scheduled_start' => :'DateTime',
        :'activity_id' => :'String',
        :'child' => :'DateTime',
        :'description' => :'String',
        :'type' => :'String',
        :'product_name' => :'String',
        :'new_company_id' => :'String',
        :'parent' => :'String',
        :'scheduled_start_parent' => :'DateTime',
        :'description_parent' => :'String',
        :'organisation_id' => :'String',
        :'organisation_name' => :'String',
        :'act_status_name_parent' => :'String',
        :'product_name_g' => :'String',
        :'category_type' => :'Integer',
        :'new_taxation' => :'Integer',
        :'created_on' => :'DateTime',
        :'job_type' => :'Integer',
        :'category_name' => :'String',
        :'name' => :'String',
        :'created_by' => :'CrmUser',
        :'modified_by' => :'CrmUser',
        :'modified_on' => :'DateTime',
        :'id' => :'String',
        :'state_code' => :'Integer',
        :'status_code' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'new_actionnr')
        self.new_actionnr = attributes[:'new_actionnr']
      end

      if attributes.has_key?(:'campaignName')
        self.campaign_name = attributes[:'campaignName']
      end

      if attributes.has_key?(:'accountId')
        self.account_id = attributes[:'accountId']
      end

      if attributes.has_key?(:'new_pin')
        self.new_pin = attributes[:'new_pin']
      end

      if attributes.has_key?(:'scheduledStart')
        self.scheduled_start = attributes[:'scheduledStart']
      end

      if attributes.has_key?(:'activityId')
        self.activity_id = attributes[:'activityId']
      end

      if attributes.has_key?(:'child')
        self.child = attributes[:'child']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'productName')
        self.product_name = attributes[:'productName']
      end

      if attributes.has_key?(:'new_CompanyId')
        self.new_company_id = attributes[:'new_CompanyId']
      end

      if attributes.has_key?(:'parent')
        self.parent = attributes[:'parent']
      end

      if attributes.has_key?(:'scheduledStartParent')
        self.scheduled_start_parent = attributes[:'scheduledStartParent']
      end

      if attributes.has_key?(:'descriptionParent')
        self.description_parent = attributes[:'descriptionParent']
      end

      if attributes.has_key?(:'organisationId')
        self.organisation_id = attributes[:'organisationId']
      end

      if attributes.has_key?(:'organisationName')
        self.organisation_name = attributes[:'organisationName']
      end

      if attributes.has_key?(:'actStatusNameParent')
        self.act_status_name_parent = attributes[:'actStatusNameParent']
      end

      if attributes.has_key?(:'productNameG')
        self.product_name_g = attributes[:'productNameG']
      end

      if attributes.has_key?(:'categoryType')
        self.category_type = attributes[:'categoryType']
      end

      if attributes.has_key?(:'new_taxation')
        self.new_taxation = attributes[:'new_taxation']
      end

      if attributes.has_key?(:'createdOn')
        self.created_on = attributes[:'createdOn']
      end

      if attributes.has_key?(:'jobType')
        self.job_type = attributes[:'jobType']
      end

      if attributes.has_key?(:'categoryName')
        self.category_name = attributes[:'categoryName']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'createdBy')
        self.created_by = attributes[:'createdBy']
      end

      if attributes.has_key?(:'modifiedBy')
        self.modified_by = attributes[:'modifiedBy']
      end

      if attributes.has_key?(:'modifiedOn')
        self.modified_on = attributes[:'modifiedOn']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'stateCode')
        self.state_code = attributes[:'stateCode']
      end

      if attributes.has_key?(:'statusCode')
        self.status_code = attributes[:'statusCode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          new_actionnr == o.new_actionnr &&
          campaign_name == o.campaign_name &&
          account_id == o.account_id &&
          new_pin == o.new_pin &&
          scheduled_start == o.scheduled_start &&
          activity_id == o.activity_id &&
          child == o.child &&
          description == o.description &&
          type == o.type &&
          product_name == o.product_name &&
          new_company_id == o.new_company_id &&
          parent == o.parent &&
          scheduled_start_parent == o.scheduled_start_parent &&
          description_parent == o.description_parent &&
          organisation_id == o.organisation_id &&
          organisation_name == o.organisation_name &&
          act_status_name_parent == o.act_status_name_parent &&
          product_name_g == o.product_name_g &&
          category_type == o.category_type &&
          new_taxation == o.new_taxation &&
          created_on == o.created_on &&
          job_type == o.job_type &&
          category_name == o.category_name &&
          name == o.name &&
          created_by == o.created_by &&
          modified_by == o.modified_by &&
          modified_on == o.modified_on &&
          id == o.id &&
          state_code == o.state_code &&
          status_code == o.status_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [new_actionnr, campaign_name, account_id, new_pin, scheduled_start, activity_id, child, description, type, product_name, new_company_id, parent, scheduled_start_parent, description_parent, organisation_id, organisation_name, act_status_name_parent, product_name_g, category_type, new_taxation, created_on, job_type, category_name, name, created_by, modified_by, modified_on, id, state_code, status_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AktionClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
