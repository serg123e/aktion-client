=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'date'

module AktionClient
  class GetSupportedLicenses2Result
    attr_accessor :action_button

    attr_accessor :available_create_phone_call

    attr_accessor :license_id

    attr_accessor :customer_id

    attr_accessor :ukd

    attr_accessor :license_type_code

    attr_accessor :product_program

    attr_accessor :product_id

    attr_accessor :product_name

    attr_accessor :service_activate_on

    attr_accessor :expires_on

    attr_accessor :sales_on

    attr_accessor :activate_on

    attr_accessor :partner_amount

    attr_accessor :sales_contact_id

    attr_accessor :sales_contact_name

    attr_accessor :sales_contact_phone

    attr_accessor :support_partner_id

    attr_accessor :support_partner_name

    attr_accessor :sales_partner_id

    attr_accessor :sales_partner_name

    attr_accessor :support_system_user

    attr_accessor :support_system_user_id

    attr_accessor :product_type

    attr_accessor :support_action_type_name

    attr_accessor :support_action_name

    attr_accessor :support_result

    attr_accessor :support_result_date

    attr_accessor :old_support_action_type_name

    attr_accessor :new_partner_subscribe_id

    attr_accessor :payment_status

    attr_accessor :payment_status_name

    attr_accessor :main_product_id

    attr_accessor :successfully

    attr_accessor :sales_contact_email

    attr_accessor :support_action_id

    attr_accessor :last_visit_date

    attr_accessor :name

    attr_accessor :pin

    attr_accessor :inn

    attr_accessor :kpp

    attr_accessor :customer_type

    attr_accessor :edition_type

    attr_accessor :support_manager_ss

    attr_accessor :support_manager_e

    attr_accessor :activated_contact_id

    attr_accessor :activated_contact_name

    attr_accessor :activated_contact_phone

    attr_accessor :activated_contact_email

    attr_accessor :activity_id_to_account

    attr_accessor :activity_id_to_contact

    attr_accessor :max_sales_license

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'action_button' => :'actionButton',
        :'available_create_phone_call' => :'availableCreatePhoneCall',
        :'license_id' => :'licenseId',
        :'customer_id' => :'customerId',
        :'ukd' => :'ukd',
        :'license_type_code' => :'licenseTypeCode',
        :'product_program' => :'productProgram',
        :'product_id' => :'productId',
        :'product_name' => :'productName',
        :'service_activate_on' => :'serviceActivateOn',
        :'expires_on' => :'expiresOn',
        :'sales_on' => :'salesOn',
        :'activate_on' => :'activateOn',
        :'partner_amount' => :'partnerAmount',
        :'sales_contact_id' => :'salesContactId',
        :'sales_contact_name' => :'salesContactName',
        :'sales_contact_phone' => :'salesContactPhone',
        :'support_partner_id' => :'supportPartnerId',
        :'support_partner_name' => :'supportPartnerName',
        :'sales_partner_id' => :'salesPartnerId',
        :'sales_partner_name' => :'salesPartnerName',
        :'support_system_user' => :'supportSystemUser',
        :'support_system_user_id' => :'supportSystemUserId',
        :'product_type' => :'productType',
        :'support_action_type_name' => :'supportActionTypeName',
        :'support_action_name' => :'supportActionName',
        :'support_result' => :'supportResult',
        :'support_result_date' => :'supportResultDate',
        :'old_support_action_type_name' => :'oldSupportActionTypeName',
        :'new_partner_subscribe_id' => :'new_partner_subscribeId',
        :'payment_status' => :'paymentStatus',
        :'payment_status_name' => :'paymentStatusName',
        :'main_product_id' => :'mainProductId',
        :'successfully' => :'successfully',
        :'sales_contact_email' => :'salesContactEmail',
        :'support_action_id' => :'supportActionId',
        :'last_visit_date' => :'lastVisitDate',
        :'name' => :'name',
        :'pin' => :'pin',
        :'inn' => :'inn',
        :'kpp' => :'kpp',
        :'customer_type' => :'customerType',
        :'edition_type' => :'editionType',
        :'support_manager_ss' => :'supportManagerSs',
        :'support_manager_e' => :'supportManagerE',
        :'activated_contact_id' => :'activatedContactId',
        :'activated_contact_name' => :'activatedContactName',
        :'activated_contact_phone' => :'activatedContactPhone',
        :'activated_contact_email' => :'activatedContactEmail',
        :'activity_id_to_account' => :'activityIdToAccount',
        :'activity_id_to_contact' => :'activityIdToContact',
        :'max_sales_license' => :'maxSalesLicense'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'action_button' => :'ActionButton',
        :'available_create_phone_call' => :'BOOLEAN',
        :'license_id' => :'String',
        :'customer_id' => :'String',
        :'ukd' => :'String',
        :'license_type_code' => :'Integer',
        :'product_program' => :'Integer',
        :'product_id' => :'String',
        :'product_name' => :'String',
        :'service_activate_on' => :'DateTime',
        :'expires_on' => :'DateTime',
        :'sales_on' => :'DateTime',
        :'activate_on' => :'DateTime',
        :'partner_amount' => :'Float',
        :'sales_contact_id' => :'String',
        :'sales_contact_name' => :'String',
        :'sales_contact_phone' => :'String',
        :'support_partner_id' => :'String',
        :'support_partner_name' => :'String',
        :'sales_partner_id' => :'String',
        :'sales_partner_name' => :'String',
        :'support_system_user' => :'String',
        :'support_system_user_id' => :'String',
        :'product_type' => :'String',
        :'support_action_type_name' => :'String',
        :'support_action_name' => :'String',
        :'support_result' => :'String',
        :'support_result_date' => :'DateTime',
        :'old_support_action_type_name' => :'String',
        :'new_partner_subscribe_id' => :'String',
        :'payment_status' => :'Integer',
        :'payment_status_name' => :'String',
        :'main_product_id' => :'String',
        :'successfully' => :'Integer',
        :'sales_contact_email' => :'String',
        :'support_action_id' => :'Integer',
        :'last_visit_date' => :'DateTime',
        :'name' => :'String',
        :'pin' => :'String',
        :'inn' => :'String',
        :'kpp' => :'String',
        :'customer_type' => :'String',
        :'edition_type' => :'Integer',
        :'support_manager_ss' => :'String',
        :'support_manager_e' => :'String',
        :'activated_contact_id' => :'String',
        :'activated_contact_name' => :'String',
        :'activated_contact_phone' => :'String',
        :'activated_contact_email' => :'String',
        :'activity_id_to_account' => :'String',
        :'activity_id_to_contact' => :'String',
        :'max_sales_license' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'actionButton')
        self.action_button = attributes[:'actionButton']
      end

      if attributes.has_key?(:'availableCreatePhoneCall')
        self.available_create_phone_call = attributes[:'availableCreatePhoneCall']
      end

      if attributes.has_key?(:'licenseId')
        self.license_id = attributes[:'licenseId']
      end

      if attributes.has_key?(:'customerId')
        self.customer_id = attributes[:'customerId']
      end

      if attributes.has_key?(:'ukd')
        self.ukd = attributes[:'ukd']
      end

      if attributes.has_key?(:'licenseTypeCode')
        self.license_type_code = attributes[:'licenseTypeCode']
      end

      if attributes.has_key?(:'productProgram')
        self.product_program = attributes[:'productProgram']
      end

      if attributes.has_key?(:'productId')
        self.product_id = attributes[:'productId']
      end

      if attributes.has_key?(:'productName')
        self.product_name = attributes[:'productName']
      end

      if attributes.has_key?(:'serviceActivateOn')
        self.service_activate_on = attributes[:'serviceActivateOn']
      end

      if attributes.has_key?(:'expiresOn')
        self.expires_on = attributes[:'expiresOn']
      end

      if attributes.has_key?(:'salesOn')
        self.sales_on = attributes[:'salesOn']
      end

      if attributes.has_key?(:'activateOn')
        self.activate_on = attributes[:'activateOn']
      end

      if attributes.has_key?(:'partnerAmount')
        self.partner_amount = attributes[:'partnerAmount']
      end

      if attributes.has_key?(:'salesContactId')
        self.sales_contact_id = attributes[:'salesContactId']
      end

      if attributes.has_key?(:'salesContactName')
        self.sales_contact_name = attributes[:'salesContactName']
      end

      if attributes.has_key?(:'salesContactPhone')
        self.sales_contact_phone = attributes[:'salesContactPhone']
      end

      if attributes.has_key?(:'supportPartnerId')
        self.support_partner_id = attributes[:'supportPartnerId']
      end

      if attributes.has_key?(:'supportPartnerName')
        self.support_partner_name = attributes[:'supportPartnerName']
      end

      if attributes.has_key?(:'salesPartnerId')
        self.sales_partner_id = attributes[:'salesPartnerId']
      end

      if attributes.has_key?(:'salesPartnerName')
        self.sales_partner_name = attributes[:'salesPartnerName']
      end

      if attributes.has_key?(:'supportSystemUser')
        self.support_system_user = attributes[:'supportSystemUser']
      end

      if attributes.has_key?(:'supportSystemUserId')
        self.support_system_user_id = attributes[:'supportSystemUserId']
      end

      if attributes.has_key?(:'productType')
        self.product_type = attributes[:'productType']
      end

      if attributes.has_key?(:'supportActionTypeName')
        self.support_action_type_name = attributes[:'supportActionTypeName']
      end

      if attributes.has_key?(:'supportActionName')
        self.support_action_name = attributes[:'supportActionName']
      end

      if attributes.has_key?(:'supportResult')
        self.support_result = attributes[:'supportResult']
      end

      if attributes.has_key?(:'supportResultDate')
        self.support_result_date = attributes[:'supportResultDate']
      end

      if attributes.has_key?(:'oldSupportActionTypeName')
        self.old_support_action_type_name = attributes[:'oldSupportActionTypeName']
      end

      if attributes.has_key?(:'new_partner_subscribeId')
        self.new_partner_subscribe_id = attributes[:'new_partner_subscribeId']
      end

      if attributes.has_key?(:'paymentStatus')
        self.payment_status = attributes[:'paymentStatus']
      end

      if attributes.has_key?(:'paymentStatusName')
        self.payment_status_name = attributes[:'paymentStatusName']
      end

      if attributes.has_key?(:'mainProductId')
        self.main_product_id = attributes[:'mainProductId']
      end

      if attributes.has_key?(:'successfully')
        self.successfully = attributes[:'successfully']
      end

      if attributes.has_key?(:'salesContactEmail')
        self.sales_contact_email = attributes[:'salesContactEmail']
      end

      if attributes.has_key?(:'supportActionId')
        self.support_action_id = attributes[:'supportActionId']
      end

      if attributes.has_key?(:'lastVisitDate')
        self.last_visit_date = attributes[:'lastVisitDate']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'pin')
        self.pin = attributes[:'pin']
      end

      if attributes.has_key?(:'inn')
        self.inn = attributes[:'inn']
      end

      if attributes.has_key?(:'kpp')
        self.kpp = attributes[:'kpp']
      end

      if attributes.has_key?(:'customerType')
        self.customer_type = attributes[:'customerType']
      end

      if attributes.has_key?(:'editionType')
        self.edition_type = attributes[:'editionType']
      end

      if attributes.has_key?(:'supportManagerSs')
        self.support_manager_ss = attributes[:'supportManagerSs']
      end

      if attributes.has_key?(:'supportManagerE')
        self.support_manager_e = attributes[:'supportManagerE']
      end

      if attributes.has_key?(:'activatedContactId')
        self.activated_contact_id = attributes[:'activatedContactId']
      end

      if attributes.has_key?(:'activatedContactName')
        self.activated_contact_name = attributes[:'activatedContactName']
      end

      if attributes.has_key?(:'activatedContactPhone')
        self.activated_contact_phone = attributes[:'activatedContactPhone']
      end

      if attributes.has_key?(:'activatedContactEmail')
        self.activated_contact_email = attributes[:'activatedContactEmail']
      end

      if attributes.has_key?(:'activityIdToAccount')
        self.activity_id_to_account = attributes[:'activityIdToAccount']
      end

      if attributes.has_key?(:'activityIdToContact')
        self.activity_id_to_contact = attributes[:'activityIdToContact']
      end

      if attributes.has_key?(:'maxSalesLicense')
        self.max_sales_license = attributes[:'maxSalesLicense']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          action_button == o.action_button &&
          available_create_phone_call == o.available_create_phone_call &&
          license_id == o.license_id &&
          customer_id == o.customer_id &&
          ukd == o.ukd &&
          license_type_code == o.license_type_code &&
          product_program == o.product_program &&
          product_id == o.product_id &&
          product_name == o.product_name &&
          service_activate_on == o.service_activate_on &&
          expires_on == o.expires_on &&
          sales_on == o.sales_on &&
          activate_on == o.activate_on &&
          partner_amount == o.partner_amount &&
          sales_contact_id == o.sales_contact_id &&
          sales_contact_name == o.sales_contact_name &&
          sales_contact_phone == o.sales_contact_phone &&
          support_partner_id == o.support_partner_id &&
          support_partner_name == o.support_partner_name &&
          sales_partner_id == o.sales_partner_id &&
          sales_partner_name == o.sales_partner_name &&
          support_system_user == o.support_system_user &&
          support_system_user_id == o.support_system_user_id &&
          product_type == o.product_type &&
          support_action_type_name == o.support_action_type_name &&
          support_action_name == o.support_action_name &&
          support_result == o.support_result &&
          support_result_date == o.support_result_date &&
          old_support_action_type_name == o.old_support_action_type_name &&
          new_partner_subscribe_id == o.new_partner_subscribe_id &&
          payment_status == o.payment_status &&
          payment_status_name == o.payment_status_name &&
          main_product_id == o.main_product_id &&
          successfully == o.successfully &&
          sales_contact_email == o.sales_contact_email &&
          support_action_id == o.support_action_id &&
          last_visit_date == o.last_visit_date &&
          name == o.name &&
          pin == o.pin &&
          inn == o.inn &&
          kpp == o.kpp &&
          customer_type == o.customer_type &&
          edition_type == o.edition_type &&
          support_manager_ss == o.support_manager_ss &&
          support_manager_e == o.support_manager_e &&
          activated_contact_id == o.activated_contact_id &&
          activated_contact_name == o.activated_contact_name &&
          activated_contact_phone == o.activated_contact_phone &&
          activated_contact_email == o.activated_contact_email &&
          activity_id_to_account == o.activity_id_to_account &&
          activity_id_to_contact == o.activity_id_to_contact &&
          max_sales_license == o.max_sales_license
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [action_button, available_create_phone_call, license_id, customer_id, ukd, license_type_code, product_program, product_id, product_name, service_activate_on, expires_on, sales_on, activate_on, partner_amount, sales_contact_id, sales_contact_name, sales_contact_phone, support_partner_id, support_partner_name, sales_partner_id, sales_partner_name, support_system_user, support_system_user_id, product_type, support_action_type_name, support_action_name, support_result, support_result_date, old_support_action_type_name, new_partner_subscribe_id, payment_status, payment_status_name, main_product_id, successfully, sales_contact_email, support_action_id, last_visit_date, name, pin, inn, kpp, customer_type, edition_type, support_manager_ss, support_manager_e, activated_contact_id, activated_contact_name, activated_contact_phone, activated_contact_email, activity_id_to_account, activity_id_to_contact, max_sales_license].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AktionClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
