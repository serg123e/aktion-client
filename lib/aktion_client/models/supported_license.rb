=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'date'

module AktionClient
  class SupportedLicense
    attr_accessor :support_action

    attr_accessor :when_resubscribed

    attr_accessor :when_resubscribed_value

    attr_accessor :resubscription_number

    attr_accessor :resub_number_client

    attr_accessor :resub_number_user

    attr_accessor :id

    attr_accessor :set_id

    attr_accessor :product

    attr_accessor :service_activate_on

    attr_accessor :service_expires_on

    attr_accessor :status

    attr_accessor :activated_on

    attr_accessor :license_type

    attr_accessor :authorize_code

    attr_accessor :partner_amount

    attr_accessor :bonus_amount

    attr_accessor :sales_on

    attr_accessor :product_program

    attr_accessor :is_personal_approval

    attr_accessor :is_register_past_period

    attr_accessor :customer

    attr_accessor :sales_contact

    attr_accessor :activated_contact

    attr_accessor :sales_manager

    attr_accessor :support_manager

    attr_accessor :sales_partner

    attr_accessor :support_partner

    attr_accessor :price_level

    attr_accessor :action_type_name

    attr_accessor :promo_codes

    attr_accessor :resubscription_count

    attr_accessor :resubscription_type_name

    attr_accessor :payment_status

    attr_accessor :registration_money

    attr_accessor :registration_money_complect

    attr_accessor :extension_manager

    attr_accessor :support_result_id

    attr_accessor :support_result_user_id

    attr_accessor :digital_event_id

    attr_accessor :support_result_comment

    attr_accessor :action_name

    attr_accessor :type_main_product

    attr_accessor :type_main_product_id

    attr_accessor :max_sales_license

    attr_accessor :min_period

    attr_accessor :incident_id

    attr_accessor :gr_sale

    attr_accessor :comment

    attr_accessor :interval

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'support_action' => :'supportAction',
        :'when_resubscribed' => :'whenResubscribed',
        :'when_resubscribed_value' => :'whenResubscribedValue',
        :'resubscription_number' => :'resubscriptionNumber',
        :'resub_number_client' => :'resubNumberClient',
        :'resub_number_user' => :'resubNumberUser',
        :'id' => :'id',
        :'set_id' => :'setId',
        :'product' => :'product',
        :'service_activate_on' => :'serviceActivateOn',
        :'service_expires_on' => :'serviceExpiresOn',
        :'status' => :'status',
        :'activated_on' => :'activatedOn',
        :'license_type' => :'licenseType',
        :'authorize_code' => :'authorizeCode',
        :'partner_amount' => :'partnerAmount',
        :'bonus_amount' => :'bonusAmount',
        :'sales_on' => :'salesOn',
        :'product_program' => :'productProgram',
        :'is_personal_approval' => :'isPersonalApproval',
        :'is_register_past_period' => :'isRegisterPastPeriod',
        :'customer' => :'customer',
        :'sales_contact' => :'salesContact',
        :'activated_contact' => :'activatedContact',
        :'sales_manager' => :'salesManager',
        :'support_manager' => :'supportManager',
        :'sales_partner' => :'salesPartner',
        :'support_partner' => :'supportPartner',
        :'price_level' => :'priceLevel',
        :'action_type_name' => :'actionTypeName',
        :'promo_codes' => :'promoCodes',
        :'resubscription_count' => :'resubscriptionCount',
        :'resubscription_type_name' => :'resubscriptionTypeName',
        :'payment_status' => :'paymentStatus',
        :'registration_money' => :'registrationMoney',
        :'registration_money_complect' => :'registrationMoneyComplect',
        :'extension_manager' => :'extensionManager',
        :'support_result_id' => :'supportResultId',
        :'support_result_user_id' => :'supportResultUserId',
        :'digital_event_id' => :'digitalEventId',
        :'support_result_comment' => :'supportResultComment',
        :'action_name' => :'actionName',
        :'type_main_product' => :'typeMainProduct',
        :'type_main_product_id' => :'typeMainProductId',
        :'max_sales_license' => :'maxSalesLicense',
        :'min_period' => :'minPeriod',
        :'incident_id' => :'incidentId',
        :'gr_sale' => :'grSale',
        :'comment' => :'comment',
        :'interval' => :'interval'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'support_action' => :'SupportAction',
        :'when_resubscribed' => :'String',
        :'when_resubscribed_value' => :'Integer',
        :'resubscription_number' => :'Integer',
        :'resub_number_client' => :'Integer',
        :'resub_number_user' => :'Integer',
        :'id' => :'String',
        :'set_id' => :'String',
        :'product' => :'Product',
        :'service_activate_on' => :'DateTime',
        :'service_expires_on' => :'DateTime',
        :'status' => :'String',
        :'activated_on' => :'DateTime',
        :'license_type' => :'String',
        :'authorize_code' => :'String',
        :'partner_amount' => :'Float',
        :'bonus_amount' => :'Float',
        :'sales_on' => :'DateTime',
        :'product_program' => :'String',
        :'is_personal_approval' => :'BOOLEAN',
        :'is_register_past_period' => :'BOOLEAN',
        :'customer' => :'Customer',
        :'sales_contact' => :'Contact',
        :'activated_contact' => :'Contact',
        :'sales_manager' => :'PartnerUser',
        :'support_manager' => :'PartnerUser',
        :'sales_partner' => :'Partner',
        :'support_partner' => :'Partner',
        :'price_level' => :'PriceLevel',
        :'action_type_name' => :'String',
        :'promo_codes' => :'Array<String>',
        :'resubscription_count' => :'Integer',
        :'resubscription_type_name' => :'String',
        :'payment_status' => :'String',
        :'registration_money' => :'Integer',
        :'registration_money_complect' => :'Integer',
        :'extension_manager' => :'PartnerUser',
        :'support_result_id' => :'String',
        :'support_result_user_id' => :'String',
        :'digital_event_id' => :'Integer',
        :'support_result_comment' => :'String',
        :'action_name' => :'String',
        :'type_main_product' => :'String',
        :'type_main_product_id' => :'String',
        :'max_sales_license' => :'Integer',
        :'min_period' => :'Integer',
        :'incident_id' => :'String',
        :'gr_sale' => :'BOOLEAN',
        :'comment' => :'String',
        :'interval' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'supportAction')
        self.support_action = attributes[:'supportAction']
      end

      if attributes.has_key?(:'whenResubscribed')
        self.when_resubscribed = attributes[:'whenResubscribed']
      end

      if attributes.has_key?(:'whenResubscribedValue')
        self.when_resubscribed_value = attributes[:'whenResubscribedValue']
      end

      if attributes.has_key?(:'resubscriptionNumber')
        self.resubscription_number = attributes[:'resubscriptionNumber']
      end

      if attributes.has_key?(:'resubNumberClient')
        self.resub_number_client = attributes[:'resubNumberClient']
      end

      if attributes.has_key?(:'resubNumberUser')
        self.resub_number_user = attributes[:'resubNumberUser']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'setId')
        self.set_id = attributes[:'setId']
      end

      if attributes.has_key?(:'product')
        self.product = attributes[:'product']
      end

      if attributes.has_key?(:'serviceActivateOn')
        self.service_activate_on = attributes[:'serviceActivateOn']
      end

      if attributes.has_key?(:'serviceExpiresOn')
        self.service_expires_on = attributes[:'serviceExpiresOn']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'activatedOn')
        self.activated_on = attributes[:'activatedOn']
      end

      if attributes.has_key?(:'licenseType')
        self.license_type = attributes[:'licenseType']
      end

      if attributes.has_key?(:'authorizeCode')
        self.authorize_code = attributes[:'authorizeCode']
      end

      if attributes.has_key?(:'partnerAmount')
        self.partner_amount = attributes[:'partnerAmount']
      end

      if attributes.has_key?(:'bonusAmount')
        self.bonus_amount = attributes[:'bonusAmount']
      end

      if attributes.has_key?(:'salesOn')
        self.sales_on = attributes[:'salesOn']
      end

      if attributes.has_key?(:'productProgram')
        self.product_program = attributes[:'productProgram']
      end

      if attributes.has_key?(:'isPersonalApproval')
        self.is_personal_approval = attributes[:'isPersonalApproval']
      end

      if attributes.has_key?(:'isRegisterPastPeriod')
        self.is_register_past_period = attributes[:'isRegisterPastPeriod']
      end

      if attributes.has_key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.has_key?(:'salesContact')
        self.sales_contact = attributes[:'salesContact']
      end

      if attributes.has_key?(:'activatedContact')
        self.activated_contact = attributes[:'activatedContact']
      end

      if attributes.has_key?(:'salesManager')
        self.sales_manager = attributes[:'salesManager']
      end

      if attributes.has_key?(:'supportManager')
        self.support_manager = attributes[:'supportManager']
      end

      if attributes.has_key?(:'salesPartner')
        self.sales_partner = attributes[:'salesPartner']
      end

      if attributes.has_key?(:'supportPartner')
        self.support_partner = attributes[:'supportPartner']
      end

      if attributes.has_key?(:'priceLevel')
        self.price_level = attributes[:'priceLevel']
      end

      if attributes.has_key?(:'actionTypeName')
        self.action_type_name = attributes[:'actionTypeName']
      end

      if attributes.has_key?(:'promoCodes')
        if (value = attributes[:'promoCodes']).is_a?(Array)
          self.promo_codes = value
        end
      end

      if attributes.has_key?(:'resubscriptionCount')
        self.resubscription_count = attributes[:'resubscriptionCount']
      end

      if attributes.has_key?(:'resubscriptionTypeName')
        self.resubscription_type_name = attributes[:'resubscriptionTypeName']
      end

      if attributes.has_key?(:'paymentStatus')
        self.payment_status = attributes[:'paymentStatus']
      end

      if attributes.has_key?(:'registrationMoney')
        self.registration_money = attributes[:'registrationMoney']
      end

      if attributes.has_key?(:'registrationMoneyComplect')
        self.registration_money_complect = attributes[:'registrationMoneyComplect']
      end

      if attributes.has_key?(:'extensionManager')
        self.extension_manager = attributes[:'extensionManager']
      end

      if attributes.has_key?(:'supportResultId')
        self.support_result_id = attributes[:'supportResultId']
      end

      if attributes.has_key?(:'supportResultUserId')
        self.support_result_user_id = attributes[:'supportResultUserId']
      end

      if attributes.has_key?(:'digitalEventId')
        self.digital_event_id = attributes[:'digitalEventId']
      end

      if attributes.has_key?(:'supportResultComment')
        self.support_result_comment = attributes[:'supportResultComment']
      end

      if attributes.has_key?(:'actionName')
        self.action_name = attributes[:'actionName']
      end

      if attributes.has_key?(:'typeMainProduct')
        self.type_main_product = attributes[:'typeMainProduct']
      end

      if attributes.has_key?(:'typeMainProductId')
        self.type_main_product_id = attributes[:'typeMainProductId']
      end

      if attributes.has_key?(:'maxSalesLicense')
        self.max_sales_license = attributes[:'maxSalesLicense']
      end

      if attributes.has_key?(:'minPeriod')
        self.min_period = attributes[:'minPeriod']
      end

      if attributes.has_key?(:'incidentId')
        self.incident_id = attributes[:'incidentId']
      end

      if attributes.has_key?(:'grSale')
        self.gr_sale = attributes[:'grSale']
      end

      if attributes.has_key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.has_key?(:'interval')
        self.interval = attributes[:'interval']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ['new', 'canceled', 'handedSales', 'handedDealer', 'handedCustomer', 'activated', 'blocked', 'onAgreement', 'agreementRejected', 'agreementSuccess', 'inReport', 'unknown'])
      return false unless status_validator.valid?(@status)
      license_type_validator = EnumAttributeValidator.new('String', ['mono', 'complect', 'ePlusE', 'unknown'])
      return false unless license_type_validator.valid?(@license_type)
      product_program_validator = EnumAttributeValidator.new('String', ['classic', 'compensation', 'actionBonus', 'gift', 'unknown'])
      return false unless product_program_validator.valid?(@product_program)
      payment_status_validator = EnumAttributeValidator.new('String', ['unknown', 'notPaid', 'partiallyPaid', 'paid', 'free'])
      return false unless payment_status_validator.valid?(@payment_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['new', 'canceled', 'handedSales', 'handedDealer', 'handedCustomer', 'activated', 'blocked', 'onAgreement', 'agreementRejected', 'agreementSuccess', 'inReport', 'unknown'])
      unless validator.valid?(status)
        fail ArgumentError, %Q'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] license_type Object to be assigned
    def license_type=(license_type)
      validator = EnumAttributeValidator.new('String', ['mono', 'complect', 'ePlusE', 'unknown'])
      unless validator.valid?(license_type)
        fail ArgumentError, %Q'invalid value for "license_type", must be one of #{validator.allowable_values}.'
      end
      @license_type = license_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] product_program Object to be assigned
    def product_program=(product_program)
      validator = EnumAttributeValidator.new('String', ['classic', 'compensation', 'actionBonus', 'gift', 'unknown'])
      unless validator.valid?(product_program)
        fail ArgumentError, %Q'invalid value for "product_program", must be one of #{validator.allowable_values}.'
      end
      @product_program = product_program
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_status Object to be assigned
    def payment_status=(payment_status)
      validator = EnumAttributeValidator.new('String', ['unknown', 'notPaid', 'partiallyPaid', 'paid', 'free'])
      unless validator.valid?(payment_status)
        fail ArgumentError, %Q'invalid value for "payment_status", must be one of #{validator.allowable_values}.'
      end
      @payment_status = payment_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          support_action == o.support_action &&
          when_resubscribed == o.when_resubscribed &&
          when_resubscribed_value == o.when_resubscribed_value &&
          resubscription_number == o.resubscription_number &&
          resub_number_client == o.resub_number_client &&
          resub_number_user == o.resub_number_user &&
          id == o.id &&
          set_id == o.set_id &&
          product == o.product &&
          service_activate_on == o.service_activate_on &&
          service_expires_on == o.service_expires_on &&
          status == o.status &&
          activated_on == o.activated_on &&
          license_type == o.license_type &&
          authorize_code == o.authorize_code &&
          partner_amount == o.partner_amount &&
          bonus_amount == o.bonus_amount &&
          sales_on == o.sales_on &&
          product_program == o.product_program &&
          is_personal_approval == o.is_personal_approval &&
          is_register_past_period == o.is_register_past_period &&
          customer == o.customer &&
          sales_contact == o.sales_contact &&
          activated_contact == o.activated_contact &&
          sales_manager == o.sales_manager &&
          support_manager == o.support_manager &&
          sales_partner == o.sales_partner &&
          support_partner == o.support_partner &&
          price_level == o.price_level &&
          action_type_name == o.action_type_name &&
          promo_codes == o.promo_codes &&
          resubscription_count == o.resubscription_count &&
          resubscription_type_name == o.resubscription_type_name &&
          payment_status == o.payment_status &&
          registration_money == o.registration_money &&
          registration_money_complect == o.registration_money_complect &&
          extension_manager == o.extension_manager &&
          support_result_id == o.support_result_id &&
          support_result_user_id == o.support_result_user_id &&
          digital_event_id == o.digital_event_id &&
          support_result_comment == o.support_result_comment &&
          action_name == o.action_name &&
          type_main_product == o.type_main_product &&
          type_main_product_id == o.type_main_product_id &&
          max_sales_license == o.max_sales_license &&
          min_period == o.min_period &&
          incident_id == o.incident_id &&
          gr_sale == o.gr_sale &&
          comment == o.comment &&
          interval == o.interval
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [support_action, when_resubscribed, when_resubscribed_value, resubscription_number, resub_number_client, resub_number_user, id, set_id, product, service_activate_on, service_expires_on, status, activated_on, license_type, authorize_code, partner_amount, bonus_amount, sales_on, product_program, is_personal_approval, is_register_past_period, customer, sales_contact, activated_contact, sales_manager, support_manager, sales_partner, support_partner, price_level, action_type_name, promo_codes, resubscription_count, resubscription_type_name, payment_status, registration_money, registration_money_complect, extension_manager, support_result_id, support_result_user_id, digital_event_id, support_result_comment, action_name, type_main_product, type_main_product_id, max_sales_license, min_period, incident_id, gr_sale, comment, interval].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AktionClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
