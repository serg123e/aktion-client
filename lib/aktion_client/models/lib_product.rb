=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'date'

module AktionClient
  class LibProduct
    attr_accessor :id

    attr_accessor :name

    attr_accessor :new_type_mainproductid_name

    attr_accessor :new_bankactionid_dm_name

    attr_accessor :transaction_currency_id_name

    attr_accessor :new_direction_ver_name

    attr_accessor :new_executive_editor_id_yomi_name

    attr_accessor :new_admins_publishers_promo_words_id_name

    attr_accessor :new_izdgr_name

    attr_accessor :new_productid_for_demoaccess_name

    attr_accessor :new_executive_editor_id_name

    attr_accessor :new_bankactionid_name

    attr_accessor :new_parentid_name

    attr_accessor :owner_id

    attr_accessor :owner_id_name

    attr_accessor :owner_id_yomi_name

    attr_accessor :owner_id_dsc

    attr_accessor :owner_id_type

    attr_accessor :owning_user

    attr_accessor :new_mainproduct_id

    attr_accessor :owning_business_unit

    attr_accessor :new_productname

    attr_accessor :new_logo_url

    attr_accessor :new_product_group

    attr_accessor :new_pathname

    attr_accessor :new_nr

    attr_accessor :new_url_card_landing

    attr_accessor :new_url_card_id2

    attr_accessor :new_name_accusative

    attr_accessor :new_is_demo_access

    attr_accessor :new_show_in_decree_wizard

    attr_accessor :new_site_demo

    attr_accessor :new_name_genitive

    attr_accessor :new_show_backoffice

    attr_accessor :new_parentid

    attr_accessor :new_ukd_prefix

    attr_accessor :new_product_number

    attr_accessor :new_give_support_to_ss

    attr_accessor :new_digitalid

    attr_accessor :new_price_base_half

    attr_accessor :transaction_currency_id

    attr_accessor :exchange_rate

    attr_accessor :new_pricebase_half_base

    attr_accessor :new_price_base_year

    attr_accessor :new_pricebase_year_base

    attr_accessor :new_location_publications_internet

    attr_accessor :new_description_detailes_product

    attr_accessor :new_annotation

    attr_accessor :new_tagline

    attr_accessor :new_type_main_product

    attr_accessor :new_reregistertype

    attr_accessor :new_editiontype

    attr_accessor :new_validity_demo_access

    attr_accessor :new_product_value

    attr_accessor :new_show_outside

    attr_accessor :new_mcfr_id

    attr_accessor :new_shortname

    attr_accessor :new_require_special_order

    attr_accessor :new_site_id2

    attr_accessor :new_bonus_name

    attr_accessor :new_bankactionid

    attr_accessor :new_activate_link_text

    attr_accessor :new_name_dative

    attr_accessor :new_name_prepositional

    attr_accessor :new_registration

    attr_accessor :new_is_email_sent

    attr_accessor :new_iscl

    attr_accessor :new_izdgr

    attr_accessor :new_type_mainproductid

    attr_accessor :new_direction_ver

    attr_accessor :new_bankactionid_dm

    attr_accessor :new_receipt_product_name

    attr_accessor :new_productid_for_demoaccess

    attr_accessor :new_limit_demo_access_count

    attr_accessor :new_limit_demo_access_days

    attr_accessor :new_actionbonus_id

    attr_accessor :new_cert_name

    attr_accessor :new_executive_editor_id

    attr_accessor :new_admins_publishers_promo_words_id

    attr_accessor :file_in_text_id

    attr_accessor :short_name

    attr_accessor :main_product_id

    attr_accessor :file_name

    attr_accessor :url

    attr_accessor :new_publisher_forum_url

    attr_accessor :new_dir_name

    attr_accessor :new_dir

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'new_type_mainproductid_name' => :'new_type_mainproductidName',
        :'new_bankactionid_dm_name' => :'new_bankactionid_dmName',
        :'transaction_currency_id_name' => :'transactionCurrencyIdName',
        :'new_direction_ver_name' => :'new_direction_verName',
        :'new_executive_editor_id_yomi_name' => :'new_ExecutiveEditorIdYomiName',
        :'new_admins_publishers_promo_words_id_name' => :'new_AdminsPublishers_PromoWordsIdName',
        :'new_izdgr_name' => :'new_izdgrName',
        :'new_productid_for_demoaccess_name' => :'new_productid_for_demoaccessName',
        :'new_executive_editor_id_name' => :'new_ExecutiveEditorIdName',
        :'new_bankactionid_name' => :'new_bankactionidName',
        :'new_parentid_name' => :'new_parentidName',
        :'owner_id' => :'ownerId',
        :'owner_id_name' => :'ownerIdName',
        :'owner_id_yomi_name' => :'ownerIdYomiName',
        :'owner_id_dsc' => :'ownerIdDsc',
        :'owner_id_type' => :'ownerIdType',
        :'owning_user' => :'owningUser',
        :'new_mainproduct_id' => :'new_mainproductId',
        :'owning_business_unit' => :'owningBusinessUnit',
        :'new_productname' => :'new_productname',
        :'new_logo_url' => :'new_logo_url',
        :'new_product_group' => :'new_product_group',
        :'new_pathname' => :'new_pathname',
        :'new_nr' => :'new_nr',
        :'new_url_card_landing' => :'new_url_card_landing',
        :'new_url_card_id2' => :'new_url_card_id2',
        :'new_name_accusative' => :'new_name_accusative',
        :'new_is_demo_access' => :'new_IsDemo_Access',
        :'new_show_in_decree_wizard' => :'new_show_in_decree_wizard',
        :'new_site_demo' => :'new_site_demo',
        :'new_name_genitive' => :'new_name_genitive',
        :'new_show_backoffice' => :'new_show_backoffice',
        :'new_parentid' => :'new_parentid',
        :'new_ukd_prefix' => :'new_ukd_prefix',
        :'new_product_number' => :'new_ProductNumber',
        :'new_give_support_to_ss' => :'new_giveSupportToSS',
        :'new_digitalid' => :'new_digitalid',
        :'new_price_base_half' => :'new_PriceBase_Half',
        :'transaction_currency_id' => :'transactionCurrencyId',
        :'exchange_rate' => :'exchangeRate',
        :'new_pricebase_half_base' => :'new_pricebase_half_Base',
        :'new_price_base_year' => :'new_PriceBase_Year',
        :'new_pricebase_year_base' => :'new_pricebase_year_Base',
        :'new_location_publications_internet' => :'new_LocationPublicationsInternet',
        :'new_description_detailes_product' => :'new_Description_DetailesProduct',
        :'new_annotation' => :'new_Annotation',
        :'new_tagline' => :'new_Tagline',
        :'new_type_main_product' => :'new_Type_MainProduct',
        :'new_reregistertype' => :'new_reregistertype',
        :'new_editiontype' => :'new_editiontype',
        :'new_validity_demo_access' => :'new_validity_demo_access',
        :'new_product_value' => :'new_product_value',
        :'new_show_outside' => :'new_show_outside',
        :'new_mcfr_id' => :'new_mcfrId',
        :'new_shortname' => :'new_shortname',
        :'new_require_special_order' => :'new_RequireSpecialOrder',
        :'new_site_id2' => :'new_site_id2',
        :'new_bonus_name' => :'new_BonusName',
        :'new_bankactionid' => :'new_bankactionid',
        :'new_activate_link_text' => :'new_ActivateLinkText',
        :'new_name_dative' => :'new_name_dative',
        :'new_name_prepositional' => :'new_name_prepositional',
        :'new_registration' => :'new_registration',
        :'new_is_email_sent' => :'new_IsEmailSent',
        :'new_iscl' => :'new_iscl',
        :'new_izdgr' => :'new_izdgr',
        :'new_type_mainproductid' => :'new_type_mainproductid',
        :'new_direction_ver' => :'new_direction_ver',
        :'new_bankactionid_dm' => :'new_bankactionid_dm',
        :'new_receipt_product_name' => :'new_ReceiptProductName',
        :'new_productid_for_demoaccess' => :'new_productid_for_demoaccess',
        :'new_limit_demo_access_count' => :'new_LimitDemoAccessCount',
        :'new_limit_demo_access_days' => :'new_LimitDemoAccessDays',
        :'new_actionbonus_id' => :'new_actionbonusId',
        :'new_cert_name' => :'new_CertName',
        :'new_executive_editor_id' => :'new_ExecutiveEditorId',
        :'new_admins_publishers_promo_words_id' => :'new_AdminsPublishers_PromoWordsId',
        :'file_in_text_id' => :'fileInTextId',
        :'short_name' => :'shortName',
        :'main_product_id' => :'mainProductId',
        :'file_name' => :'fileName',
        :'url' => :'url',
        :'new_publisher_forum_url' => :'new_PublisherForumUrl',
        :'new_dir_name' => :'new_dirName',
        :'new_dir' => :'new_dir'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'new_type_mainproductid_name' => :'String',
        :'new_bankactionid_dm_name' => :'String',
        :'transaction_currency_id_name' => :'String',
        :'new_direction_ver_name' => :'String',
        :'new_executive_editor_id_yomi_name' => :'String',
        :'new_admins_publishers_promo_words_id_name' => :'String',
        :'new_izdgr_name' => :'String',
        :'new_productid_for_demoaccess_name' => :'String',
        :'new_executive_editor_id_name' => :'String',
        :'new_bankactionid_name' => :'String',
        :'new_parentid_name' => :'String',
        :'owner_id' => :'String',
        :'owner_id_name' => :'String',
        :'owner_id_yomi_name' => :'String',
        :'owner_id_dsc' => :'Integer',
        :'owner_id_type' => :'Integer',
        :'owning_user' => :'String',
        :'new_mainproduct_id' => :'String',
        :'owning_business_unit' => :'String',
        :'new_productname' => :'String',
        :'new_logo_url' => :'String',
        :'new_product_group' => :'Integer',
        :'new_pathname' => :'String',
        :'new_nr' => :'Integer',
        :'new_url_card_landing' => :'String',
        :'new_url_card_id2' => :'String',
        :'new_name_accusative' => :'String',
        :'new_is_demo_access' => :'BOOLEAN',
        :'new_show_in_decree_wizard' => :'BOOLEAN',
        :'new_site_demo' => :'String',
        :'new_name_genitive' => :'String',
        :'new_show_backoffice' => :'BOOLEAN',
        :'new_parentid' => :'String',
        :'new_ukd_prefix' => :'String',
        :'new_product_number' => :'String',
        :'new_give_support_to_ss' => :'BOOLEAN',
        :'new_digitalid' => :'String',
        :'new_price_base_half' => :'Float',
        :'transaction_currency_id' => :'String',
        :'exchange_rate' => :'Float',
        :'new_pricebase_half_base' => :'Float',
        :'new_price_base_year' => :'Float',
        :'new_pricebase_year_base' => :'Float',
        :'new_location_publications_internet' => :'String',
        :'new_description_detailes_product' => :'String',
        :'new_annotation' => :'String',
        :'new_tagline' => :'String',
        :'new_type_main_product' => :'Integer',
        :'new_reregistertype' => :'Integer',
        :'new_editiontype' => :'Integer',
        :'new_validity_demo_access' => :'Integer',
        :'new_product_value' => :'Integer',
        :'new_show_outside' => :'Integer',
        :'new_mcfr_id' => :'Integer',
        :'new_shortname' => :'String',
        :'new_require_special_order' => :'Integer',
        :'new_site_id2' => :'BOOLEAN',
        :'new_bonus_name' => :'String',
        :'new_bankactionid' => :'String',
        :'new_activate_link_text' => :'String',
        :'new_name_dative' => :'String',
        :'new_name_prepositional' => :'String',
        :'new_registration' => :'Integer',
        :'new_is_email_sent' => :'BOOLEAN',
        :'new_iscl' => :'BOOLEAN',
        :'new_izdgr' => :'String',
        :'new_type_mainproductid' => :'String',
        :'new_direction_ver' => :'String',
        :'new_bankactionid_dm' => :'String',
        :'new_receipt_product_name' => :'String',
        :'new_productid_for_demoaccess' => :'String',
        :'new_limit_demo_access_count' => :'Integer',
        :'new_limit_demo_access_days' => :'Integer',
        :'new_actionbonus_id' => :'Integer',
        :'new_cert_name' => :'String',
        :'new_executive_editor_id' => :'String',
        :'new_admins_publishers_promo_words_id' => :'String',
        :'file_in_text_id' => :'String',
        :'short_name' => :'String',
        :'main_product_id' => :'String',
        :'file_name' => :'String',
        :'url' => :'String',
        :'new_publisher_forum_url' => :'String',
        :'new_dir_name' => :'String',
        :'new_dir' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'new_type_mainproductidName')
        self.new_type_mainproductid_name = attributes[:'new_type_mainproductidName']
      end

      if attributes.has_key?(:'new_bankactionid_dmName')
        self.new_bankactionid_dm_name = attributes[:'new_bankactionid_dmName']
      end

      if attributes.has_key?(:'transactionCurrencyIdName')
        self.transaction_currency_id_name = attributes[:'transactionCurrencyIdName']
      end

      if attributes.has_key?(:'new_direction_verName')
        self.new_direction_ver_name = attributes[:'new_direction_verName']
      end

      if attributes.has_key?(:'new_ExecutiveEditorIdYomiName')
        self.new_executive_editor_id_yomi_name = attributes[:'new_ExecutiveEditorIdYomiName']
      end

      if attributes.has_key?(:'new_AdminsPublishers_PromoWordsIdName')
        self.new_admins_publishers_promo_words_id_name = attributes[:'new_AdminsPublishers_PromoWordsIdName']
      end

      if attributes.has_key?(:'new_izdgrName')
        self.new_izdgr_name = attributes[:'new_izdgrName']
      end

      if attributes.has_key?(:'new_productid_for_demoaccessName')
        self.new_productid_for_demoaccess_name = attributes[:'new_productid_for_demoaccessName']
      end

      if attributes.has_key?(:'new_ExecutiveEditorIdName')
        self.new_executive_editor_id_name = attributes[:'new_ExecutiveEditorIdName']
      end

      if attributes.has_key?(:'new_bankactionidName')
        self.new_bankactionid_name = attributes[:'new_bankactionidName']
      end

      if attributes.has_key?(:'new_parentidName')
        self.new_parentid_name = attributes[:'new_parentidName']
      end

      if attributes.has_key?(:'ownerId')
        self.owner_id = attributes[:'ownerId']
      end

      if attributes.has_key?(:'ownerIdName')
        self.owner_id_name = attributes[:'ownerIdName']
      end

      if attributes.has_key?(:'ownerIdYomiName')
        self.owner_id_yomi_name = attributes[:'ownerIdYomiName']
      end

      if attributes.has_key?(:'ownerIdDsc')
        self.owner_id_dsc = attributes[:'ownerIdDsc']
      end

      if attributes.has_key?(:'ownerIdType')
        self.owner_id_type = attributes[:'ownerIdType']
      end

      if attributes.has_key?(:'owningUser')
        self.owning_user = attributes[:'owningUser']
      end

      if attributes.has_key?(:'new_mainproductId')
        self.new_mainproduct_id = attributes[:'new_mainproductId']
      end

      if attributes.has_key?(:'owningBusinessUnit')
        self.owning_business_unit = attributes[:'owningBusinessUnit']
      end

      if attributes.has_key?(:'new_productname')
        self.new_productname = attributes[:'new_productname']
      end

      if attributes.has_key?(:'new_logo_url')
        self.new_logo_url = attributes[:'new_logo_url']
      end

      if attributes.has_key?(:'new_product_group')
        self.new_product_group = attributes[:'new_product_group']
      end

      if attributes.has_key?(:'new_pathname')
        self.new_pathname = attributes[:'new_pathname']
      end

      if attributes.has_key?(:'new_nr')
        self.new_nr = attributes[:'new_nr']
      end

      if attributes.has_key?(:'new_url_card_landing')
        self.new_url_card_landing = attributes[:'new_url_card_landing']
      end

      if attributes.has_key?(:'new_url_card_id2')
        self.new_url_card_id2 = attributes[:'new_url_card_id2']
      end

      if attributes.has_key?(:'new_name_accusative')
        self.new_name_accusative = attributes[:'new_name_accusative']
      end

      if attributes.has_key?(:'new_IsDemo_Access')
        self.new_is_demo_access = attributes[:'new_IsDemo_Access']
      end

      if attributes.has_key?(:'new_show_in_decree_wizard')
        self.new_show_in_decree_wizard = attributes[:'new_show_in_decree_wizard']
      end

      if attributes.has_key?(:'new_site_demo')
        self.new_site_demo = attributes[:'new_site_demo']
      end

      if attributes.has_key?(:'new_name_genitive')
        self.new_name_genitive = attributes[:'new_name_genitive']
      end

      if attributes.has_key?(:'new_show_backoffice')
        self.new_show_backoffice = attributes[:'new_show_backoffice']
      end

      if attributes.has_key?(:'new_parentid')
        self.new_parentid = attributes[:'new_parentid']
      end

      if attributes.has_key?(:'new_ukd_prefix')
        self.new_ukd_prefix = attributes[:'new_ukd_prefix']
      end

      if attributes.has_key?(:'new_ProductNumber')
        self.new_product_number = attributes[:'new_ProductNumber']
      end

      if attributes.has_key?(:'new_giveSupportToSS')
        self.new_give_support_to_ss = attributes[:'new_giveSupportToSS']
      end

      if attributes.has_key?(:'new_digitalid')
        self.new_digitalid = attributes[:'new_digitalid']
      end

      if attributes.has_key?(:'new_PriceBase_Half')
        self.new_price_base_half = attributes[:'new_PriceBase_Half']
      end

      if attributes.has_key?(:'transactionCurrencyId')
        self.transaction_currency_id = attributes[:'transactionCurrencyId']
      end

      if attributes.has_key?(:'exchangeRate')
        self.exchange_rate = attributes[:'exchangeRate']
      end

      if attributes.has_key?(:'new_pricebase_half_Base')
        self.new_pricebase_half_base = attributes[:'new_pricebase_half_Base']
      end

      if attributes.has_key?(:'new_PriceBase_Year')
        self.new_price_base_year = attributes[:'new_PriceBase_Year']
      end

      if attributes.has_key?(:'new_pricebase_year_Base')
        self.new_pricebase_year_base = attributes[:'new_pricebase_year_Base']
      end

      if attributes.has_key?(:'new_LocationPublicationsInternet')
        self.new_location_publications_internet = attributes[:'new_LocationPublicationsInternet']
      end

      if attributes.has_key?(:'new_Description_DetailesProduct')
        self.new_description_detailes_product = attributes[:'new_Description_DetailesProduct']
      end

      if attributes.has_key?(:'new_Annotation')
        self.new_annotation = attributes[:'new_Annotation']
      end

      if attributes.has_key?(:'new_Tagline')
        self.new_tagline = attributes[:'new_Tagline']
      end

      if attributes.has_key?(:'new_Type_MainProduct')
        self.new_type_main_product = attributes[:'new_Type_MainProduct']
      end

      if attributes.has_key?(:'new_reregistertype')
        self.new_reregistertype = attributes[:'new_reregistertype']
      end

      if attributes.has_key?(:'new_editiontype')
        self.new_editiontype = attributes[:'new_editiontype']
      end

      if attributes.has_key?(:'new_validity_demo_access')
        self.new_validity_demo_access = attributes[:'new_validity_demo_access']
      end

      if attributes.has_key?(:'new_product_value')
        self.new_product_value = attributes[:'new_product_value']
      end

      if attributes.has_key?(:'new_show_outside')
        self.new_show_outside = attributes[:'new_show_outside']
      end

      if attributes.has_key?(:'new_mcfrId')
        self.new_mcfr_id = attributes[:'new_mcfrId']
      end

      if attributes.has_key?(:'new_shortname')
        self.new_shortname = attributes[:'new_shortname']
      end

      if attributes.has_key?(:'new_RequireSpecialOrder')
        self.new_require_special_order = attributes[:'new_RequireSpecialOrder']
      end

      if attributes.has_key?(:'new_site_id2')
        self.new_site_id2 = attributes[:'new_site_id2']
      end

      if attributes.has_key?(:'new_BonusName')
        self.new_bonus_name = attributes[:'new_BonusName']
      end

      if attributes.has_key?(:'new_bankactionid')
        self.new_bankactionid = attributes[:'new_bankactionid']
      end

      if attributes.has_key?(:'new_ActivateLinkText')
        self.new_activate_link_text = attributes[:'new_ActivateLinkText']
      end

      if attributes.has_key?(:'new_name_dative')
        self.new_name_dative = attributes[:'new_name_dative']
      end

      if attributes.has_key?(:'new_name_prepositional')
        self.new_name_prepositional = attributes[:'new_name_prepositional']
      end

      if attributes.has_key?(:'new_registration')
        self.new_registration = attributes[:'new_registration']
      end

      if attributes.has_key?(:'new_IsEmailSent')
        self.new_is_email_sent = attributes[:'new_IsEmailSent']
      end

      if attributes.has_key?(:'new_iscl')
        self.new_iscl = attributes[:'new_iscl']
      end

      if attributes.has_key?(:'new_izdgr')
        self.new_izdgr = attributes[:'new_izdgr']
      end

      if attributes.has_key?(:'new_type_mainproductid')
        self.new_type_mainproductid = attributes[:'new_type_mainproductid']
      end

      if attributes.has_key?(:'new_direction_ver')
        self.new_direction_ver = attributes[:'new_direction_ver']
      end

      if attributes.has_key?(:'new_bankactionid_dm')
        self.new_bankactionid_dm = attributes[:'new_bankactionid_dm']
      end

      if attributes.has_key?(:'new_ReceiptProductName')
        self.new_receipt_product_name = attributes[:'new_ReceiptProductName']
      end

      if attributes.has_key?(:'new_productid_for_demoaccess')
        self.new_productid_for_demoaccess = attributes[:'new_productid_for_demoaccess']
      end

      if attributes.has_key?(:'new_LimitDemoAccessCount')
        self.new_limit_demo_access_count = attributes[:'new_LimitDemoAccessCount']
      end

      if attributes.has_key?(:'new_LimitDemoAccessDays')
        self.new_limit_demo_access_days = attributes[:'new_LimitDemoAccessDays']
      end

      if attributes.has_key?(:'new_actionbonusId')
        self.new_actionbonus_id = attributes[:'new_actionbonusId']
      end

      if attributes.has_key?(:'new_CertName')
        self.new_cert_name = attributes[:'new_CertName']
      end

      if attributes.has_key?(:'new_ExecutiveEditorId')
        self.new_executive_editor_id = attributes[:'new_ExecutiveEditorId']
      end

      if attributes.has_key?(:'new_AdminsPublishers_PromoWordsId')
        self.new_admins_publishers_promo_words_id = attributes[:'new_AdminsPublishers_PromoWordsId']
      end

      if attributes.has_key?(:'fileInTextId')
        self.file_in_text_id = attributes[:'fileInTextId']
      end

      if attributes.has_key?(:'shortName')
        self.short_name = attributes[:'shortName']
      end

      if attributes.has_key?(:'mainProductId')
        self.main_product_id = attributes[:'mainProductId']
      end

      if attributes.has_key?(:'fileName')
        self.file_name = attributes[:'fileName']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'new_PublisherForumUrl')
        self.new_publisher_forum_url = attributes[:'new_PublisherForumUrl']
      end

      if attributes.has_key?(:'new_dirName')
        self.new_dir_name = attributes[:'new_dirName']
      end

      if attributes.has_key?(:'new_dir')
        self.new_dir = attributes[:'new_dir']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          new_type_mainproductid_name == o.new_type_mainproductid_name &&
          new_bankactionid_dm_name == o.new_bankactionid_dm_name &&
          transaction_currency_id_name == o.transaction_currency_id_name &&
          new_direction_ver_name == o.new_direction_ver_name &&
          new_executive_editor_id_yomi_name == o.new_executive_editor_id_yomi_name &&
          new_admins_publishers_promo_words_id_name == o.new_admins_publishers_promo_words_id_name &&
          new_izdgr_name == o.new_izdgr_name &&
          new_productid_for_demoaccess_name == o.new_productid_for_demoaccess_name &&
          new_executive_editor_id_name == o.new_executive_editor_id_name &&
          new_bankactionid_name == o.new_bankactionid_name &&
          new_parentid_name == o.new_parentid_name &&
          owner_id == o.owner_id &&
          owner_id_name == o.owner_id_name &&
          owner_id_yomi_name == o.owner_id_yomi_name &&
          owner_id_dsc == o.owner_id_dsc &&
          owner_id_type == o.owner_id_type &&
          owning_user == o.owning_user &&
          new_mainproduct_id == o.new_mainproduct_id &&
          owning_business_unit == o.owning_business_unit &&
          new_productname == o.new_productname &&
          new_logo_url == o.new_logo_url &&
          new_product_group == o.new_product_group &&
          new_pathname == o.new_pathname &&
          new_nr == o.new_nr &&
          new_url_card_landing == o.new_url_card_landing &&
          new_url_card_id2 == o.new_url_card_id2 &&
          new_name_accusative == o.new_name_accusative &&
          new_is_demo_access == o.new_is_demo_access &&
          new_show_in_decree_wizard == o.new_show_in_decree_wizard &&
          new_site_demo == o.new_site_demo &&
          new_name_genitive == o.new_name_genitive &&
          new_show_backoffice == o.new_show_backoffice &&
          new_parentid == o.new_parentid &&
          new_ukd_prefix == o.new_ukd_prefix &&
          new_product_number == o.new_product_number &&
          new_give_support_to_ss == o.new_give_support_to_ss &&
          new_digitalid == o.new_digitalid &&
          new_price_base_half == o.new_price_base_half &&
          transaction_currency_id == o.transaction_currency_id &&
          exchange_rate == o.exchange_rate &&
          new_pricebase_half_base == o.new_pricebase_half_base &&
          new_price_base_year == o.new_price_base_year &&
          new_pricebase_year_base == o.new_pricebase_year_base &&
          new_location_publications_internet == o.new_location_publications_internet &&
          new_description_detailes_product == o.new_description_detailes_product &&
          new_annotation == o.new_annotation &&
          new_tagline == o.new_tagline &&
          new_type_main_product == o.new_type_main_product &&
          new_reregistertype == o.new_reregistertype &&
          new_editiontype == o.new_editiontype &&
          new_validity_demo_access == o.new_validity_demo_access &&
          new_product_value == o.new_product_value &&
          new_show_outside == o.new_show_outside &&
          new_mcfr_id == o.new_mcfr_id &&
          new_shortname == o.new_shortname &&
          new_require_special_order == o.new_require_special_order &&
          new_site_id2 == o.new_site_id2 &&
          new_bonus_name == o.new_bonus_name &&
          new_bankactionid == o.new_bankactionid &&
          new_activate_link_text == o.new_activate_link_text &&
          new_name_dative == o.new_name_dative &&
          new_name_prepositional == o.new_name_prepositional &&
          new_registration == o.new_registration &&
          new_is_email_sent == o.new_is_email_sent &&
          new_iscl == o.new_iscl &&
          new_izdgr == o.new_izdgr &&
          new_type_mainproductid == o.new_type_mainproductid &&
          new_direction_ver == o.new_direction_ver &&
          new_bankactionid_dm == o.new_bankactionid_dm &&
          new_receipt_product_name == o.new_receipt_product_name &&
          new_productid_for_demoaccess == o.new_productid_for_demoaccess &&
          new_limit_demo_access_count == o.new_limit_demo_access_count &&
          new_limit_demo_access_days == o.new_limit_demo_access_days &&
          new_actionbonus_id == o.new_actionbonus_id &&
          new_cert_name == o.new_cert_name &&
          new_executive_editor_id == o.new_executive_editor_id &&
          new_admins_publishers_promo_words_id == o.new_admins_publishers_promo_words_id &&
          file_in_text_id == o.file_in_text_id &&
          short_name == o.short_name &&
          main_product_id == o.main_product_id &&
          file_name == o.file_name &&
          url == o.url &&
          new_publisher_forum_url == o.new_publisher_forum_url &&
          new_dir_name == o.new_dir_name &&
          new_dir == o.new_dir
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, new_type_mainproductid_name, new_bankactionid_dm_name, transaction_currency_id_name, new_direction_ver_name, new_executive_editor_id_yomi_name, new_admins_publishers_promo_words_id_name, new_izdgr_name, new_productid_for_demoaccess_name, new_executive_editor_id_name, new_bankactionid_name, new_parentid_name, owner_id, owner_id_name, owner_id_yomi_name, owner_id_dsc, owner_id_type, owning_user, new_mainproduct_id, owning_business_unit, new_productname, new_logo_url, new_product_group, new_pathname, new_nr, new_url_card_landing, new_url_card_id2, new_name_accusative, new_is_demo_access, new_show_in_decree_wizard, new_site_demo, new_name_genitive, new_show_backoffice, new_parentid, new_ukd_prefix, new_product_number, new_give_support_to_ss, new_digitalid, new_price_base_half, transaction_currency_id, exchange_rate, new_pricebase_half_base, new_price_base_year, new_pricebase_year_base, new_location_publications_internet, new_description_detailes_product, new_annotation, new_tagline, new_type_main_product, new_reregistertype, new_editiontype, new_validity_demo_access, new_product_value, new_show_outside, new_mcfr_id, new_shortname, new_require_special_order, new_site_id2, new_bonus_name, new_bankactionid, new_activate_link_text, new_name_dative, new_name_prepositional, new_registration, new_is_email_sent, new_iscl, new_izdgr, new_type_mainproductid, new_direction_ver, new_bankactionid_dm, new_receipt_product_name, new_productid_for_demoaccess, new_limit_demo_access_count, new_limit_demo_access_days, new_actionbonus_id, new_cert_name, new_executive_editor_id, new_admins_publishers_promo_words_id, file_in_text_id, short_name, main_product_id, file_name, url, new_publisher_forum_url, new_dir_name, new_dir].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AktionClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
