=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'date'

module AktionClient
  # Модель для создания обращения ServiceDesk
  class CreateTicketModel
    # Id пользователя
    attr_accessor :user_id

    # Email пользователя
    attr_accessor :email

    # Id типа обращения
    attr_accessor :ticket_type_id

    # Текст обращения
    attr_accessor :description

    # Список Id пользователей-наблюдателей
    attr_accessor :watchers_ids

    # Id клиента, с которым связано обращений
    attr_accessor :customer_id

    # Id контактного лица
    attr_accessor :contact_id

    # Id родительского обращения
    attr_accessor :parent_ticket_id

    # Данные спора
    attr_accessor :dispute

    attr_accessor :incident_type_direction_id

    attr_accessor :is_approved

    attr_accessor :gr_sale

    # Дополнительные поля
    attr_accessor :fields

    attr_accessor :license_id

    attr_accessor :main_product_id

    attr_accessor :jira_service_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'user_id' => :'userId',
        :'email' => :'email',
        :'ticket_type_id' => :'ticketTypeId',
        :'description' => :'description',
        :'watchers_ids' => :'watchersIds',
        :'customer_id' => :'customerId',
        :'contact_id' => :'contactId',
        :'parent_ticket_id' => :'parentTicketId',
        :'dispute' => :'dispute',
        :'incident_type_direction_id' => :'incidentTypeDirectionId',
        :'is_approved' => :'isApproved',
        :'gr_sale' => :'grSale',
        :'fields' => :'fields',
        :'license_id' => :'licenseId',
        :'main_product_id' => :'mainProductId',
        :'jira_service_id' => :'jiraServiceId'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'user_id' => :'String',
        :'email' => :'String',
        :'ticket_type_id' => :'String',
        :'description' => :'String',
        :'watchers_ids' => :'Array<String>',
        :'customer_id' => :'String',
        :'contact_id' => :'String',
        :'parent_ticket_id' => :'String',
        :'dispute' => :'CreateDisputeModel',
        :'incident_type_direction_id' => :'String',
        :'is_approved' => :'BOOLEAN',
        :'gr_sale' => :'BOOLEAN',
        :'fields' => :'Array<TicketFieldValue>',
        :'license_id' => :'String',
        :'main_product_id' => :'String',
        :'jira_service_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'userId')
        self.user_id = attributes[:'userId']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'ticketTypeId')
        self.ticket_type_id = attributes[:'ticketTypeId']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'watchersIds')
        if (value = attributes[:'watchersIds']).is_a?(Array)
          self.watchers_ids = value
        end
      end

      if attributes.has_key?(:'customerId')
        self.customer_id = attributes[:'customerId']
      end

      if attributes.has_key?(:'contactId')
        self.contact_id = attributes[:'contactId']
      end

      if attributes.has_key?(:'parentTicketId')
        self.parent_ticket_id = attributes[:'parentTicketId']
      end

      if attributes.has_key?(:'dispute')
        self.dispute = attributes[:'dispute']
      end

      if attributes.has_key?(:'incidentTypeDirectionId')
        self.incident_type_direction_id = attributes[:'incidentTypeDirectionId']
      end

      if attributes.has_key?(:'isApproved')
        self.is_approved = attributes[:'isApproved']
      end

      if attributes.has_key?(:'grSale')
        self.gr_sale = attributes[:'grSale']
      end

      if attributes.has_key?(:'fields')
        if (value = attributes[:'fields']).is_a?(Array)
          self.fields = value
        end
      end

      if attributes.has_key?(:'licenseId')
        self.license_id = attributes[:'licenseId']
      end

      if attributes.has_key?(:'mainProductId')
        self.main_product_id = attributes[:'mainProductId']
      end

      if attributes.has_key?(:'jiraServiceId')
        self.jira_service_id = attributes[:'jiraServiceId']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @ticket_type_id.nil?
        invalid_properties.push('invalid value for "ticket_type_id", ticket_type_id cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @email.nil?
      return false if @ticket_type_id.nil?
      return false if @description.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          user_id == o.user_id &&
          email == o.email &&
          ticket_type_id == o.ticket_type_id &&
          description == o.description &&
          watchers_ids == o.watchers_ids &&
          customer_id == o.customer_id &&
          contact_id == o.contact_id &&
          parent_ticket_id == o.parent_ticket_id &&
          dispute == o.dispute &&
          incident_type_direction_id == o.incident_type_direction_id &&
          is_approved == o.is_approved &&
          gr_sale == o.gr_sale &&
          fields == o.fields &&
          license_id == o.license_id &&
          main_product_id == o.main_product_id &&
          jira_service_id == o.jira_service_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [user_id, email, ticket_type_id, description, watchers_ids, customer_id, contact_id, parent_ticket_id, dispute, incident_type_direction_id, is_approved, gr_sale, fields, license_id, main_product_id, jira_service_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AktionClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
