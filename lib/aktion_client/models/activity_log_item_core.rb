=begin
#Ahello REST API documentation

#На данной странице вы можете выполнять запросы к API, для этого необходимо указать 'appId', который  был передан вам сотрудниками тех. поддержки в поле api_key. Укажите также PartnerUserId (это CRM Id пользователя или его email ), partnerUserId передается в заголовке запроса. Важно!!! ApiKeys-аутентификация c указанием только ключа appId в ближайшее время будет работать только для данной страницы документации. Для реальных сценариев интеграции необходимо использовать HMAC-аутентификацию. В ближайшее время появится раздел помощи по основным вопросам работы с API

OpenAPI spec version: v1
Contact: petrunin@action-media.ru
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'date'

module AktionClient
  class ActivityLogItemCore
    attr_accessor :activity_id

    attr_accessor :activity_type_code

    attr_accessor :subject

    attr_accessor :actual_start

    attr_accessor :actual_end

    attr_accessor :state_code

    attr_accessor :status_code

    attr_accessor :scheduled_start

    attr_accessor :scheduled_end

    attr_accessor :owner_id

    attr_accessor :description

    attr_accessor :regarding_object_id

    attr_accessor :regarding_object_id_name

    attr_accessor :regarding_object_logical_name

    attr_accessor :owner_full_name

    attr_accessor :contact_id

    attr_accessor :contact_full_name

    attr_accessor :call_reason_status_name

    attr_accessor :decline_reason_status_name

    attr_accessor :call_result_status_name

    attr_accessor :party_id

    attr_accessor :activity_party_id

    attr_accessor :party_id_name

    attr_accessor :party_object_type_code

    attr_accessor :is_phone_call

    attr_accessor :next_call_date

    attr_accessor :campaign_name

    attr_accessor :cust_name

    attr_accessor :product_name

    attr_accessor :owner_avatar

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'activity_id' => :'activityId',
        :'activity_type_code' => :'activityTypeCode',
        :'subject' => :'subject',
        :'actual_start' => :'actualStart',
        :'actual_end' => :'actualEnd',
        :'state_code' => :'stateCode',
        :'status_code' => :'statusCode',
        :'scheduled_start' => :'scheduledStart',
        :'scheduled_end' => :'scheduledEnd',
        :'owner_id' => :'ownerId',
        :'description' => :'description',
        :'regarding_object_id' => :'regardingObjectId',
        :'regarding_object_id_name' => :'regardingObjectIdName',
        :'regarding_object_logical_name' => :'regardingObjectLogicalName',
        :'owner_full_name' => :'ownerFullName',
        :'contact_id' => :'contactId',
        :'contact_full_name' => :'contactFullName',
        :'call_reason_status_name' => :'callReasonStatusName',
        :'decline_reason_status_name' => :'declineReasonStatusName',
        :'call_result_status_name' => :'callResultStatusName',
        :'party_id' => :'partyId',
        :'activity_party_id' => :'activityPartyId',
        :'party_id_name' => :'partyIdName',
        :'party_object_type_code' => :'partyObjectTypeCode',
        :'is_phone_call' => :'isPhoneCall',
        :'next_call_date' => :'nextCallDate',
        :'campaign_name' => :'campaign_Name',
        :'cust_name' => :'custName',
        :'product_name' => :'productName',
        :'owner_avatar' => :'ownerAvatar'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'activity_id' => :'String',
        :'activity_type_code' => :'Integer',
        :'subject' => :'String',
        :'actual_start' => :'DateTime',
        :'actual_end' => :'DateTime',
        :'state_code' => :'Integer',
        :'status_code' => :'Integer',
        :'scheduled_start' => :'DateTime',
        :'scheduled_end' => :'DateTime',
        :'owner_id' => :'String',
        :'description' => :'String',
        :'regarding_object_id' => :'String',
        :'regarding_object_id_name' => :'String',
        :'regarding_object_logical_name' => :'String',
        :'owner_full_name' => :'String',
        :'contact_id' => :'String',
        :'contact_full_name' => :'String',
        :'call_reason_status_name' => :'String',
        :'decline_reason_status_name' => :'String',
        :'call_result_status_name' => :'String',
        :'party_id' => :'String',
        :'activity_party_id' => :'String',
        :'party_id_name' => :'String',
        :'party_object_type_code' => :'Integer',
        :'is_phone_call' => :'BOOLEAN',
        :'next_call_date' => :'DateTime',
        :'campaign_name' => :'String',
        :'cust_name' => :'String',
        :'product_name' => :'String',
        :'owner_avatar' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'activityId')
        self.activity_id = attributes[:'activityId']
      end

      if attributes.has_key?(:'activityTypeCode')
        self.activity_type_code = attributes[:'activityTypeCode']
      end

      if attributes.has_key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.has_key?(:'actualStart')
        self.actual_start = attributes[:'actualStart']
      end

      if attributes.has_key?(:'actualEnd')
        self.actual_end = attributes[:'actualEnd']
      end

      if attributes.has_key?(:'stateCode')
        self.state_code = attributes[:'stateCode']
      end

      if attributes.has_key?(:'statusCode')
        self.status_code = attributes[:'statusCode']
      end

      if attributes.has_key?(:'scheduledStart')
        self.scheduled_start = attributes[:'scheduledStart']
      end

      if attributes.has_key?(:'scheduledEnd')
        self.scheduled_end = attributes[:'scheduledEnd']
      end

      if attributes.has_key?(:'ownerId')
        self.owner_id = attributes[:'ownerId']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'regardingObjectId')
        self.regarding_object_id = attributes[:'regardingObjectId']
      end

      if attributes.has_key?(:'regardingObjectIdName')
        self.regarding_object_id_name = attributes[:'regardingObjectIdName']
      end

      if attributes.has_key?(:'regardingObjectLogicalName')
        self.regarding_object_logical_name = attributes[:'regardingObjectLogicalName']
      end

      if attributes.has_key?(:'ownerFullName')
        self.owner_full_name = attributes[:'ownerFullName']
      end

      if attributes.has_key?(:'contactId')
        self.contact_id = attributes[:'contactId']
      end

      if attributes.has_key?(:'contactFullName')
        self.contact_full_name = attributes[:'contactFullName']
      end

      if attributes.has_key?(:'callReasonStatusName')
        self.call_reason_status_name = attributes[:'callReasonStatusName']
      end

      if attributes.has_key?(:'declineReasonStatusName')
        self.decline_reason_status_name = attributes[:'declineReasonStatusName']
      end

      if attributes.has_key?(:'callResultStatusName')
        self.call_result_status_name = attributes[:'callResultStatusName']
      end

      if attributes.has_key?(:'partyId')
        self.party_id = attributes[:'partyId']
      end

      if attributes.has_key?(:'activityPartyId')
        self.activity_party_id = attributes[:'activityPartyId']
      end

      if attributes.has_key?(:'partyIdName')
        self.party_id_name = attributes[:'partyIdName']
      end

      if attributes.has_key?(:'partyObjectTypeCode')
        self.party_object_type_code = attributes[:'partyObjectTypeCode']
      end

      if attributes.has_key?(:'isPhoneCall')
        self.is_phone_call = attributes[:'isPhoneCall']
      end

      if attributes.has_key?(:'nextCallDate')
        self.next_call_date = attributes[:'nextCallDate']
      end

      if attributes.has_key?(:'campaign_Name')
        self.campaign_name = attributes[:'campaign_Name']
      end

      if attributes.has_key?(:'custName')
        self.cust_name = attributes[:'custName']
      end

      if attributes.has_key?(:'productName')
        self.product_name = attributes[:'productName']
      end

      if attributes.has_key?(:'ownerAvatar')
        self.owner_avatar = attributes[:'ownerAvatar']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          activity_id == o.activity_id &&
          activity_type_code == o.activity_type_code &&
          subject == o.subject &&
          actual_start == o.actual_start &&
          actual_end == o.actual_end &&
          state_code == o.state_code &&
          status_code == o.status_code &&
          scheduled_start == o.scheduled_start &&
          scheduled_end == o.scheduled_end &&
          owner_id == o.owner_id &&
          description == o.description &&
          regarding_object_id == o.regarding_object_id &&
          regarding_object_id_name == o.regarding_object_id_name &&
          regarding_object_logical_name == o.regarding_object_logical_name &&
          owner_full_name == o.owner_full_name &&
          contact_id == o.contact_id &&
          contact_full_name == o.contact_full_name &&
          call_reason_status_name == o.call_reason_status_name &&
          decline_reason_status_name == o.decline_reason_status_name &&
          call_result_status_name == o.call_result_status_name &&
          party_id == o.party_id &&
          activity_party_id == o.activity_party_id &&
          party_id_name == o.party_id_name &&
          party_object_type_code == o.party_object_type_code &&
          is_phone_call == o.is_phone_call &&
          next_call_date == o.next_call_date &&
          campaign_name == o.campaign_name &&
          cust_name == o.cust_name &&
          product_name == o.product_name &&
          owner_avatar == o.owner_avatar
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [activity_id, activity_type_code, subject, actual_start, actual_end, state_code, status_code, scheduled_start, scheduled_end, owner_id, description, regarding_object_id, regarding_object_id_name, regarding_object_logical_name, owner_full_name, contact_id, contact_full_name, call_reason_status_name, decline_reason_status_name, call_result_status_name, party_id, activity_party_id, party_id_name, party_object_type_code, is_phone_call, next_call_date, campaign_name, cust_name, product_name, owner_avatar].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AktionClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
